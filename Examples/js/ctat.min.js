/*
 MIT License - https://bitbucket.org/pellepim/jstimezonedetect/src/default/LICENCE.txt

 For usage and examples, visit:
 http://pellepim.bitbucket.org/jstz/

 Copyright (c) Jon Nylander
*/
var jstz = function() {
  var a = {"America/Denver":["America/Mazatlan"], "America/Chicago":["America/Mexico_City"], "America/Santiago":["America/Asuncion", "America/Campo_Grande"], "America/Montevideo":["America/Sao_Paulo"], "Asia/Beirut":"Asia/Amman Asia/Jerusalem Europe/Helsinki Asia/Damascus Africa/Cairo Asia/Gaza Europe/Minsk".split(" "), "Pacific/Auckland":["Pacific/Fiji"], "America/Los_Angeles":["America/Santa_Isabel"], "America/New_York":["America/Havana"], "America/Halifax":["America/Goose_Bay"], "America/Godthab":["America/Miquelon"], 
  "Asia/Dubai":["Asia/Yerevan"], "Asia/Jakarta":["Asia/Krasnoyarsk"], "Asia/Shanghai":["Asia/Irkutsk", "Australia/Perth"], "Australia/Sydney":["Australia/Lord_Howe"], "Asia/Tokyo":["Asia/Yakutsk"], "Asia/Dhaka":["Asia/Omsk"], "Asia/Baku":["Asia/Yerevan"], "Australia/Brisbane":["Asia/Vladivostok"], "Pacific/Noumea":["Asia/Vladivostok"], "Pacific/Majuro":["Asia/Kamchatka", "Pacific/Fiji"], "Pacific/Tongatapu":["Pacific/Apia"], "Asia/Baghdad":["Europe/Minsk", "Europe/Moscow"], "Asia/Karachi":["Asia/Yekaterinburg"], 
  "Africa/Johannesburg":["Asia/Gaza", "Africa/Cairo"]}, b = function(a) {
    a = -a.getTimezoneOffset();
    return null !== a ? a : 0;
  }, f = function() {
    var a = b(new Date(2014, 0, 2)), c = b(new Date(2014, 5, 2)), g = a - c;
    return 0 > g ? a + ",1" : 0 < g ? c + ",1,s" : a + ",0";
  }, e = function() {
    if ("undefined" !== typeof Intl && "undefined" !== typeof Intl.DateTimeFormat) {
      var a = Intl.DateTimeFormat();
      if ("undefined" !== typeof a && "undefined" !== typeof a.resolvedOptions) {
        return a.resolvedOptions().timeZone;
      }
    }
  }, d = function m(a, b, c) {
    "undefined" === typeof b && (b = 864E5, c = 36E5);
    var g = (new Date(a.getTime() - b)).getTime();
    a = a.getTime() + b;
    for (var e = (new Date(g)).getTimezoneOffset(), f = null;g < a - c;) {
      var d = new Date(g);
      if (d.getTimezoneOffset() !== e) {
        f = d;
        break;
      }
      g += c;
    }
    return 864E5 === b ? m(f, 36E5, 6E4) : 36E5 === b ? m(f, 6E4, 1E3) : f;
  }, c = function(a, b, c, g) {
    if ("N/A" !== c) {
      return c;
    }
    if ("Asia/Beirut" === b) {
      if ("Africa/Cairo" === g.name && 13983768E5 === a[6].s && 14116788E5 === a[6].e || "Asia/Jerusalem" === g.name && 13959648E5 === a[6].s && 14118588E5 === a[6].e) {
        return 0;
      }
    } else {
      if ("America/Santiago" === b) {
        if ("America/Asuncion" === g.name && 14124816E5 === a[6].s && 1397358E6 === a[6].e || "America/Campo_Grande" === g.name && 14136912E5 === a[6].s && 13925196E5 === a[6].e) {
          return 0;
        }
      } else {
        if ("America/Montevideo" === b) {
          if ("America/Sao_Paulo" === g.name && 14136876E5 === a[6].s && 1392516E6 === a[6].e) {
            return 0;
          }
        } else {
          if ("Pacific/Auckland" === b && "Pacific/Fiji" === g.name && 14142456E5 === a[6].s && 13961016E5 === a[6].e) {
            return 0;
          }
        }
      }
    }
    return c;
  }, g = function(b, g) {
    for (var e = {}, f = jstz.olson.dst_rules.zones, d = f.length, h = a[g], w = 0;w < d;w++) {
      var z = f[w], t;
      t = f[w];
      for (var D = 0, C = 0;C < b.length;C++) {
        if (t.rules[C] && b[C]) {
          if (b[C].s >= t.rules[C].s && b[C].e <= t.rules[C].e) {
            D = 0, D += Math.abs(b[C].s - t.rules[C].s), D += Math.abs(t.rules[C].e - b[C].e);
          } else {
            D = "N/A";
            break;
          }
          if (864E6 < D) {
            D = "N/A";
            break;
          }
        }
      }
      t = D = c(b, g, D, t);
      "N/A" !== t && (e[z.name] = t);
    }
    for (var H in e) {
      if (e.hasOwnProperty(H) && -1 != h.indexOf(H)) {
        return H;
      }
    }
    return g;
  }, h = function(a) {
    var b = function() {
      for (var a = [], b = 0;b < jstz.olson.dst_rules.years.length;b++) {
        var c;
        c = jstz.olson.dst_rules.years[b];
        var g = (new Date(c, 0, 1, 0, 0, 1, 0)).getTime();
        c = (new Date(c, 12, 31, 23, 59, 59)).getTime();
        for (var e = (new Date(g)).getTimezoneOffset(), f = null, h = null;g < c - 864E5;) {
          var m = new Date(g), q = m.getTimezoneOffset();
          q !== e && (q < e && (f = m), q > e && (h = m), e = q);
          g += 864E5;
        }
        c = f && h ? {s:d(f).getTime(), e:d(h).getTime()} : !1;
        a.push(c);
      }
      return a;
    }();
    return function(a) {
      for (var b = 0;b < a.length;b++) {
        if (!1 !== a[b]) {
          return !0;
        }
      }
      return !1;
    }(b) ? g(b, a) : a;
  };
  return {determine:function() {
    var b = e();
    b || (b = jstz.olson.timezones[f()], "undefined" !== typeof a[b] && (b = h(b)));
    return {name:function() {
      return b;
    }};
  }};
}();
jstz.olson = jstz.olson || {};
jstz.olson.timezones = {"-720,0":"Etc/GMT+12", "-660,0":"Pacific/Pago_Pago", "-660,1,s":"Pacific/Apia", "-600,1":"America/Adak", "-600,0":"Pacific/Honolulu", "-570,0":"Pacific/Marquesas", "-540,0":"Pacific/Gambier", "-540,1":"America/Anchorage", "-480,1":"America/Los_Angeles", "-480,0":"Pacific/Pitcairn", "-420,0":"America/Phoenix", "-420,1":"America/Denver", "-360,0":"America/Guatemala", "-360,1":"America/Chicago", "-360,1,s":"Pacific/Easter", "-300,0":"America/Bogota", "-300,1":"America/New_York", 
"-270,0":"America/Caracas", "-240,1":"America/Halifax", "-240,0":"America/Santo_Domingo", "-240,1,s":"America/Santiago", "-210,1":"America/St_Johns", "-180,1":"America/Godthab", "-180,0":"America/Argentina/Buenos_Aires", "-180,1,s":"America/Montevideo", "-120,0":"America/Noronha", "-120,1":"America/Noronha", "-60,1":"Atlantic/Azores", "-60,0":"Atlantic/Cape_Verde", "0,0":"UTC", "0,1":"Europe/London", "60,1":"Europe/Berlin", "60,0":"Africa/Lagos", "60,1,s":"Africa/Windhoek", "120,1":"Asia/Beirut", 
"120,0":"Africa/Johannesburg", "180,0":"Asia/Baghdad", "180,1":"Europe/Moscow", "210,1":"Asia/Tehran", "240,0":"Asia/Dubai", "240,1":"Asia/Baku", "270,0":"Asia/Kabul", "300,1":"Asia/Yekaterinburg", "300,0":"Asia/Karachi", "330,0":"Asia/Kolkata", "345,0":"Asia/Kathmandu", "360,0":"Asia/Dhaka", "360,1":"Asia/Omsk", "390,0":"Asia/Rangoon", "420,1":"Asia/Krasnoyarsk", "420,0":"Asia/Jakarta", "480,0":"Asia/Shanghai", "480,1":"Asia/Irkutsk", "525,0":"Australia/Eucla", "525,1,s":"Australia/Eucla", "540,1":"Asia/Yakutsk", 
"540,0":"Asia/Tokyo", "570,0":"Australia/Darwin", "570,1,s":"Australia/Adelaide", "600,0":"Australia/Brisbane", "600,1":"Asia/Vladivostok", "600,1,s":"Australia/Sydney", "630,1,s":"Australia/Lord_Howe", "660,1":"Asia/Kamchatka", "660,0":"Pacific/Noumea", "690,0":"Pacific/Norfolk", "720,1,s":"Pacific/Auckland", "720,0":"Pacific/Majuro", "765,1,s":"Pacific/Chatham", "780,0":"Pacific/Tongatapu", "780,1,s":"Pacific/Apia", "840,0":"Pacific/Kiritimati"};
jstz.olson.dst_rules = {years:[2008, 2009, 2010, 2011, 2012, 2013, 2014], zones:[{name:"Africa/Cairo", rules:[{e:12199572E5, s:12090744E5}, {e:1250802E6, s:1240524E6}, {e:12858804E5, s:12840696E5}, !1, !1, !1, {e:14116788E5, s:1406844E6}]}, {name:"America/Asuncion", rules:[{e:12050316E5, s:12243888E5}, {e:12364812E5, s:12558384E5}, {e:12709548E5, s:12860784E5}, {e:13024044E5, s:1317528E6}, {e:1333854E6, s:13495824E5}, {e:1364094E6, s:1381032E6}, {e:13955436E5, s:14124816E5}]}, {name:"America/Campo_Grande", 
rules:[{e:12032172E5, s:12243888E5}, {e:12346668E5, s:12558384E5}, {e:12667212E5, s:1287288E6}, {e:12981708E5, s:13187376E5}, {e:13302252E5, s:1350792E6}, {e:136107E7, s:13822416E5}, {e:13925196E5, s:14136912E5}]}, {name:"America/Goose_Bay", rules:[{e:122559486E4, s:120503526E4}, {e:125704446E4, s:123648486E4}, {e:128909886E4, s:126853926E4}, {e:13205556E5, s:129998886E4}, {e:13520052E5, s:13314456E5}, {e:13834548E5, s:13628952E5}, {e:14149044E5, s:13943448E5}]}, {name:"America/Havana", rules:[{e:12249972E5, 
s:12056436E5}, {e:12564468E5, s:12364884E5}, {e:12885012E5, s:12685428E5}, {e:13211604E5, s:13005972E5}, {e:13520052E5, s:13332564E5}, {e:13834548E5, s:13628916E5}, {e:14149044E5, s:13943412E5}]}, {name:"America/Mazatlan", rules:[{e:1225008E6, s:12074724E5}, {e:12564576E5, s:1238922E6}, {e:1288512E6, s:12703716E5}, {e:13199616E5, s:13018212E5}, {e:13514112E5, s:13332708E5}, {e:13828608E5, s:13653252E5}, {e:14143104E5, s:13967748E5}]}, {name:"America/Mexico_City", rules:[{e:12250044E5, s:12074688E5}, 
{e:1256454E6, s:12389184E5}, {e:12885084E5, s:1270368E6}, {e:1319958E6, s:13018176E5}, {e:13514076E5, s:13332672E5}, {e:13828572E5, s:13653216E5}, {e:14143068E5, s:13967712E5}]}, {name:"America/Miquelon", rules:[{e:12255984E5, s:12050388E5}, {e:1257048E6, s:12364884E5}, {e:12891024E5, s:12685428E5}, {e:1320552E6, s:12999924E5}, {e:13520016E5, s:1331442E6}, {e:13834512E5, s:13628916E5}, {e:14149008E5, s:13943412E5}]}, {name:"America/Santa_Isabel", rules:[{e:12250116E5, s:1207476E6}, {e:12564612E5, 
s:12389256E5}, {e:12885156E5, s:12703752E5}, {e:13199652E5, s:13018248E5}, {e:13514148E5, s:13332744E5}, {e:13828644E5, s:13653288E5}, {e:1414314E6, s:13967784E5}]}, {name:"America/Sao_Paulo", rules:[{e:12032136E5, s:12243852E5}, {e:12346632E5, s:12558348E5}, {e:12667176E5, s:12872844E5}, {e:12981672E5, s:1318734E6}, {e:13302216E5, s:13507884E5}, {e:13610664E5, s:1382238E6}, {e:1392516E6, s:14136876E5}]}, {name:"Asia/Amman", rules:[{e:1225404E6, s:12066552E5}, {e:12568536E5, s:12381048E5}, {e:12883032E5, 
s:12695544E5}, {e:13197528E5, s:13016088E5}, !1, !1, {e:14147064E5, s:13959576E5}]}, {name:"Asia/Damascus", rules:[{e:12254868E5, s:120726E7}, {e:125685E7, s:12381048E5}, {e:12882996E5, s:12701592E5}, {e:13197492E5, s:13016088E5}, {e:13511988E5, s:13330584E5}, {e:13826484E5, s:1364508E6}, {e:14147028E5, s:13959576E5}]}, {name:"Asia/Dubai", rules:[!1, !1, !1, !1, !1, !1, !1]}, {name:"Asia/Gaza", rules:[{e:12199572E5, s:12066552E5}, {e:12520152E5, s:12381048E5}, {e:1281474E6, s:126964086E4}, {e:1312146E6, 
s:130160886E4}, {e:13481784E5, s:13330584E5}, {e:13802292E5, s:1364508E6}, {e:14116788E5, s:13959576E5}]}, {name:"Asia/Irkutsk", rules:[{e:12249576E5, s:12068136E5}, {e:12564072E5, s:12382632E5}, {e:12884616E5, s:12697128E5}, !1, !1, !1, !1]}, {name:"Asia/Jerusalem", rules:[{e:12231612E5, s:12066624E5}, {e:1254006E6, s:1238112E6}, {e:1284246E6, s:12695616E5}, {e:131751E7, s:1301616E6}, {e:13483548E5, s:13330656E5}, {e:13828284E5, s:13645152E5}, {e:1414278E6, s:13959648E5}]}, {name:"Asia/Kamchatka", 
rules:[{e:12249432E5, s:12067992E5}, {e:12563928E5, s:12382488E5}, {e:12884508E5, s:12696984E5}, !1, !1, !1, !1]}, {name:"Asia/Krasnoyarsk", rules:[{e:12249612E5, s:12068172E5}, {e:12564108E5, s:12382668E5}, {e:12884652E5, s:12697164E5}, !1, !1, !1, !1]}, {name:"Asia/Omsk", rules:[{e:12249648E5, s:12068208E5}, {e:12564144E5, s:12382704E5}, {e:12884688E5, s:126972E7}, !1, !1, !1, !1]}, {name:"Asia/Vladivostok", rules:[{e:12249504E5, s:12068064E5}, {e:12564E8, s:1238256E6}, {e:12884544E5, s:12697056E5}, 
!1, !1, !1, !1]}, {name:"Asia/Yakutsk", rules:[{e:1224954E6, s:120681E7}, {e:12564036E5, s:12382596E5}, {e:1288458E6, s:12697092E5}, !1, !1, !1, !1]}, {name:"Asia/Yekaterinburg", rules:[{e:12249684E5, s:12068244E5}, {e:1256418E6, s:1238274E6}, {e:12884724E5, s:12697236E5}, !1, !1, !1, !1]}, {name:"Asia/Yerevan", rules:[{e:1224972E6, s:1206828E6}, {e:12564216E5, s:12382776E5}, {e:1288476E6, s:12697272E5}, {e:13199256E5, s:13011768E5}, !1, !1, !1]}, {name:"Australia/Lord_Howe", rules:[{e:12074076E5, 
s:12231342E5}, {e:12388572E5, s:12545838E5}, {e:12703068E5, s:12860334E5}, {e:13017564E5, s:1317483E6}, {e:1333206E6, s:13495374E5}, {e:13652604E5, s:1380987E6}, {e:139671E7, s:14124366E5}]}, {name:"Australia/Perth", rules:[{e:12068136E5, s:12249576E5}, !1, !1, !1, !1, !1, !1]}, {name:"Europe/Helsinki", rules:[{e:12249828E5, s:12068388E5}, {e:12564324E5, s:12382884E5}, {e:12884868E5, s:1269738E6}, {e:13199364E5, s:13011876E5}, {e:1351386E6, s:13326372E5}, {e:13828356E5, s:13646916E5}, {e:14142852E5, 
s:13961412E5}]}, {name:"Europe/Minsk", rules:[{e:12249792E5, s:12068352E5}, {e:12564288E5, s:12382848E5}, {e:12884832E5, s:12697344E5}, !1, !1, !1, !1]}, {name:"Europe/Moscow", rules:[{e:12249756E5, s:12068316E5}, {e:12564252E5, s:12382812E5}, {e:12884796E5, s:12697308E5}, !1, !1, !1, !1]}, {name:"Pacific/Apia", rules:[!1, !1, !1, {e:13017528E5, s:13168728E5}, {e:13332024E5, s:13489272E5}, {e:13652568E5, s:13803768E5}, {e:13967064E5, s:14118264E5}]}, {name:"Pacific/Fiji", rules:[!1, !1, {e:12696984E5, 
s:12878424E5}, {e:13271544E5, s:1319292E6}, {e:1358604E6, s:13507416E5}, {e:139005E7, s:1382796E6}, {e:14215032E5, s:14148504E5}]}]};
(function(a, b) {
  "object" == typeof module && module.exports ? module.exports = b() : "function" == typeof define && define.amd ? define(b) : a.Spinner = b();
})(this, function() {
  function a(a, b) {
    var c = document.createElement(a || "div"), g;
    for (g in b) {
      c[g] = b[g];
    }
    return c;
  }
  function b(a) {
    for (var b = 1, c = arguments.length;b < c;b++) {
      a.appendChild(arguments[b]);
    }
    return a;
  }
  function f(a, b, c, g) {
    var e = ["opacity", b, ~~(100 * a), c, g].join("-");
    c = .01 + c / g * 100;
    g = Math.max(1 - (1 - a) / b * (100 - c), a);
    var f = p.substring(0, p.indexOf("Animation")).toLowerCase();
    q[e] || (n.insertRule("@" + (f && "-" + f + "-" || "") + "keyframes " + e + "{0%{opacity:" + g + "}" + c + "%{opacity:" + a + "}" + (c + .01) + "%{opacity:1}" + (c + b) % 100 + "%{opacity:" + a + "}100%{opacity:" + g + "}}", n.cssRules.length), q[e] = 1);
    return e;
  }
  function e(a, b) {
    var c = a.style, g, e;
    b = b.charAt(0).toUpperCase() + b.slice(1);
    if (void 0 !== c[b]) {
      return b;
    }
    for (e = 0;e < m.length;e++) {
      if (g = m[e] + b, void 0 !== c[g]) {
        return g;
      }
    }
  }
  function d(a, b) {
    for (var c in b) {
      a.style[e(a, c) || c] = b[c];
    }
    return a;
  }
  function c(a) {
    for (var b = 1;b < arguments.length;b++) {
      var c = arguments[b], g;
      for (g in c) {
        void 0 === a[g] && (a[g] = c[g]);
      }
    }
    return a;
  }
  function g(a, b) {
    return "string" == typeof a ? a : a[b % a.length];
  }
  function h(a) {
    this.opts = c(a || {}, h.defaults, x);
  }
  function l() {
    function c(b, g) {
      return a("<" + b + ' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">', g);
    }
    n.addRule(".spin-vml", "behavior:url(#default#VML)");
    h.prototype.lines = function(a, e) {
      function f() {
        return d(c("group", {coordsize:l + " " + l, coordorigin:-m + " " + -m}), {width:l, height:l});
      }
      function h(a, l, n) {
        b(q, b(d(f(), {rotation:360 / e.lines * a + "deg", left:~~l}), b(d(c("roundrect", {arcsize:e.corners}), {width:m, height:e.scale * e.width, left:e.scale * e.radius, top:-e.scale * e.width >> 1, filter:n}), c("fill", {color:g(e.color, a), opacity:e.opacity}), c("stroke", {opacity:0}))));
      }
      var m = e.scale * (e.length + e.width), l = 2 * e.scale * m, n = -(e.width + e.length) * e.scale * 2 + "px", q = d(f(), {position:"absolute", top:n, left:n});
      if (e.shadow) {
        for (n = 1;n <= e.lines;n++) {
          h(n, -2, "progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)");
        }
      }
      for (n = 1;n <= e.lines;n++) {
        h(n);
      }
      return b(a, q);
    };
    h.prototype.opacity = function(a, b, c, g) {
      a = a.firstChild;
      g = g.shadow && g.lines || 0;
      a && b + g < a.childNodes.length && (a = (a = (a = a.childNodes[b + g]) && a.firstChild) && a.firstChild) && (a.opacity = c);
    };
  }
  var m = ["webkit", "Moz", "ms", "O"], q = {}, p, n, x = {lines:12, length:7, width:5, radius:10, scale:1, corners:1, color:"#000", opacity:.25, rotate:0, direction:1, speed:1, trail:100, fps:20, zIndex:2E9, className:"spinner", top:"50%", left:"50%", shadow:!1, hwaccel:!1, position:"absolute"};
  h.defaults = {};
  c(h.prototype, {spin:function(b) {
    this.stop();
    var c = this, g = c.opts, e = c.el = a(null, {className:g.className});
    d(e, {position:g.position, width:0, zIndex:g.zIndex, left:g.left, top:g.top});
    b && b.insertBefore(e, b.firstChild || null);
    e.setAttribute("role", "progressbar");
    c.lines(e, c.opts);
    if (!p) {
      var f = 0, h = (g.lines - 1) * (1 - g.direction) / 2, m, l = g.fps, n = l / g.speed, q = (1 - g.opacity) / (n * g.trail / 100), x = n / g.lines;
      (function B() {
        f++;
        for (var a = 0;a < g.lines;a++) {
          m = Math.max(1 - (f + (g.lines - a) * x) % n * q, g.opacity), c.opacity(e, a * g.direction + h, m, g);
        }
        c.timeout = c.el && setTimeout(B, ~~(1E3 / l));
      })();
    }
    return c;
  }, stop:function() {
    var a = this.el;
    a && (clearTimeout(this.timeout), a.parentNode && a.parentNode.removeChild(a), this.el = void 0);
    return this;
  }, lines:function(c, e) {
    function h(b, c) {
      return d(a(), {position:"absolute", width:e.scale * (e.length + e.width) + "px", height:e.scale * e.width + "px", background:b, boxShadow:c, transformOrigin:"left", transform:"rotate(" + ~~(360 / e.lines * m + e.rotate) + "deg) translate(" + e.scale * e.radius + "px,0)", borderRadius:(e.corners * e.scale * e.width >> 1) + "px"});
    }
    for (var m = 0, l = (e.lines - 1) * (1 - e.direction) / 2, n;m < e.lines;m++) {
      n = d(a(), {position:"absolute", top:1 + ~(e.scale * e.width / 2) + "px", transform:e.hwaccel ? "translate3d(0,0,0)" : "", opacity:e.opacity, animation:p && f(e.opacity, e.trail, l + m * e.direction, e.lines) + " " + 1 / e.speed + "s linear infinite"}), e.shadow && b(n, d(h("#000", "0 0 4px #000"), {top:"2px"})), b(c, b(n, h(g(e.color, m), "0 0 1px rgba(0,0,0,.1)")));
    }
    return c;
  }, opacity:function(a, b, c) {
    b < a.childNodes.length && (a.childNodes[b].style.opacity = c);
  }});
  if ("undefined" !== typeof document) {
    n = function() {
      var c = a("style", {type:"text/css"});
      b(document.getElementsByTagName("head")[0], c);
      return c.sheet || c.styleSheet;
    }();
    var u = d(a("group"), {behavior:"url(#default#VML)"});
    !e(u, "transform") && u.adj ? l() : p = e(u, "animation");
  }
  return h;
});
var CTATGlobals = {tutorRunning:!1, Visual:{}, Font:{}, Tab:{Tracker:1, Focus:null, previousFocus:null}, NameSpace:{svg:"http://www.w3.org/2000/svg", xml:"http://www.w3.org/2000/xmlns/", xlink:"http://www.w3.org/1999/xlink", ev:"http://www.w3.org/2001/xml-events", mathml:"http://www.w3.org/1998/Math/MathML"}, EncodedParams:{authenticity_token:"authenticity_token", info:"info", question_file:"question_file", skills:"skills"}}, useDebugging;
void 0 === useDebugging && (useDebugging = !1);
var useDebuggingBasic;
void 0 === useDebuggingBasic && (useDebuggingBasic = !1);
var debugPointer = null, globalCommDisabled = !1, customconsole = null, lastMessage = !1;
if ("undefined" == typeof noScrim) {
  var noScrim = !1
}
var version = "4.0.0-alpha.1", contextGUID = "", orientation = "portrait", ctatcontainer = "container", ctatcanvas = null, lineCounter = 0, currentComponentPointer = null, movieclips = [], startStateHandlers = [], inStartState = !1, inProcessStartStateActions = !1, globalDebugger = null, ignoreInterfaceDescriptions = !0, correctColor = "#00cc00", incorrectColor = "#ff0000", highlightColor = "#ffff00", hintColor = "#ffff00", canvasCalibrate = 5, scriptElement = "", flashVars = null, commShell = null, 
mobileAPI = null, skillSet = null, aVars = null;
CTATGlobals.interfaceElement = null;
var commLibrary = CTATGlobals.selectedTextInput = null, commLMSService = null, commMessageBuilder = null, commMessageHandler = null, commLogMessageBuilder = null, commLoggingLibrary = null, logHintSAI = null, nameTranslator = null, hints = [], hintIndex = 0, caseInsensitive = !0, unordered = !0, lockWidget = !0, highlightRightSelection = !0;
CTATGlobals.suppressStudentFeedback = !1;
CTATGlobals.confirmDone = !1;
var globalGlowStringContent = "0px 0px 15px 5px rgba(255, 255, 0, 1.0)", globalGlowString = "-webkit-box-shadow: " + globalGlowStringContent + "; -moz-box-shadow: " + globalGlowStringContent + "; box-shadow: " + globalGlowStringContent + "; ", globalCorrectString = "-webkit-box-shadow: 0px 0px 15px 5px rgba(0, 255, 0, 1.0); -moz-box-shadow: 0px 0px 15px 5px rgba(0, 255, 0, 1.0); box-shadow: 0px 0px 15px 5px rgba(0, 255, 0, 1.0); ", globalInCorrectString = "-webkit-box-shadow: 0px 0px 15px 5px rgba(255, 0, 0, 1.0); -moz-box-shadow: 0px 0px 15px 5px rgba(255, 0, 0, 1.0); box-shadow: 0px 0px 15px 5px rgba(255, 0, 0, 1.0); ";
CTATGlobals.Visual = {hint_color:hintColor, highlight_color:highlightColor, correct_color:correctColor, incorrect_color:incorrectColor, hint_glow:"0px 0px 15px 5px " + hintColor, highlight_glow:"0px 0px 15px 5px " + highlightColor, HintGlowString:globalGlowString, BackgroundColor:"#ffffff", BorderColor:"#cccccc", correct_glow:"0px 0px 15px 5px " + correctColor, incorrect_glow:"0px 0px 15px 5px " + incorrectColor};
var globalBackgroundColor = "#ffffff", globalBorderColor = "#cccccc", globalFontColor = "#000000", globalFontFamily = "Verdana", globalFontSize = 9;
CTATGlobals.Font = {color:globalFontColor, family:globalFontFamily, size:globalFontSize};
CTATGlobals.Align = "left";
var globalBorderString = "1px solid", dialogDiv = null, incompatibleBrowserMessage = "Your browser does not support CTAT. Please update or replace your browser.", detailedFeedback = !0;
function enableDetailedFeedback(a) {
  detailedFeedback = a;
}
;var CTATConfig = {Options:{}, addProperty:function(a, b, f, e) {
  f = f || b[0];
  Object.defineProperty(CTATConfig, a, {enumerable:!0, configurable:!1, writable:!e, value:f.toLowerCase()});
  var d = {};
  b.forEach(function(b) {
    d[b] = b.toLowerCase();
    Object.defineProperty(CTATConfig, a + "_is_" + b, {enumerable:!1, writable:!1, value:function() {
      return CTATConfig[this.prop].toLowerCase() == this.val;
    }.bind({prop:a, val:d[b]})});
  });
  CTATConfig.Options[a] = d;
}};
CTATConfig.addProperty("platform", ["CTAT", "Google", "Undefined"], "CTAT", !0);
CTATConfig.addProperty("external", ["Google", "LTI", "SCORM", "None"], "None");
CTATConfig.addProperty("parserType", ["XML", "JSON"], "XML");
"undefined" !== typeof module && (module.exports = CTATConfig);
var CTATSandboxDriver = {};
function getSafeElementById(a) {
  return document.getElementById(a);
}
;var CTATGlobalFunctions = {};
window.CTATGlobalFunctions = CTATGlobalFunctions;
function unhighlightall(a) {
  console.log("unhighlightall ()");
  if (CTATShellTools.component_descriptions) {
    a = CTATShellTools.getAllComponents();
    console.log("Calling unhighlight on " + a.length + " components ...");
    for (var b = 0;b < a.length;b++) {
      var f = a[b];
      console.log("Calling ...");
      f.unhighlight();
    }
  } else {
    console.log("No component descriptions available, bump");
  }
}
CTATGlobalFunctions.stringToBoolean = function(a) {
  switch(String(a).toLowerCase()) {
    case "true":
    ;
    case "yes":
    ;
    case "1":
      return !0;
    case "false":
    ;
    case "no":
    ;
    case "0":
    ;
    case "":
    ;
    case null:
      return !1;
    default:
      return !!a;
  }
};
CTATGlobalFunctions.generateDefaultConfiguration = function() {
  var a = CTATGlobalFunctions.decodeTutorShopParams(FlashVars);
  if (a) {
    return ctatdebug("generateDefaultConfiguration() dataParams[authenticity_token] " + a.authenticity_token), a;
  }
};
window.CTATGlobalFunctions.generateDefaultConfiguration = CTATGlobalFunctions.generateDefaultConfiguration;
CTATGlobalFunctions.isInstructorMode = function() {
  var a = flashVars ? flashVars.getRawFlashVars() : null;
  return a && a.deliverymode ? "delivery" == a.deliverymode ? !1 : !0 : !1;
};
CTATGlobalFunctions.getLoggingLibrary = function(a) {
  null == commLoggingLibrary && (commLoggingLibrary = new CTATLoggingLibrary(!0));
  return commLoggingLibrary;
};
CTATGlobalFunctions.setPreviewMode = function(a, b) {
  CTATGlobalFunctions.isCTATObject(a) ? a.setPreviewMode(b) : a.previewMode = b;
};
CTATGlobalFunctions.setCenterTutor = function(a, b) {
  CTATGlobalFunctions.isCTATObject(a) ? a.setCenterTutor(b) : a.centerTutor = b;
};
CTATGlobalFunctions.setTutorWidth = function(a, b) {
  CTATGlobalFunctions.isCTATObject(a) ? a.setTutorWidth(b) : a.width = b;
};
CTATGlobalFunctions.setTutorHeight = function(a, b) {
  CTATGlobalFunctions.isCTATObject(a) ? a.setTutorHeight(b) : a.height = b;
};
CTATGlobalFunctions.setTutorDimensions = function(a, b, f) {
  CTATGlobalFunctions.isCTATObject(a) ? a.setTutorDimensions(b, f) : (a.width = b, a.height = f);
};
CTATGlobalFunctions.setTutorValue = function(a, b, f) {
  CTATGlobalFunctions.isCTATObject(a) ? a.setTutorValue(b, f) : a[b] = f;
};
CTATGlobalFunctions.setCommunicationMode = function(a, b) {
  CTATGlobalFunctions.isCTATObject(a) ? a.setCommunicationMode(b) : a.tutoring_service_communication = b;
};
CTATGlobalFunctions.setRemoteSocketURL = function(a, b) {
  CTATGlobalFunctions.isCTATObject(a) ? a.setRemoteSocketURL(b) : a.remoteSocketURL = b;
};
CTATGlobalFunctions.setRemoteSocketPort = function(a, b) {
  CTATGlobalFunctions.isCTATObject(a) ? a.setRemoteSocketPort(b) : a.remoteSocketPort = b;
};
CTATGlobalFunctions.setProblemSummary = function(a) {
};
CTATGlobalFunctions.isCTATObject = function(a) {
  if ("object" == typeof testConfig) {
    if (testConfig.getClassName) {
      return console.log("Config object is of type: " + testConfig.getClassName()), !0;
    }
    console.log("Config object is not a CTAT object");
  }
  return !1;
};
CTATGlobalFunctions.getCTATClassname = function(a) {
  if ("object" == typeof testConfig) {
    if (testConfig.getClassName) {
      return console.log("Config object is of type: " + testConfig.getClassName()), testConfig.getClassName();
    }
    console.log("Config object is not a CTAT object");
  }
  return "object";
};
CTATGlobalFunctions.toBoolean = function(a) {
  return "boolean" === typeof a ? a : "string" === typeof a ? CTATGlobalFunctions.stringToBoolean(a) : "number" === typeof a ? 0 < a : a ? !0 : !1;
};
function noenter(a) {
  if (CTATConfig.platform_is_Google()) {
    return 0;
  }
  a = a || window.event;
  return 13 !== (a.keyCode || a.charCode);
}
CTATGlobalFunctions.isBlank = function(a) {
  return !a || /^\s*$/.test(a);
};
function componentToHex(a) {
  a = a.toString(16);
  return 1 == a.length ? "0" + a : a;
}
function rgbToHex(a, b, f) {
  return "#" + componentToHex(a) + componentToHex(b) + componentToHex(f);
}
function hexToRgb(a) {
  return (a = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(a)) ? {r:parseInt(a[1], 16), g:parseInt(a[2], 16), b:parseInt(a[3], 16)} : null;
}
function parseQueryStringArgs(a) {
  ctatdebug("parseQueryStringArgs ()");
  ctatdebug("Query String: " + a);
  var b = "?" == a.charAt(0) ? a.substring(1) : a;
  a = {};
  if (b) {
    for (var b = b.split("&"), f = 0;f < b.length;f++) {
      var e = b[f].split("=");
      a[decodeURIComponent(e[0])] = decodeURIComponent(e[1].replace(/\+/g, " "));
    }
  }
  return a;
}
function setOrientation(a) {
  ctatdebug("setOrientation (" + a + ")");
  switch(a) {
    case -90:
    ;
    case 90:
      orientation = "landscape";
      mobileAPI && mobileAPI.processOrientationChange(orientation);
      break;
    default:
      orientation = "portrait", mobileAPI && mobileAPI.processOrientationChange(orientation);
  }
}
Object.hasOwnProperty("create") || (Object.create = function() {
  function a() {
  }
  return function(b) {
    if (1 != arguments.length) {
      throw Error("Object.create implementation only accepts one parameter.");
    }
    a.prototype = b;
    return new a;
  };
}());
function thisMovie(a) {
  return -1 != navigator.appName.indexOf("Microsoft") ? window[a] : document[a];
}
function introspect(a, b, f, e) {
  console.log("introspect (" + a + ")");
  f = f || "";
  "number" !== this.typeOf(e) && (e = 1);
  var d = this.typeOf(b);
  a = [f, a, " ", d, " :"].join("");
  if ("object" === d) {
    if (0 < e) {
      f = [f, "  "].join("");
      for (var c in b) {
        d = this.introspect(c, b[c], f, e - 1), a = [a, "\n", d].join("");
      }
      return a;
    }
    return [a, " ..."].join("");
  }
  return "null" === d ? [a, " null"].join("") : [a, " ", b].join("");
}
function findPointOfAttachment(a) {
  ctatdebug("findPointOfAttachment (" + a + ")");
  for (var b = 0;b < movieclips.length;b++) {
    var f = movieclips[b];
    ctatdebug("Examining: " + f.getName() + "...");
    if (!0 === f.isRegistered(a)) {
      return f;
    }
  }
  return null;
}
function findMovieClip(a) {
  a = a.trim();
  ctatdebug("findMovieClip (" + a.trim() + ")");
  for (var b = 0;b < movieclips.length;b++) {
    var f = movieclips[b];
    ctatdebug("Examining: " + f.getName() + "...");
    if (f.getName() == a) {
      return f;
    }
  }
  return null;
}
function colName(a, b) {
  ctatdebug("colName (" + a + ")");
  for (var f = "";0 <= a;) {
    f = String.fromCharCode(a % 26 + 97) + f, a = Math.floor(a / 26) - 1;
  }
  !0 === b && f.toUpperCase();
  return f;
}
function selectText(a) {
}
function urldecode(a) {
  return decodeURIComponent(("" + a).replace(/\+/g, "%20"));
}
function detectIE() {
  var a = window.navigator.userAgent, b = a.indexOf("MSIE "), f = a.indexOf("Trident/");
  return 0 < b ? parseInt(a.substring(b + 5, a.indexOf(".", b)), 10) : 0 < f ? (b = a.indexOf("rv:"), parseInt(a.substring(b + 3, a.indexOf(".", b)), 10)) : !1;
}
function listProperties(a) {
  ctatdebug("listProperties (l: " + a.length + ")");
  for (var b in a) {
    ctatdebug("[" + b + "]");
  }
}
function listPropertiesKV(a, b) {
  ctatdebug("listPropertiesKV (size: " + a.length + ")");
  if (1 == b) {
    for (var f = 0;f < a.length;f++) {
      ctatdebug("[" + f + "]: " + a[f]);
    }
  } else {
    for (f in a) {
      ctatdebug("[" + f + "]: " + a[f]);
    }
  }
}
function listAllDivAttributes(a) {
  ctatdebug("listAllDivAttributes ()");
  var b = 0;
  a = a.attributes;
  for (var f = a.length;b < f;b++) {
    pointer.ctatdebug("Attribute: " + a[b].nodeName + ", with value: " + a[b].nodeValue);
  }
}
var getBackgroundDimensions = function(a) {
  ctatdebug("Using url: " + $(a).css("background-image"));
  var b = new Image;
  b.src = $(a).css("background-image").replace(/url\(|\)$|"/ig, "");
  return b.width + " " + b.height;
}, getBackgroundWidth = function(a) {
  ctatdebug("Using url: " + $(a).css("background-image"));
  var b = new Image;
  b.src = $(a).css("background-image").replace(/url\(|\)$|"/ig, "");
  return b.width;
}, getBackgroundHeight = function(a) {
  ctatdebug("Using url: " + $(a).css("background-image"));
  var b = new Image;
  b.src = $(a).css("background-image").replace(/url\(|\)$|"/ig, "");
  return b.height;
};
function getIndicesOf(a, b, f) {
  var e = 0, d = a.length, c = [];
  f || (b = b.toLowerCase(), a = a.toLowerCase());
  for (;-1 < (f = b.indexOf(a, e));) {
    c.push(f), e = f + d;
  }
  return c;
}
CTATGlobalFunctions.formatColor = function(a) {
  if (/^#[0-9a-f]{6}$/i.test(a)) {
    return a;
  }
  var b = a.match(/rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/i);
  if (null !== b) {
    return rgbToHex(Number(b[1]), Number(b[2]), Number(b[3]));
  }
  b = a.match(/^#?([0-9a-f]{0,6})$/i);
  if (null !== b) {
    for (a = b[1];6 > a.length;) {
      a = "0" + a;
    }
    return "#" + a;
  }
  return a;
};
CTATGlobalFunctions.Gensym = function() {
  this.make_gensym = function() {
    var a = "", b = 0;
    return {set_prefix:function(b) {
      a = String(b);
    }, set_index:function(a) {
      b = a;
    }, gensym:function() {
      var d = a + b;
      b += 1;
      return d;
    }};
  };
  var a = this.make_gensym();
  a.set_index(2);
  var b = this.make_gensym();
  b.set_index(1);
  b.set_prefix("ctatdiv");
  return {z_index:a.gensym, div_id:b.gensym};
};
CTATGlobalFunctions.gensym = CTATGlobalFunctions.Gensym();
var CTATBase = function(a, b) {
  function f(a, b, c) {
    null === a && (a = "unknownclass");
    null === b && (b = "nullinstance");
    return "[" + a + ":" + b + "] " + c;
  }
  var e = a, d = b, c = this, g = !0;
  "undefined" != CTATBase.DebuggingFilter[e] && CTATBase.DebuggingFilter[e] && (g = !1);
  this.getClassName = function() {
    return e;
  };
  this.getClassname = function() {
    return e;
  };
  this.setClassName = function(a) {
    e = a;
  };
  this.setName = function(a) {
    d = a;
  };
  this.getName = function() {
    return d;
  };
  this.getUseDebugging = function() {
    return useDebugging;
  };
  this.setUseDebugging = function(a) {
    useDebugging = a;
  };
  this.ctatdebug = function(a) {
    if (g) {
      var b = a;
      useDebuggingBasic ? c.ctatdebugInternal(b, "UnknownClass") : (null === a && (b = "No message provided"), useDebugging && c.ctatdebugInternal(b, c.getClassName()));
    }
  };
  this.ctatdebugObject = function(a) {
    var b = 0, c;
    for (c in a) {
      this.ctatdebug("(" + b + ")" + c + ": " + a[c]), b++;
    }
  };
  this.ctatdebugInternal = function(a, b) {
    var g = a;
    if (null === g || void 0 === g) {
      g = "No message!";
    }
    "" === g && (g = "Empty message!");
    if (useDebuggingBasic) {
      g = f("Unknown", "undefined", g), null === customconsole && (customconsole = getSafeElementById("customconsole")), null !== customconsole ? (customconsole.innerHTML += g + "<br>", customconsole.scrollTop = customconsole.scrollHeight) : console.log(g);
    } else {
      null === b && (b = "UndefinedClass");
      null === g && (g = "No message");
      g = f(b, c.getName(), g);
      try {
        console.trace(g);
      } catch (e) {
      }
      "google" == CTATConfig.platform ? Logger.log(g) : (null === customconsole && (customconsole = getSafeElementById("customconsole")), null !== customconsole && (customconsole.innerHTML += g + "<br>", customconsole.scrollTop = customconsole.scrollHeight));
    }
  };
  this.ctatdebugObjectShallow = function(a) {
    var b = "", g;
    for (g in a) {
      b += g + ", ";
    }
    c.ctatdebugInternal("Object: " + b, "Global");
  };
  this.urldecode = function(a) {
    return decodeURIComponent((a + "").replace(/\+/g, "%20"));
  };
  this.entitiesConvert = function(a) {
    this.ctatdebug("entitiesConvert ()");
    return this.urldecode(unescape(a));
  };
  this.entitiesGenerate = function(a) {
    return a;
  };
};
function formatLogMessageGoogle(a, b, f) {
  f = (new CTATBase(a, b)).htmlEncode(f);
  return "[" + a + ":" + b + "] " + f;
}
function ctatdebug(a) {
  (useDebugging || useDebuggingBasic) && null !== a && ("google" == CTATConfig.platform ? Logger.log(formatLogMessageGoogle("CTATTutor", "tutor", a)) : (null === debugPointer && (debugPointer = new CTATBase("CTATTutor", "tutor")), debugPointer.ctatdebug(a, "CTATTutor")));
}
Object.defineProperty(CTATBase, "DebuggingFilter", {enumerable:!1, configurable:!1, writable:!0, value:[]});
"undefined" !== typeof module && (module.exports = CTATBase);
var CTATComponentReference = function(a, b) {
  var f = a, e = b;
  this.setElement = function(a) {
    f = a;
  };
  this.getElement = function() {
    return f;
  };
  this.setDiv = function(a) {
    e = a;
  };
  this.getDiv = function() {
    return e;
  };
};
CTATComponentReference.components = {};
CTATComponentReference.list = function() {
  for (var a in CTATComponentReference.components) {
    var b = CTATComponentReference.components[a];
    ctatdebug("Component: " + b.getElement().getName() + ", with div: " + b.getDiv().id);
  }
};
CTATComponentReference.getComponentFromID = function(a) {
  var b = CTATComponentReference.components;
  return b.hasOwnProperty(a) ? (a = b[a], a.getElement() ? a.getElement() : null) : null;
};
CTATComponentReference.add = function(a, b) {
  var f = new CTATComponentReference(a, b);
  return CTATComponentReference.components[f.getDiv().getAttribute("id")] = f;
};
var CTATCompBase = function(a, b, f, e, d, c) {
  CTATBase.call(this, a, b);
  var g = f || 0, h = e || 0, l = d || -2, m = c || -2, q = 50, p = 25, n = !1, x = !1, u = "", w = !1, z = !0, t = null, D = "", C = null;
  this.isTabIndexable = !0;
  var H = 0, E = null, A = null, y = this, r = null, G = "hidden", F = CTATGlobalFunctions.gensym.z_index(), B = CTATGlobalFunctions.gensym.div_id(), I = CTATGlobalFunctions.gensym.z_index(), K = CTATGlobalFunctions.gensym.div_id();
  this.setIsAbstractComponent = function(a) {
    n = a;
  };
  this.isAbstractComponent = function() {
    return n;
  };
  this.setIsFeedbackComponent = function(a) {
    x = a;
  };
  this.isFeedbackComponent = function() {
    return x;
  };
  this.setTabIndex = function(a) {
    !0 === this.isTabIndexable ? (C = a, 0 > C ? (C = CTATGlobals.Tab.Tracker, CTATGlobals.Tab.Tracker++) : CTATGlobals.Tab.Tracker = C) : C = -1;
  };
  this.getTabIndex = function() {
    return C;
  };
  this.setZIndex = function(a) {
    y.ctatdebug("Setting z index to: " + a);
    H = a;
    null !== t && (t.style.zIndex = a);
  };
  this.getZIndex = function() {
    return H;
  };
  this.setDefaultWidth = function(a) {
    q = a;
  };
  this.getDefaultWidth = function() {
    return q;
  };
  this.setDefaultHeight = function(a) {
    p = a;
  };
  this.getDefaultHeight = function() {
    return p;
  };
  this.processCommShellEvent = function(a, b) {
    y.ctatdebug("processCommShellEvent (" + a + ")");
  };
  this.makeDivWrapper = function(a) {
    t = document.createElement("div");
    t.id = this.getName();
    t.setAttribute("onkeypress", "return noenter(event)");
    t.setAttribute("data-ctat-component", this.getClassName());
    t.style.position = "absolute";
    t.style.left = g + "px";
    t.style.top = h + "px";
    t.style.zIndex = F;
    t.style.width = y.getWidth() + "px";
    t.style.height = y.getHeight() + "px";
    $(t).data("CTATComponent", this);
    a.appendChild(t);
  };
  this.setDivWrapper = function(a) {
    t = a;
    t.setAttribute("data-ctat-component", this.getClassName());
  };
  var J = this.setClassName;
  this.setClassName = function(a) {
    J(a);
    t && t.setAttribute("data-ctat-component", this.getClassName());
  };
  this.wrapComponent = function(a) {
    y.ctatdebug("wrapComponent ()");
    y.makeDivWrapper(a);
    y.ctatdebug("wrapComponent () done");
  };
  this.createCanvas = function() {
    y.ctatdebug("createCanvas ()");
    r = document.createElement("canvas");
    r.setAttribute("id", K);
    r.setAttribute("onkeypress", "return noenter(event)");
    r.setAttribute("width", l + canvasCalibrate + "px");
    r.setAttribute("height", m + canvasCalibrate + "px");
    r.setAttribute("style", "border: 1px " + this.borderColor + " solid; " + ("hidden" == G ? "visibility: hidden; " : "") + "z-index:" + I + ";");
    t.firstChild ? t.insertBefore(r, t.firstChild) : t.appendChild(r);
    return r;
  };
  this.redraw = function() {
    var a = t.style.display;
    t.style.display = "none";
    t.style.display = a;
  };
  this.setCanvasVisibility = function(a) {
    G = a;
  };
  this.getSubCanvasCtx = function() {
    if (r) {
      return r.getContext("2d");
    }
  };
  this.getSubCanvas = function() {
    return r;
  };
  this.getX = function() {
    return g;
  };
  this.getY = function() {
    return h;
  };
  this.getWidth = function() {
    if (0 >= l) {
      var a;
      E ? a = window.getComputedStyle(E) : t && (a = window.getComputedStyle(t));
      if (a) {
        return parseFloat(a.width);
      }
    }
    return l;
  };
  this.getHeight = function() {
    if (0 >= m && t) {
      var a = window.getComputedStyle(t);
      return parseFloat(a.getPropertyValue("height"));
    }
    return m;
  };
  this.getText = function() {
    return u;
  };
  this.getEnabled = function() {
    return z;
  };
  this.assignEnabled = function(a) {
    z = a;
  };
  this.setEnabled = function(a) {
    y.ctatdebug("setEnabled (" + a + ")");
    y.assignEnabled(a);
    E ? E.disabled = !z : y.ctatdebug("Error: component pointer is null");
  };
  this.lock = this.setEnabled.bind(y, !1);
  this.unlock = this.setEnabled.bind(y, !0);
  this.getDivWrap = function() {
    return t;
  };
  this.getComponent = function() {
    return E;
  };
  this.component = null;
  Object.defineProperty(this, "component", {get:function() {
    return E;
  }});
  this.getLabel = function() {
    return A;
  };
  this.getCanvasZIndex = function() {
    return I;
  };
  this.getComponentGroup = function() {
    return D;
  };
  this.setComponent = function(a) {
    E = a;
    E.classList.add("CTAT-gen-component");
    this.setEnabled(this.getEnabled());
  };
  this.getTopDivZIndex = function() {
    return F;
  };
  this.getTopDivID = function() {
    return B;
  };
  this.setComponentGroup = function(a) {
    D = a;
    E && (E.name = a);
  };
  this.setLabel = function(a) {
    A = a;
  };
  this.assignText = function(a) {
    u = a;
  };
  this.init = function() {
    y.ctatdebug("THIS IS THE BASE INIT METHOD");
  };
  this.initialize = function() {
    y.ctatdebug("initialize ()");
    y.configFromDescription();
    y.init();
    y.processSerialization();
    y.render();
    y.processTabOrder();
    y.ctatdebug("initialize () done");
  };
  this.getInitialized = function() {
    return w;
  };
  this.setInitialized = function(a) {
    y.ctatdebug("setInitialized (" + a + ")");
    w = a;
    !0 !== w || t ? y.ctatdebug("Not wrapping, initialized=" + w + ", divWrapper = " + t) : (y.ctatdebug("Wrapping a component and appending it to the top container div if one was never set ..."), (a = findPointOfAttachment(this.getName())) ? (y.ctatdebug("Attaching component to existing MovieClip ..."), y.wrapComponent(a.getDivWrapper())) : (y.ctatdebug("Attaching component to main div ..."), 0 < $("#" + ctatcontainer).length && y.wrapComponent(getSafeElementById(ctatcontainer))));
    y.getDivWrap().classList.add("CTATComponent");
    y.ctatdebug("setInitialized () done");
  };
  this.addSafeEventListener = function(a, b, g) {
    y.ctatdebug("addSafeEventListener (" + a + ")");
    y.ctatdebug("Adding event listener to: " + g);
    g ? g.addEventListener(a, b) : (E ? (y.ctatdebug("Adding eventlistener to component instead of target"), E.addEventListener(a, b)) : y.ctatdebug("Error: pointer to component is null, can't add event listener"), y.ctatdebug("addSafeEventListener () done"));
  };
  this.drawComponent = function() {
  };
  this.addComponentReference = function(a, b) {
    y.ctatdebug("addComponentReference (" + a.getName() + " -> " + b.getAttribute("id") + ")");
    CTATComponentReference.add(a, b);
    y.ctatdebug("addComponentReference ()");
  };
  this.getComponentFromID = function(a) {
    return CTATComponentReference.getComponentFromID(a);
  };
  this.processSerialization = function() {
    y.ctatdebug("processSerialization()");
    y.ctatdebug("implement in child class");
  };
  this.move = function(a, b) {
    g = a;
    h = b;
    t && (t.style.left = g + "px", t.style.top = h + "px");
  };
  this.setSize = function(a, b) {
    y.ctatdebug("setSize (" + a + "," + b + ")");
    this.setWidth(a);
    this.setHeight(b);
  };
  this.SetVisible = this.setVisible = function(a) {
    a = CTATGlobalFunctions.toBoolean(a);
    G = !0 === a ? "block" : "hidden";
    r && r.setAttribute("style", "border: 0px; position: absolute; " + (a ? "" : "visibility:hidden; ") + "; left:" + g + "px; top:" + h + "px; z-index:" + I + ";");
    t.style.visibility = !0 === a ? null : "hidden";
  };
  this.FadeIn = function(a) {
    y.SetVisible(!0);
  };
  this.FadeOut = function(a) {
    y.SetVisible(!1);
  };
  this.reset = function() {
  };
  this.setX = function(a) {
    this.x = a;
    t.style.left = this.x + "px";
    !0 === w && this.render();
  };
  this.setY = function(a) {
    this.y = a;
    t.style.top = this.y + "px";
    !0 === w && this.render();
  };
  this.setWidth = function(a) {
    l = a;
    t && (t.style.width = this.width);
    this.render();
  };
  this.setHeight = function(a) {
    m = a;
    t && (t.style.width = this.width);
    this.render();
  };
  this.setText = function(a) {
    u = a;
    return this;
  };
  this.getValue = function() {
    return E ? E.value : "";
  };
  this.backgrade = !1;
  this.processOnFocus = function() {
    y.ctatdebug("processOnFocus (" + y.getName() + ")");
    $(".CTAT--hint").each(function() {
      for (var a = $(this), b = null;a && null === b;) {
        a.data("CTATComponent") ? b = a.data("CTATComponent") : a = a.parent();
      }
      b && b.setHintHighlight && b.setHintHighlight(!1, null);
    });
    CTATGlobals.Tab.previousFocus = CTATGlobals.Tab.Focus;
    CTATGlobals.Tab.Focus != y ? (y.ctatdebug("CTATGlobals.Tab.Focus!=pointer, updating CTATGlobals.Tab.Focus ..."), CTATGlobals.Tab.Focus = y) : y.ctatdebug("CTATGlobals.Tab.Focus==pointer");
    y.ctatdebug("processOnFocus () done");
  };
  this.processFocus = function(a) {
    y.ctatdebug("processFocus ()");
    a.currentTarget.getAttribute("id");
    if (y) {
      mobileAPI && !0 === mobileAPI.getEnabled() && y.hideKeyboard();
      commShell && commShell.processComponentFocus(y);
      if (CTATGlobals.Tab.Focus) {
        y.ctatdebug("old focus: " + CTATGlobals.Tab.Focus.getName() + ", new focus:" + y.getName());
        if (CTATGlobals.Tab.Focus == y) {
          y.ctatdebug("We're already there!");
          return;
        }
        CTATGlobals.Tab.Focus.backgrade && CTATGlobals.Tab.Focus.processAction();
      } else {
        y.ctatdebug("No previously focused component yet, can't grade");
      }
      "hint" == y.getClassName() || "CTATHintButton" == y.getClassName() ? y.ctatdebug("Info: focus moved to hint, bump") : (CTATGlobals.Tab.previousFocus = CTATGlobals.Tab.Focus, CTATGlobals.Tab.Focus = y, y.ctatdebug("processFocus () done"));
    } else {
      y.ctatdebug("Error: component reference is null");
    }
  };
  this.processTabOrder = function() {
    y.ctatdebug("processTabOrder (" + C + ")");
    !0 === n ? y.ctatdebug("Component is an abstract component, bump") : E ? (y.ctatdebug("We have a component, actually assigning to html component ..."), null !== C && (E.tabIndex = C), E.onfocus = y.processOnFocus) : y.ctatdebug("Error: we don't have an html component yet, can't assign tab index");
  };
  this.hideKeyboard = function() {
    document.activeElement.blur();
    $("input").blur();
  };
};
CTATCompBase.prototype = Object.create(CTATBase.prototype);
CTATCompBase.prototype.constructor = CTATCompBase;
var CTATCSS = function() {
  var a = 0, b = [], f = 0, e = [], d = 0, c = [];
  this.resetSelectors = function() {
    f = 0;
    e = [];
    e[f] = [];
  };
  this.resetCSSStringArray = function() {
    c = [];
    d = 0;
  };
  this.clearCSS = function() {
    this.resetSelectors();
    this.resetCSSStringArray();
    b = [];
    a = 0;
  };
  this.addStringCSS = function(a) {
    c[d] = a;
    d++;
  };
  this.addCSSAttribute = function(g, c) {
    b[a] = g;
    b[a + 1] = c;
    a += 2;
  };
  this.removeStringCSS = function(a) {
    a = c.indexOf(a);
    0 <= a && c.splice(a, 1);
  };
  this.removeCSSAttribute = function(a) {
    a = b.indexOf(a);
    0 <= a && b.splice(a, 2);
  };
  this.modifyCSSAttribute = function(a, c) {
    var e = b.indexOf(a);
    -1 == e ? this.addCSSAttribute(a, c) : b[e + 1] = c;
  };
  this.addSelector = function(a) {
    e[f] = [];
    e[f][0] = a;
    f++;
  };
  this.addSelectorAttribute = function(a, b, c) {
    var d = 1;
    a: {
      if (0 === f) {
        a = 0;
      } else {
        for (var q = 0;q < e.length && null !== e[q][0];q++) {
          if (e[q][0] == a) {
            a = q;
            break a;
          }
        }
        a = -1;
      }
    }
    for (;void 0 !== e[a][d];) {
      d++;
    }
    e[a][d] = b;
    e[a][d + 1] = c;
  };
  this.toCSSString = function() {
    for (var a = "", f = 0;f < e.length;f++) {
      for (var a = a + (e[f][0] + " { "), d = 1;d < e[f].length;d++) {
        a += e[f][d], a = 0 === d % 2 ? a + "; " : a + ": ";
      }
      a += " }; ";
    }
    for (f = 0;f < b.length;f++) {
      a += b[f], a = 0 === f % 2 ? a + ": " : a + "; ";
    }
    for (f = 0;f < c.length;f++) {
      a += c[f] + " ";
    }
    return a;
  };
};
var CTAT = {Component:{}};
CTAT.Component.Base = {};
CTAT.Component.Base.Style = function(a, b, f, e, d, c) {
  CTATCompBase.call(this, a, b, f, e, d, c);
  var g = new CTATCSS;
  this.addCSSAttribute = function(a, b) {
    g.addCSSAttribute(a, b);
    this.render();
  };
  this.removeCSSAttribute = function(a) {
    g.removeCSSAttribute(a);
    this.render();
  };
  this.addStringCSS = function(a) {
    g.addStringCSS(a);
    this.render();
  };
  this.removeStringCSS = function(a) {
    g.removeStringCSS(a);
    this.render();
  };
  this.modifyCSSAttribute = function(a, b) {
    g.modifyCSSAttribute(a, b);
    this.render();
  };
  this.getCSS = function() {
    return g.toCSSString();
  };
  this.render = function() {
    !0 === this.isAbstractComponent() ? this.ctatdebug("Component is an abstract component, bump") : this.getInitialized() && (this.getComponent() ? this.ctatdebug(g.toCSSString()) : this.ctatdebug("Internal error, html component not available for rendering"));
  };
  this.setStyleAll = function(a, b) {
    this.getSubCanvas() && this.getSubCanvas().setAttribute(a, b);
    this.modifyCSSAttribute(a, b);
  };
};
CTAT.Component.Base.Style.prototype = Object.create(CTATCompBase.prototype);
CTAT.Component.Base.Style.prototype.constructor = CTAT.Component.Base.Style;
var CTATComponentDescription = function() {
  CTATBase.call(this, "CTATComponentDescription", "");
  this.groupName = this.name = this.type = "Unknown";
  this.height = this.width = this.y = this.x = 0;
  this.tabIndex = this.zIndex = -1;
  this.styles = {};
  this.params = {};
  this.componentPointer = null;
  this.setComponentPointer = function(a) {
    this.componentPointer = a;
  };
  this.getComponentPointer = function() {
    return this.componentPointer;
  };
  this.setGenericDefaults = function() {
    this.name = "Generic name";
    this.styles = {BackgroundColor:"#ffffff", BorderColor:"#999999", FontName:CTATGlobals.Font.family, FontSize:CTATGlobals.Font.size, FontColor:CTATGlobals.Font.color, FontBold:!1, FontItalic:!1, FontUnderlined:!1, TextAlign:"left", ShowHintHighlight:!1, blockOnCorrect:!1, disabledBackgroundColor:"#999999", disabledTextColor:"#999999", tutorComponent:null};
    return this;
  };
};
CTATComponentDescription.prototype = Object.create(CTATBase.prototype);
CTATComponentDescription.prototype.constructor = CTATComponentDescription;
CTAT.Component.Base.Graphical = function(a, b, f, e, d, c, g) {
  CTAT.Component.Base.Style.call(this, a, b, e, d, c, g);
  var h = f || (new CTATComponentDescription).setGenericDefaults();
  this.getGrDescription = function() {
    return h;
  };
  this.setGrDescription = function(a) {
    h = a;
    this.processDescription(h);
  };
  var l = CTATGlobals.Visual.BackgroundColor, m = "white", q = 1, p = CTATGlobals.Visual.BorderColor, n = !1, x = "solid", u = 0, w = "1px", z = 0, t = CTATGlobals.Font.color, D = "black", C = CTATGlobals.Font.family, H = CTATGlobals.Font.size, E = !1, A = !1, y = !1;
  this.align = CTATGlobals.Align;
  this.getAlign = function() {
    return this.component ? $(this.component).css("text-align") : this.align;
  };
  this.setAlign = function(a) {
    this.align = a;
    this.component && this.getAlign() !== this.align && (this.component.style.textAlign = this.align);
    return this;
  };
  this.getBackgroundColor = function() {
    return this.component ? $(this.component).css("background-color") : l;
  };
  this.setBackgroundColor = function(a) {
    a = CTATGlobalFunctions.formatColor(a);
    a != this.getBackgroundColor() && (l = a, this.component && (this.component.style.backgroundColor = l));
    return this;
  };
  this.getDisabledBGColor = function() {
    return m;
  };
  this.setDisabledBGColor = function(a) {
    m = CTATGlobalFunctions.formatColor(a);
    return this;
  };
  this.getDisabledTextColor = function() {
    return D;
  };
  this.setDisabledTextColor = function(a) {
    D = CTATGlobalFunctions.formatColor(a);
    return this;
  };
  this.getBorderColor = function() {
    return this.component ? $(this.component).css("border-color") : p;
  };
  this.setBorderColor = function(a) {
    p = CTATGlobalFunctions.formatColor(a);
    this.component && p !== this.getBorderColor() && (this.component.style.borderColor = p);
    return this;
  };
  this.getBorderRoundness = function() {
    return this.component ? $(this.component).css("border-radius") : u;
  };
  this.setBorderRoundness = function(a) {
    a = parseInt(a);
    u = isNaN(a) ? 0 : a;
    this.component && this.getBorderRoundness() !== u && (this.component.style.borderRadius = u);
    return this;
  };
  this.getBorderStyle = function() {
    return this.component ? $(this.component).css("border-style") : x;
  };
  this.setBorderStyle = function(a) {
    x = a;
    this.component && this.getBorderStyle() !== x && (this.component.style.borderStyle = x);
    return this;
  };
  this.getBorderWidth = function() {
    return this.component ? $(this.component).css("borderWidth") : w;
  };
  this.setBorderWidth = function(a) {
    w = parseInt(a);
    isNaN(w) && (w = 0);
    this.component && this.getBorderWidth() !== w && (this.component.style.borderWidth = w);
    return this;
  };
  this.getPadding = function() {
    return this.component ? parseInt($(this.component).css("padding-left")) : z;
  };
  this.setPadding = function(a) {
    z = parseInt(a);
    isNaN(z) && (z = 0);
    this.component && this.getPadding() !== z && (this.component.style.padding = z + "px");
    return this;
  };
  this.getFontColor = function() {
    this.component && $(this.component).css("color");
    return t;
  };
  this.setFontColor = function(a) {
    t = CTATGlobalFunctions.formatColor(a);
    this.component && this.getFontColor() !== t && (this.component.style.color = t);
    return this;
  };
  this.getFontFamily = function() {
    return this.component ? $(this.component).css("font-family") : C;
  };
  this.setFontFamily = function(a) {
    C = a;
    this.component && this.getFontFamily() !== C && (this.component.style.fontFamily = C);
    return this;
  };
  this.getFontSize = function() {
    this.component && $(this.component).css("font-size");
    return H;
  };
  this.setFontSize = function(a) {
    a = parseInt(a);
    H = isNaN(a) ? CTATGlobals.Font.size : a;
    this.component && parseInt(this.getFontSize()) !== H && (this.component.style.fontSize = H + "pt");
    return this;
  };
  this.getShowBorder = function() {
    if (this.component) {
      var a = window.getComputedStyle(this.component);
      return "none" != a.getPropertyValue("border-style") && 0 < parseInt(a.getPropertyValue("border-width"));
    }
    return n;
  };
  this.setShowBorder = function(a) {
    n = CTATGlobalFunctions.toBoolean(a);
    this.component && this.getShowBorder() !== n && (n ? (this.setBorderStyle(x), this.setBorderWidth(w)) : this.setBorderStyle("none"));
    return this;
  };
  this.getTransparencyValue = function() {
    return q;
  };
  this.setTransparencyValue = function(a) {
    q = Number(a);
    isNaN(q) && (q = 1);
    return this;
  };
  this.getUnderlined = function() {
    return this.component ? "underline" === window.getComputedStyle(this.component).getPropertyValue("text-decoration") : y;
  };
  this.setUnderlined = function(a) {
    y = CTATGlobalFunctions.toBoolean(a);
    this.component && this.getUnderlined() !== y && (this.component.style.textDecoration = y ? "underline" : null);
    return this;
  };
  this.getBolded = function() {
    return this.component ? "bold" === window.getComputedStyle(this.component).getPropertyValue("font-weight") : E;
  };
  this.setBolded = function(a) {
    E = CTATGlobalFunctions.stringToBoolean(a);
    this.component && this.getBolded() !== E && (this.component.style.fontWeight = E ? "bold" : null);
    return this;
  };
  this.getItalicized = function() {
    return this.component ? "italic" === window.getComputedStyle(this.component).getPropertyValue("font-style") : A;
  };
  this.setItalicized = function(a) {
    A = CTATGlobalFunctions.toBoolean(a);
    this.component && this.getItalicized() !== A && (this.component.style.fontStyle = A ? "italic" : null);
    return this;
  };
  var r = this;
  a = function(a) {
    var b = a || {};
    return {setHandler:function(a, c) {
      b[a] = c;
    }, set:function(a) {
      if (b.hasOwnProperty(a)) {
        if (b[a]) {
          var c = Array.prototype.slice.call(arguments, 1);
          return b[a].apply(r, c);
        }
        r.ctatdebug("Error: NULL handler for " + a);
      } else {
        r.ctatdebug("Error: No handler set for " + a);
      }
    }};
  };
  this.style_handlers = a({BackgroundColor:this.setBackgroundColor, BorderColor:this.setBorderColor, borderRoundness:this.setBorderRoundness, disabledBackgroundColor:this.setDisabledBGColor, disabledTextColor:this.setDisabledTextColor, DrawBorder:this.setShowBorder, FontFace:this.setFontFamily, FontSize:this.setFontSize, FontBold:this.setBolded, FontItalic:this.setItalicized, FontUnderlined:this.setUnderlined, labelText:this.setText, padding:this.setPadding, showBorder:this.setShowBorder, TextAlign:this.setAlign, 
  TextColor:this.setFontColor, transparencyValue:this.setTransparencyValue});
  this.setStyle = function(a, b) {
    this.style_handlers.set(a, b);
  };
  this.setStyleHandler = function(a, b) {
    this.style_handlers.setHandler(a, b);
  };
  this.parameter_handlers = a({group:this.setComponentGroup});
  this.setParameter = function(a, b) {
    this.parameter_handlers.set(a, b);
  };
  this.setParameterHandler = function(a, b) {
    this.parameter_handlers.setHandler(a, b);
  };
  this.data_ctat_handlers = {};
  this.processAttributes = function() {
    if (this.getDivWrap()) {
      var a = $(this.getDivWrap()), b = parseInt(a.attr("tabindex"));
      isNaN(b) || (this.setTabIndex(b), a.attr("tabindex", null));
      b = a.attr("name");
      void 0 !== b && this.setComponentGroup(b);
      for (var c in this.data_ctat_handlers) {
        b = a.data("ctat-" + c), void 0 !== b && this.data_ctat_handlers[c].apply(this, [b]);
      }
    }
  };
  this.data_ctat_handlers.enabled = function(a) {
    this.setEnabled(CTATGlobalFunctions.toBoolean(a));
  };
  this.processParameters = function(a) {
    if (a instanceof CTATComponentDescription) {
      r.setName(a.name);
      a = a.params;
      for (var b in a) {
        this.setParameter(b, a[b]);
      }
    } else {
      this.ctatdebug("Error: Invalid description sent to CTAT.Components.Hierarchy.Graphical.processDescription: " + a);
    }
  };
  this.processStyles = function(a) {
    this.component && this.component.classList.add("CTAT-gen-component");
    if (a instanceof CTATComponentDescription) {
      a = a.styles;
      for (var b in a) {
        this.setStyle(b, a[b]);
      }
    } else {
      this.ctatdebug("Error: Invalid description sent to CTAT.Components.Hierarchy.Graphical.processDescription: " + a);
    }
  };
  this.processDescription = function(a) {
    this.processParameters(a);
    this.processStyles(a);
  };
  this.configFromDescription = function() {
    this.processParameters(h);
  };
  this.processSerialization = function() {
    this.processStyles(h);
  };
};
CTAT.Component.Base.Graphical.prototype = Object.create(CTAT.Component.Base.Style.prototype);
CTAT.Component.Base.Graphical.prototype.constructor = CTAT.Component.Base.Graphical;
var CTATGuid = function() {
  this.s4 = function() {
    return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1);
  };
  this.guid = function() {
    return this.s4() + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + this.s4() + this.s4();
  };
};
"undefined" !== typeof module && (module.exports = CTATGuid);
var CTATArgument = function() {
  var a = "Undefined", b = "String", f = "text";
  this.setValue = function(b) {
    a = b;
  };
  this.getValue = function() {
    return a;
  };
  this.setType = function(a) {
    b = a;
  };
  this.getType = function() {
    return b;
  };
  this.setFormat = function(a) {
    f = a;
  };
  this.getFormat = function() {
    return f;
  };
};
CTATArgument.prototype.clone = function() {
  var a = new CTATArgument;
  a.setValue(this.getValue());
  a.setType(this.getType());
  a.setFormat(this.getFormat());
  return a;
};
"undefined" !== typeof module && (module.exports = CTATArgument);
var CTATHTMLManager = function() {
  var a = null, b = "";
  this.urldecode = function(a) {
    return decodeURIComponent((a + "").replace(/\+/g, "%20"));
  };
  this.showEntities = function() {
    ctatdebug("showEntities ()");
    for (var b, e = 0;e < a.length;e++) {
      b = a[e], ctatdebug(b);
    }
  };
  this.initEntities = function() {
    null == a && (a = [], a["&amp;"] = "*!*", a["&nbsp;"] = "\u00a0", a["&iexcl;"] = "\u00a1", a["&cent;"] = "\u00a2", a["&pound;"] = "\u00a3", a["&curren;"] = "\u00a4", a["&yen;"] = "\u00a5", a["&brvbar;"] = "\u00a6", a["&sect;"] = "\u00a7", a["&uml;"] = "\u00a8", a["&copy;"] = "\u00a9", a["&reg;"] = "\u00ae", a["&deg;"] = "\u00b0", a["&plusmn;"] = "\u00b1", a["&sup1;"] = "\u00b9", a["&sup2;"] = "\u00b2", a["&sup3;"] = "\u00b3", a["&acute;"] = "\u00b4", a["&micro;"] = "\u00b5", a["&frac14;"] = "\u00bc", 
    a["&frac12;"] = "\u00bd", a["&frac34;"] = "\u00be", a["&iquest;"] = "\u00bf", a["&Agrave;"] = "\u00c0", a["&Aacute;"] = "\u00c1", a["&Acirc;"] = "\u00c2", a["&Atilde;"] = "\u00c3", a["&Auml;"] = "\u00c4", a["&Aring;"] = "\u00c5", a["&AElig;"] = "\u00c6", a["&Ccedil;"] = "\u00c7", a["&Egrave;"] = "\u00c8", a["&Eacute;"] = "\u00c9", a["&Ecirc;"] = "\u00ca", a["&Euml;"] = "\u00cb", a["&Igrave;"] = "\u00cc", a["&Iacute;"] = "\u00cd", a["&Icirc;"] = "\u00ce", a["&Iuml;"] = "\u00cf", a["&ETH;"] = "\u00d0", 
    a["&Ntilde;"] = "\u00d1", a["&Ograve;"] = "\u00d2", a["&Oacute;"] = "\u00d3", a["&Ocirc;"] = "\u00d4", a["&Otilde;"] = "\u00d5", a["&Ouml;"] = "\u00d6", a["&Oslash;"] = "\u00d8", a["&Ugrave;"] = "\u00d9", a["&Uacute;"] = "\u00da", a["&Ucirc;"] = "\u00db", a["&Uuml;"] = "\u00dc", a["&Yacute;"] = "\u00dd", a["&THORN;"] = "\u00de", a["&szlig;"] = "\u00df", a["&agrave;"] = "\u00e0", a["&aacute;"] = "\u00e1", a["&acirc;"] = "\u00e2", a["&atilde;"] = "\u00e3", a["&auml;"] = "\u00e4", a["&aring;"] = 
    "\u00e5", a["&aelig;"] = "\u00e6", a["&ccedil;"] = "\u00e7", a["&egrave;"] = "\u00e8", a["&eacute;"] = "\u00e9", a["&ecirc;"] = "\u00ea", a["&euml;"] = "\u00eb", a["&igrave;"] = "\u00ec", a["&iacute;"] = "\u00ed", a["&icirc;"] = "\u00ee", a["&iuml;"] = "\u00ef", a["&eth;"] = "\u00f0", a["&ntilde;"] = "\u00f1", a["&ograve;"] = "\u00f2", a["&oacute;"] = "\u00f3", a["&ocirc;"] = "\u00f4", a["&otilde;"] = "\u00f5", a["&ouml;"] = "\u00f6", a["&oslash;"] = "\u00f8", a["&ugrave;"] = "\u00f9", a["&uacute;"] = 
    "\u00fa", a["&ucirc;"] = "\u00fb", a["&uuml;"] = "\u00fc", a["&yacute;"] = "\u00fd", a["&thorn;"] = "\u00fe", a["&yuml;"] = "\u00ff", a["&gt;"] = ">", a["&lt;"] = "<", a["&#61;"] = "=", a["&361;"] = "=", a["&quot;"] = '"');
    ctatdebug("(singleQuoteEscape==true) Replacing &apos; with: \\'");
    a["&apos;"] = "\\'";
  };
  this.entitiesConvert = function(a) {
    ctatdebug("entitiesConvert ()");
    return this.urldecode(unescape(a));
  };
  this.entitiesGenerate = function(a) {
    return b = a;
  };
  this.htmlEncode = function(a) {
    return a;
  };
  this.htmlDecode = function(a) {
    return "undefined" !== typeof $ ? $("<div/>").html(a).text() : "undefined" !== typeof Entities ? (new Entities).decode(a) : a;
  };
};
"undefined" !== typeof module && (module.exports = CTATHTMLManager);
var CTATStringUtil = function() {
  this.String2Boolean = function(a) {
    switch(a) {
      case "0":
      ;
      case "false":
      ;
      case "no":
      ;
      case "FALSE":
      ;
      case "NO":
      ;
      case "No":
        return !1;
    }
    return !0;
  };
  this.replaceString = function(a, b, f) {
    return a.replace(b, f);
  };
};
"undefined" !== typeof module && (module.exports = CTATStringUtil);
var CTATXML = function() {
  CTATBase.call(this, "CTATXML", "xmlparser");
  this.parse = function(a) {
    return this.parseXML(a);
  };
  this.parseXML = function(a) {
    this.ctatdebug("parseXML ()");
    var b = null;
    try {
      "undefined" !== typeof $ ? b = $.parseXML(a) : "undefined" !== typeof XMLParser ? b = (new XMLParser).parseFromString(a) : this.ctatdebug("Bottoming out, no parser configured!");
    } catch (f) {
      return null != b ? this.ctatdebug("JQuery could not process the provided XML: " + f.message + " (" + b.parseError.errorCode + ") (" + b.parseError.reason + ") (" + b.parseError.line + ")") : this.ctatdebug("JQuery could not process the provided XML (xmlDoc==null): " + f.message), null;
    }
    return null == b ? (this.ctatdebug("Unspecified error parsing xml message. xmlDoc is null"), null) : b.documentElement;
  };
  this.getElementName = function(a) {
    return a.nodeName;
  };
  this.getElementValue = function(a) {
    return a.nodeValue;
  };
  this.getElementChildren = function(a) {
    for (var b = [], f = 0;f < a.childNodes.length;f++) {
      1 == a.childNodes[f].nodeType && b.push(a.childNodes[f]);
    }
    return b;
  };
  this.getNodeTextValue = function(a) {
    if (null == a) {
      return "";
    }
    if (null == a.childNodes) {
      return a.nodeValue;
    }
    if (0 == a.childNodes.length) {
      return "";
    }
    for (var b = a.childNodes, f = 0;f < b.length;f++) {
      var e = b[f];
      if ("value" == e.nodeName || "Value" == e.nodeName) {
        if (1 == e.childNodes.length) {
          return e.childNodes[0].nodeValue;
        }
        if (0 == e.childNodes.length) {
          break;
        } else {
          return e.childNodes[1].nodeValue;
        }
      }
    }
    return a.childNodes[0].nodeValue;
  };
  this.getElementAttr = function(a, b) {
    if (!a.attributes) {
      return this.ctatdebug("Warning: Element " + a.nodeName + " does not have any attributes"), "";
    }
    for (var f = 0;f < a.attributes.length;f++) {
      if (a.attributes[f].nodeName == b) {
        return a.attributes[f].nodeValue;
      }
    }
    return "";
  };
  this.listElementAttr = function(a) {
    this.ctatdebug("Listing " + a.attributes.length + " attributes for element " + a.nodeName + " ...");
    for (var b = 0;b < a.attributes.length;b++) {
      this.ctatdebug(b + " name: " + a.attributes[b].nodeName + ", value: " + a.attributes[b].nodeValue);
    }
  };
  this.xmlToString = function(a) {
    this.ctatdebug("xmlToString ()");
    return null == a ? (this.ctatdebug("Error: xml data is null"), null) : (new XMLSerializer).serializeToString(a);
  };
};
CTATXML.prototype = Object.create(CTATBase.prototype);
CTATXML.prototype.constructor = CTATXML;
"undefined" !== typeof module && (module.exports = CTATXML);
var CTATSAI = function(a, b, f, e) {
  function d(a, b, c, g) {
    g = String(u.getElementName(b)).toLowerCase();
    if (g == a || "value" == g) {
      if (g = u.getElementChildren(b), !Array.isArray(g) || 1 > g.length) {
        c.push(u.getNodeTextValue(b));
      } else {
        for (b = 0;b < g.length;++b) {
          d(a, g[b], c, b);
        }
      }
    }
  }
  CTATBase.call(this, "CTATSAI", "sai");
  var c = "undefined", g = "undefined", h = new CTATStringUtil, l = [], m = [], q = [], p = [], n = [], x = [], u, w = this;
  u = "xml" == CTATConfig.parserType ? new CTATXML : new CTATJSON;
  this.getArguments = function() {
    return l;
  };
  this.getArgumentsTyped = function() {
    this.ctatdebug("getArgumentsTyped");
    var a, b = [];
    for (a = 0;a < l.length;a++) {
      var c = l[a];
      "Boolean" === c.getType() ? (this.ctatdebug("Adding Boolean argument (" + c.getValue() + ") ..."), b.push(h.String2Boolean(c.getValue()))) : "Number" === c.getType() ? (this.ctatdebug("Adding Number argument (" + c.getValue() + ") ..."), b.push(Number(c.getValue()))) : "String" === c.getType() ? "No_Value" === c.getValue() ? (this.ctatdebug("Detected default argument (" + c.getValue() + "), setting contents to null instead"), b.push(null)) : b.push(String(c.getValue())) : this.ctatdebug("Unrecognized argument type: " + 
      c.getType() + " in " + this.toSerializedString() + " IGNORING IT!!!");
    }
    this.ctatdebug("Resulting arguments: " + b);
    return b;
  };
  this.getArgument = function(a) {
    return l[a];
  };
  this.addSelection = function(a) {
    m.push(a);
  };
  this.addAction = function(a) {
    q.push(a);
  };
  this.checkDefaultArgument = function() {
    this.ctatdebug("checkDefaultArgument ()");
    if (0 === l.length) {
      this.ctatdebug("Adding default argument ...");
      var a = new CTATArgument;
      l.push(a);
    }
  };
  this.setArgument = function(a, b) {
    this.checkDefaultArgument();
    for (var c = l.length;c <= a;++c) {
      l.push(new CTATArgument);
    }
    c = l[a];
    c.value = b;
    return c;
  };
  this.addArgument = function(a, b, c) {
    var g = new CTATArgument;
    g.value = a;
    g.type = b;
    g.format = c;
    l.push(g);
    return g;
  };
  this.addExistingArgument = function(a) {
    l.push(a);
    return a;
  };
  this.setSAI = function(a, b, e, f, d) {
    this.setName(Array.isArray(a) ? 0 < a.length ? a[0] : "" : a);
    c = Array.isArray(b) ? 0 < b.length ? b[0] : "" : b;
    g = d;
    this.setInput(Array.isArray(e) ? 0 < e.length ? e[0] : "" : e);
    this.setType(f);
  };
  this.setInput = function(a) {
    this.checkDefaultArgument();
    this.getArgument(0).setValue(a);
    this.setInputArray(a);
  };
  this.getInput = function() {
    return 0 === l.length ? "" : this.getArgument(0).getValue();
  };
  this.setType = function(a) {
    this.checkDefaultArgument();
    this.getArgument(0).type = a;
  };
  this.getType = function() {
    return 0 === l.length ? "" : this.getArgument(0).type;
  };
  this.setFormat = function(a) {
    this.checkDefaultArgument();
    this.getArgument(0).setFormat(a);
  };
  this.getFormat = function() {
    return 0 === l.length ? "" : this.getArgument(0).getFormat();
  };
  this.toString = function() {
    return "[" + String(w.getSelection()) + "," + String(w.getAction()) + "," + String(w.getInput()) + "]";
  };
  this.setSelection = function(a) {
    this.setName(a);
  };
  this.getSelection = function() {
    return this.getName();
  };
  this.setAction = function(a) {
    c = a;
  };
  this.getAction = function() {
    return c;
  };
  this.appendToSelectionArray = function(a) {
    null == a ? p.push("") : p.push(String(a));
  };
  this.setSelectionArray = function(a) {
    p = null == a ? [] : Array.isArray(a) ? a.slice() : [String(a)];
  };
  this.getSelectionArray = function() {
    return p;
  };
  this.appendToActionArray = function(a) {
    null == a ? n.push("") : n.push(String(a));
  };
  this.setActionArray = function(a) {
    n = null == a ? [] : Array.isArray(a) ? a.slice() : [String(a)];
  };
  this.getActionArray = function() {
    return n;
  };
  this.appendToInputArray = function(a) {
    null == a ? x.push("") : x.push(String(a));
  };
  this.setInputArray = function(a) {
    x = null == a ? [] : Array.isArray(a) ? a.slice() : [String(a)];
  };
  this.getInputArray = function() {
    return x;
  };
  this.setPrompt = function(a) {
    g = a;
  };
  this.getPrompt = function() {
    return g;
  };
  this.propagate = function(a) {
    this.ctatdebug("propagate ()");
    a = a.getArguments();
    for (var b = 0;b < a.length;b++) {
      var c = a[b], g = l[b];
      if (null === c || null === g) {
        this.ctatdebug("Internal error: argument lists do not align between received SAI and source SAI");
        break;
      }
      g.setValue(c.getValue());
    }
  };
  this.fromString = function(a) {
    a = u.parse(a);
    this.fromXML(a);
  };
  this.fromXML = function(a) {
    this.ctatdebug("fromXML ()");
    l = [];
    a = u.getElementChildren(a);
    for (var b, c = 0;c < a.length;c++) {
      var g = a[c];
      if ("selection" == u.getElementName(g) || "Selection" == u.getElementName(g)) {
        for (var e = u.getElementChildren(g), f = !1, d = 0;d < e.length;d++) {
          b = e[d], "value" == u.getElementName(b) && (b = u.getNodeTextValue(b), 1 > d ? this.setSelectionArray(b) : this.appendToSelectionArray(b), f = !0, this.setSelection(b));
        }
        !1 === f && (b = u.getNodeTextValue(g), this.setSelectionArray(b), this.setSelection(b));
      }
      if ("action" == u.getElementName(g) || "Action" == u.getElementName(g)) {
        e = u.getElementChildren(g);
        f = !1;
        for (d = 0;d < e.length;d++) {
          b = e[d], "value" == u.getElementName(b) && (b = u.getNodeTextValue(b), 1 > d ? this.setActionArray(b) : this.appendToActionArray(b), f = !0, this.setAction(b));
        }
        !1 === f && (b = u.getNodeTextValue(g), this.setActionArray(b), this.setAction(b));
      }
      if ("internalArguments" == u.getElementName(g) || "value" == u.getElementName(g) || "Input" == u.getElementName(g)) {
        b = u.getElementChildren(g);
        var h;
        l = [];
        e = new CTATHTMLManager;
        f = new CTATArgument;
        d = 0;
        l.push(f);
        for (var m = 0;m < b.length;m++) {
          var n = b[m];
          "value" == u.getElementName(n) && (h = u.getElementChildren(n), null !== h ? (this.ctatdebug("Parsing SAI input ..."), this.ctatdebug("Childnodes: " + h.length), 1 === h.length ? (h = e.htmlDecode(u.getNodeTextValue(n)), this.ctatdebug("Setting new value to: " + h), f.setValue(h)) : (h = e.htmlDecode(u.getNodeTextValue(n)), this.ctatdebug("Setting new value to: " + h), f.setValue(h), f.setName(n.attributes.getNamedItem("name").value), f.setType(n.attributes.getNamedItem("type").value), 
          f.setFormat(n.attributes.getNamedItem("format").value), d++), 1 > m ? this.setInputArray(h) : this.appendToInputArray(h)) : (n = e.htmlDecode(u.getNodeTextValue(n)), this.ctatdebug("Setting new value to: " + n), f.setValue(n), 1 > m ? this.setInputArray(n) : this.appendToInputArray(n)));
        }
      }
      if ("prompt" == u.getElementName(g) || "Prompt" == u.getElementName(g)) {
        this.ctatdebug("Parsing prompt ..."), this.setPrompt(u.getNodeTextValue(g));
      }
    }
    this.checkDefaultArgument();
  };
  this.setArrayFromElements = function(a) {
    if (a && Array.isArray(a) && !(1 > a.length)) {
      var b, c = String(u.getElementName(a[0])).toLowerCase();
      switch(c) {
        case "selection":
          b = p = [];
          break;
        case "action":
          b = n = [];
          break;
        case "input":
          b = x = [];
          break;
        default:
          console.log('CTATSAI.setArrayFromElements(): unexpected element name "' + c + '"');
          return;
      }
      for (var g = 0;g < a.length;++g) {
        d(c, a[g], b, g);
      }
      this.ctatdebug("CTATSAI.setArrayFromElements() eltName " + c + ", length " + g + ", selectionArray " + this.getSelectionArray() + ", actionArray " + this.getActionArray() + ", inputArray " + this.getInputArray());
    }
  };
  this.fromXMLInternal = function(a) {
    this.ctatdebug("fromXMLInternal ()");
    new CTATXML;
    l = [];
    a = u.getElementChildren(a);
    for (var b, c = 0;c < a.length;c++) {
      var g = a[c];
      if ("selection" == u.getElementName(g) || "Selection" == u.getElementName(g)) {
        for (var e = u.getElementChildren(g), f = !1, d = 0;d < e.length;d++) {
          b = e[d], "value" == u.getElementName(b) && (b = u.getNodeTextValue(b), 1 > d ? this.setSelectionArray(b) : this.appendToSelectionArray(b), f = !0, this.setSelection(b));
        }
        !1 === f && (b = u.getNodeTextValue(g), this.setSelectionArray(b), this.setSelection(b));
      }
      if ("action" == u.getElementName(g) || "Action" == u.getElementName(g)) {
        e = g.childNodes;
        f = !1;
        for (d = 0;d < e.length;d++) {
          b = e[d], "value" == u.getElementName(b) && (b = u.getNodeTextValue(b), 1 > d ? this.setActionArray(b) : this.appendToActionArray(b), f = !0, this.setAction(b));
        }
        !1 === f && (b = u.getNodeTextValue(g), this.setActionArray(b), this.setAction(b));
      }
      if ("internalArguments" == u.getElementName(g) || "Input" == u.getElementName(g)) {
        b = g.childNodes;
        l = [];
        var e = new CTATHTMLManager, f = new CTATArgument, d = 0, h;
        l.push(f);
        for (var m = 0;m < b.length;m++) {
          if (h = b[m], "value" == u.getElementName(h)) {
            var n = u.getElementChildren(h);
            null !== n ? (this.ctatdebug("Parsing SAI input ..."), this.ctatdebug("Childnodes: " + n.length), 1 === n.length ? (h = e.htmlDecode(u.getNodeTextValue(h)), this.ctatdebug("Setting new value to: " + h), f.setValue(h)) : (h = e.htmlDecode(u.getNodeTextValue(h)), this.ctatdebug("Setting new value to: " + h), f.setValue(h), f.setName(u.getElementAttr("name")), f.setType(u.getElementAttr("type")), f.setFormat(u.getElementAttr("format")), d++)) : (h = e.htmlDecode(u.getNodeTextValue(h)), this.ctatdebug("Setting new value to: " + 
            h), f.setValue(h));
            1 > m ? this.setInputArray(h) : this.appendToInputArray(h);
          }
        }
      }
      if ("prompt" == u.getElementName(g) || "Prompt" == u.getElementName(g)) {
        this.ctatdebug("Parsing prompt ..."), this.setPrompt(u.getNodeTextValue(g));
      }
    }
    this.checkDefaultArgument();
  };
  this.toXMLString = function(a) {
    this.ctatdebug("toXMLString ()");
    return a ? this.toLSxmlString() : this.toTSxmlString();
  };
  this.toLSxmlString = function() {
    this.ctatdebug("toLSxmlString ()");
    var a;
    a = "<selection>" + this.getName();
    for (var b = 0;b < m.length;b++) {
      a += "</selection><selection>" + m[b];
    }
    a += "</selection><action>" + this.getAction();
    for (b = 0;b < q.length;b++) {
      a += "</action><action>" + q[b];
    }
    a += "</action><input>";
    for (b = 0;b < l.length;b++) {
      a += "<![CDATA[" + l[b].getValue() + "]]\x3e";
    }
    return a + "</input>";
  };
  this.toTSxmlString = function() {
    this.ctatdebug("toTSxmlString ()");
    var a;
    a = "<Selection><value>" + this.getName();
    for (var b = 0;b < m.length;b++) {
      a += "</value><value>" + m[b];
    }
    a += "</value></Selection><Action><value>" + this.getAction();
    for (b = 0;b < q.length;b++) {
      a += "</value><value>" + q[b];
    }
    a += "</value></Action><Input>";
    if (1 < l.length) {
      for (b = 0;b < l.length;b++) {
        var c = l[b];
        a += '<value fmt="text" name="' + c.getName() + '" type="' + c.getType() + '"><![CDATA[' + c.getValue() + "]]\x3e</value>";
      }
    } else {
      a += "<value><![CDATA[" + this.getInput() + "]]\x3e</value>";
    }
    return a + "</Input>";
  };
  this.toSerializedString = function() {
    var a;
    a = "" + ("<selection>" + this.getSelection() + "</selection><action>" + this.getAction() + "</action><internalArguments>");
    for (var b = 0;b < l.length;b++) {
      var c = l[b];
      a += '<value fmt="text" name="' + c.getName() + '" type="' + c.getType() + '">' + c.getValue() + "</value>";
    }
    return a + "</internalArguments>";
  };
  this.setAddedSelections = function(a) {
    m = a;
  };
  this.setAddedActions = function(a) {
    q = a;
  };
  this.clone = function() {
    var a = new CTATSAI(this.getSelection(), this.getAction(), this.getInput(), this.getPrompt());
    a.setAddedSelections(m.slice(0));
    a.setAddedActions(q.slice(0));
    for (var b = 0;b < this.getArguments().length;++b) {
      a.setArgument(b, this.getArgument(b).clone());
    }
    a.setSelectionArray(this.getSelectionArray().slice());
    a.setActionArray(this.getActionArray().slice());
    a.setInputArray(this.getInputArray().slice());
    this.ctatdebug("CTATSAI.clone() this " + this + ", clone " + a + ", clone inputArray " + a.getInputArray());
    return a;
  };
  this.isDone = function() {
    var a = w.getSelection(), b = w.getAction();
    return null == a || null == b ? !1 : "done" == a.toString().toLowerCase() && "buttonpressed" == b.toString().toLowerCase();
  };
  var z = !1;
  if (Array.isArray(a) && Array.isArray(b) && (Array.isArray(f) || null == f) && (this.setSelectionArray(a), this.setActionArray(b), this.setInputArray(f), z = !0, 0 < a.length && 0 < b.length)) {
    this.setSAI(a[0], b[0], null == f ? null : f[0], "String", e);
    return;
  }
  null !== a && "" !== a && this.setSelection(a);
  null !== a && (this.setSAI(a, b, f, "String", e), z || (this.setSelectionArray(Array.isArray(a) ? a : [a]), this.setActionArray(Array.isArray(b) ? b : [b]), this.setInputArray(Array.isArray(f) ? f : [f]), z = !0));
};
CTATSAI.prototype = Object.create(CTATBase.prototype);
CTATSAI.prototype.constructor = CTATSAI;
"undefined" !== typeof module && (module.exports = CTATSAI);
var CTATSkill = function() {
  CTATBase.call(this, "CTATSkill", "skill");
  var a = "", b = "", f = "", e = "", d = 0, c = "", g = !1, h = "", l = "", m = "", q = "", p = "";
  this.setSkillName = function(b) {
    a = b;
  };
  this.setDisplayName = function(a) {
    b = a;
  };
  this.setModelName = function(a) {
    e = a;
  };
  this.setCategory = function(a) {
    f = a;
  };
  this.setLevel = function(a) {
    !0 === isNaN(a) ? ctatdebug("Error: attempting to set a level to NaN") : (d = a, this.setPKnown(String(d)));
  };
  this.setDescription = function(a) {
    c = a;
  };
  this.getSkillName = function() {
    return a;
  };
  this.getDisplayName = function() {
    return b;
  };
  this.hasDisplayName = function() {
    return "" !== b && null !== b;
  };
  this.getModelName = function() {
    return e;
  };
  this.hasCategory = function() {
    return "" !== f;
  };
  this.hasModelName = function() {
    return "" !== e;
  };
  this.getCategory = function() {
    return f;
  };
  this.getLevel = function() {
    return d;
  };
  this.getDescription = function() {
    return c;
  };
  this.setTouched = function(a) {
    g = a;
  };
  this.getTouched = function() {
    return g;
  };
  this.toXMLString = function() {
    return "";
  };
  this.toSetPreferencesXMLString = function() {
    var g = '<skill label="' + b + '" pSlip="' + l + '" description="' + c;
    return g += '" pKnown="' + m + '" category="' + f + '" pLearn="' + q + '" name="' + a + '" pGuess="' + h + '" history="' + p + '" />';
  };
  this.setPGuess = function(a) {
    h = a;
  };
  this.getPGuess = function() {
    return h;
  };
  this.setPSlip = function(a) {
    l = a;
  };
  this.getPSlip = function() {
    return l;
  };
  this.setPLearn = function(a) {
    q = a;
  };
  this.getPLearn = function() {
    return q;
  };
  this.setPKnown = function(a) {
    m = a;
  };
  this.getPKnown = function() {
    return m;
  };
  this.setSkillHistory = function(a) {
    p = a;
  };
  this.getSkillHistory = function() {
    return p;
  };
};
CTATSkill.prototype = Object.create(CTATBase.prototype);
CTATSkill.prototype.constructor = CTATSkill;
var CTATSkillSet = function() {
  CTATBase.call(this, "CTATSkillSet", "skills");
  this.internalSkillSet = [];
  var a = this;
  this.fromXMLString = function(a) {
    this.ctatdebug("fromXMLString ()");
    this.ctatdebug("Skills string: " + a);
    if (null === a) {
      this.ctatdebug("Warning: skill object is null");
    } else {
      if ("" === a) {
        this.ctatdebug("Info: empty skill string provided, bump");
      } else {
        if (a) {
          this.ctatdebug("CTATSkillSet.fromXMLString() Raw:     " + a);
          a = decodeURIComponent(a.replace(/\+/g, " "));
          this.ctatdebug("CTATSkillSet.fromXMLString() Decoded: " + a);
          if (null !== /\/<value>.+<\/value>/.exec(a)) {
            this.parseByValue(a);
          } else {
            var f = (new CTATXML).parseXML(a);
            this.parseByAttributes(f, a);
          }
          this.ctatdebug("fromXMLString () done");
        } else {
          this.ctatdebug("Warning: skill object is undefined or otherwise empty.");
        }
      }
    }
  };
  this.fromXMLData = function(a, f) {
    this.ctatdebug("fromXMLData ()");
    null !== /\/<value>.+<\/value>/.exec(f) ? this.parseByValue(f) : this.parseByAttributes(a);
    this.ctatdebug("fromXMLData () done");
  };
  this.parseByValue = function(b) {
    this.ctatdebug("parseByValue()");
    if (b) {
      b = b.childNodes;
      for (var f = new CTATXML, e = 0;e < b.length;e++) {
        var d = f.getNodeTextValue(b[e]).split("`"), c = d[0].split(" ");
        4 == d.length ? this.addSkill(c[0], d[1], d[2], d[3], d[3], c[1]) : this.addSkill(c[0], d[1], d[2], d[3], d[4], c[1]);
      }
    } else {
      a.ctatdebug("Error: aSkills is null");
    }
  };
  this.parseDOM = function(a) {
    this.ctatdebug("parseDOM()");
    var f = new CTATXML;
    a = f.getElementChildren(a);
    for (var e = 0;e < a.length;e++) {
      var d = f.getNodeTextValue(a[e]).split("`"), c = d[0].split(" ");
      4 == d.length ? this.addSkill(c[0], d[1], d[2], d[3], d[3], c[1]) : this.addSkill(c[0], d[1], d[2], d[3], d[4], c[1]);
    }
  };
  this.parseByAttributes = function(b) {
    this.ctatdebug("parseByAttributes()");
    if (b) {
      if (b = b.childNodes) {
        for (var f = 0;f < b.length;f++) {
          var e = b[f];
          if ("Skill" == e.nodeName || "skill" == e.nodeName) {
            this.ctatdebug("Parsing node (" + f + "): " + e.nodeName + " -> " + e.nodeValue);
            var d = e.attributes.getNamedItem("name");
            if (d = d ? d.value : "") {
              var c = e.attributes.getNamedItem("pKnown"), c = c ? c.value : "", g = e.attributes.getNamedItem("description"), g = g ? g.value : "", h = e.attributes.getNamedItem("label"), h = h ? h.value : "", l = e.attributes.getNamedItem("category"), l = l ? l.value : "", m = e.attributes.getNamedItem("pGuess"), m = m ? m.value : "", q = e.attributes.getNamedItem("pLearn"), q = q ? q.value : "", p = e.attributes.getNamedItem("pSlip"), p = p ? p.value : "", e = (e = e.attributes.getNamedItem("history")) ? 
              e.value : "";
              this.addSkill(d, c, .95, g, h, l, m, q, p, e);
            }
          }
        }
      } else {
        this.ctatdebug("Error: list of skill xml elements is null");
      }
    } else {
      a.ctatdebug("Error: aSkills is null");
    }
  };
  this.getSkillSet = function() {
    return this.internalSkillSet;
  };
  this.getSize = function() {
    return this.internalSkillSet.length;
  };
  this.addSkill = function(a, f, e, d, c, g, h, l, m, q) {
    this.ctatdebug("addSkill() name = " + a + " level = " + f + " mastery = " + e + " aDescription = " + d + " adisplayName = " + c + " aCategory = " + g + " pguess= " + h + " plearn = " + l + " pslip = " + m + " history = " + q);
    a = this.setSkillLevel(a, f, e);
    this.ctatdebug("Configuring " + a.getDisplayName());
    d && a.setDescription(d);
    c && a.setDisplayName(c);
    g && a.setCategory(g);
    "" !== h && (a.setPGuess(h), a.setPLearn(l), a.setPSlip(m));
    "" !== q && a.setSkillHistory(q);
    return a;
  };
  this.setSkillLevel = function(a, f, e) {
    this.ctatdebug("setSkillLevel (" + a + "," + f + "," + e + ")");
    e = this.getSkill(a);
    null === e ? (this.ctatdebug("Skill not found, creating new one ..."), e = new CTATSkill, e.setSkillName(a), e.setLevel(f), this.internalSkillSet.push(e)) : (this.ctatdebug("Skill found, adjusting ..."), e.setLevel(1), e.setLevel(f));
    e.setTouched(!0);
    return e;
  };
  this.getSkill = function(a) {
    this.ctatdebug("getSkill (" + a + ") -> " + this.internalSkillSet.length);
    if (!a) {
      return null;
    }
    for (var f = 0;f < this.internalSkillSet.length;f++) {
      var e = this.internalSkillSet[f];
      if (e.getSkillName() == a) {
        return this.ctatdebug("Returning: " + f), e;
      }
    }
    return null;
  };
  this.getSkillLevel = function(a) {
    if (!a) {
      return -1;
    }
    for (var f in this.internalSkillSet) {
      if (f.getSkillName() == a) {
        return f.getLevel();
      }
    }
    return -1;
  };
  this.getTouched = function() {
    this.ctatdebug("getTouched ()");
    for (var a = [], f = 0;f < this.internalSkillSet.length;f++) {
      var e = this.internalSkillSet[f];
      !0 === e.getTouched() && (this.ctatdebug("Adding touched skill: " + e.getSkillName()), a.push(e));
    }
    return a;
  };
  this.untouchSkills = function() {
    this.ctatdebug("untouchSkills ()");
    for (var a = 0;a < this.internalSkillSet.length;a++) {
      this.internalSkillSet[a].setTouched(!1);
    }
  };
  this.toSetPreferencesXMLString = function() {
    this.ctatdebug("toSetPreferencesXMLString ()");
    for (var a = "<skills>", f = 0;f < this.internalSkillSet.length;f++) {
      a += this.internalSkillSet[f].toSetPreferencesXMLString();
    }
    return a + "</skills>";
  };
  this.toLogString = function() {
    this.ctatdebug("toLogString (" + this.internalSkillSet.length + ")");
    for (var a = "", f = 0;f < this.internalSkillSet.length;f++) {
      var e = this.internalSkillSet[f], a = a + ('<skill probability="' + e.getLevel() + '"><name>' + e.getSkillName() + "</name>");
      e.hasCategory() && (a += "<category>" + e.getCategory() + "</category>");
      e.hasModelName() && (a += "<model_name>" + e.getModelName() + "</model_name>");
      a += "</skill>";
    }
    return a;
  };
};
CTATSkillSet.prototype = Object.create(CTATBase.prototype);
CTATSkillSet.prototype.constructor = CTATSkillSet;
"undefined" !== typeof module && (module.exports = CTATSkillSet);
function CTATJSONObject(a, b) {
  this.name = a || "";
  this.value = b || null;
}
var transformArray = [], CTATJSON = function() {
  CTATBase.call(this, "CTATJSON", "json");
  var a = null, b = 0;
  this.isJSONObject = function(a) {
    return a.ctat ? !0 : !1;
  };
  this.parse = function(a) {
    return this.parseJSON(a);
  };
  this.parseJSON = function(b) {
    this.ctatdebug("parseJSON ()");
    a = null;
    if ("string" == typeof b) {
      this.ctatdebug("Parsing JSON as a string ... ");
      try {
        a = JSON.parse(b);
      } catch (d) {
        return this.ctatdebug("Error parsing JSON message: " + d.message), a = null;
      }
      this.ctatdebug("Successfully parsed JSON string");
    }
    this.ctatdebug("JSON string has already been parsed, assigning as an object ...");
    for (var e in a) {
      return this.ctatdebug("Creating internal JSON object with name: " + e), b = new CTATJSONObject, b.name = e, b.value = a[e], b;
    }
    return null;
  };
  this.getElementName = function(a) {
    return "object" != typeof a ? (this.ctatdebug("Internal error, the provided element is not of type CTATJSONObject, instead we found: " + typeof a), null) : a.name;
  };
  this.getElementValue = function(a) {
    return null == a ? (this.ctatdebug("Error: anElement is null"), null) : "object" != typeof a ? (this.ctatdebug("Internal error, the provided element is not of type CTATJSONObject, instead we found: " + typeof a), null) : a.value;
  };
  this.getElementChildren = function(a) {
    if (null == a) {
      return this.ctatdebug("Error: anElement is null"), null;
    }
    if ("object" != typeof a) {
      return this.ctatdebug("Internal error, the provided element is not of type CTATJSONObject, instead we found: " + typeof a), null;
    }
    var b = a.value, d = [], c;
    for (c in b) {
      var g = b[c];
      if ("string" == typeof g) {
        a = new CTATJSONObject, a.name = c, a.value = g, d.push(a);
      } else {
        if (null == g[0] || void 0 == g[0]) {
          a = new CTATJSONObject, a.name = c, a.value = g, d.push(a);
        } else {
          for (var h in g) {
            a = new CTATJSONObject, a.name = c, a.value = g[h], d.push(a);
          }
        }
      }
    }
    return d;
  };
  this.getNodeTextValue = function(a) {
    if ("string" != typeof a.value) {
      var b = null;
      for (b in a.value) {
        if ("content" == b) {
          return a.value[b].toString();
        }
      }
      for (b in a.value) {
        if ("value" == b) {
          return a.value[b].toString();
        }
      }
    }
    return a.value;
  };
  this.getElementAttr = function(a, b) {
    var d = a.value, c;
    for (c in d) {
      if (c == b) {
        return d[c];
      }
    }
    return null;
  };
  this.isArray = function(a) {
    return "[object Array]" === Object.prototype.toString.call(a);
  };
  this.walkDOM = function(a) {
    this.ctatdebug("walkDOM () >>>>>>>>>>>>>>>>>>");
    b = 0;
    this.walk(a);
    this.ctatdebug("walkDOM () <<<<<<<<<<<<<<<<<<");
  };
  this.walk = function(a) {
    b++;
    if (!(5 < b)) {
      var e = 0, d;
      for (d in a) {
        var c = a[d];
        this.ctatdebug("(" + e + ") typeof (key): " + typeof d + " -> typeof(value): " + typeof c + "(" + c.length + ")");
        "string" != typeof c ? (this.ctatdebug("walk (" + d + ")"), this.walk(c)) : this.ctatdebug("walk (" + d + ") : " + c);
        e++;
      }
    }
  };
  this.toJSONString = function(a) {
    return JSON.stringify(a, null, 2);
  };
  this.syntaxHighlight = function(a) {
    "string" != typeof a && (a = JSON.stringify(a, void 0, 2));
    a = a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
    return a.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function(a) {
      var b = "number";
      /^"/.test(a) ? b = /:$/.test(a) ? "key" : "string" : /true|false/.test(a) ? b = "boolean" : /null/.test(a) && (b = "null");
      return '<span class="' + b + '">' + a + "</span>";
    });
  };
};
CTATJSON.prototype = Object.create(CTATBase.prototype);
CTATJSON.prototype.constructor = CTATJSON;
"undefined" !== typeof module && (module.exports = CTATJSON);
var CTATMessage = function(a) {
  CTATBase.call(this, "CTATMessage", "message");
  CTATMessage.makeTransactionId = function() {
    return (new CTATGuid).guid();
  };
  var b = a, f = null, e = null;
  void 0 == a && (b = null);
  e = "xml" == CTATConfig.parserType ? new CTATXML : new CTATJSON;
  b && (this.ctatdebug("messageParser " + e + ", messageObj " + b), b.children && this.ctatdebug(b.children));
  var d = "ungraded", c = !1, g = !1, h = new CTATSkillSet, l = "", m = "", q = "", p = "", n = "", x = null, u = !1;
  this.assignSAI = function(a) {
    g = !0;
    x = a;
  };
  this.setTransactionID = function(a) {
    m = a;
  };
  this.getTransactionID = function() {
    return m;
  };
  this.setGradeResult = function(a) {
    d = a;
  };
  this.getGradeResult = function() {
    return d;
  };
  this.getXMLObject = function() {
    return b;
  };
  this.getSkillsObject = function() {
    return h;
  };
  this.getSuccessMessage = function() {
    return q;
  };
  this.getBuggyMsg = function() {
    return p;
  };
  this.getHighlightMsg = function() {
    return n;
  };
  this.parse = function() {
    this.ctatdebug("parse ()");
    if (null !== b) {
      this.ctatdebug("messageParser: " + e);
      this.ctatdebug("Root name: " + e.getElementName(b));
      "tool_message" == e.getElementName(b) ? (this.ctatdebug("Detected tool message"), l = "tool_message") : "message" != e.getElementName(b) ? (this.ctatdebug("Detected log message"), c = !0, l = e.getElementName(b)) : (this.ctatdebug("Detected regular message"), c = !1, this.parseMessageType());
      this.parseTransactionID();
      this.parseSAI();
      for (var a = e.getElementChildren(b), g = 0;g < a.length;g++) {
        var d = a[g];
        "properties" == e.getElementName(d) && (ctatdebug("Found a 'properties' element ... "), f = e.getElementChildren(d));
      }
      this.ctatdebug("Message " + l + ", with transaction id: " + m);
    }
  };
  this.parseSAI = function() {
    this.ctatdebug("parseSAI ()");
    var a = "", d = "", f = "", m = "", u = [], H = [], E = [];
    if ("tool_message" == l) {
      this.ctatdebug("Parsing s, a and i");
      a = e.getElementChildren(b);
      for (d = 0;d < a.length;d++) {
        if (f = a[d], "tool_message" == e.getElementName(f)) {
          for (f = e.getElementChildren(f), m = 0;m < f.length;m++) {
            u = f[m], "event_descriptor" == e.getElementName(u) && (x = new CTATSAI, x.fromXMLInternal(u));
          }
        }
      }
      g = !0;
    } else {
      if (c) {
        this.ctatdebug("isLogMessage ...");
        for (var A = e.getElementChildren(b), y = 0;y < A.length;y++) {
          var r = A[y];
          if ("event_descriptor" == e.getElementName(r)) {
            for (var r = e.getElementChildren(r), G = 0;G < r.length;G++) {
              var F = r[G];
              "selection" == e.getElementName(F) && (a = e.getNodeTextValue(F), u.push(F));
              "action" == e.getElementName(F) && (d = e.getNodeTextValue(F), H.push(F));
              "input" == e.getElementName(F) && (f = e.getNodeTextValue(F), E.push(F));
              "prompt" == e.getElementName(F) && (m = e.getNodeTextValue(F));
            }
          }
        }
      } else {
        for (this.ctatdebug("!isLogMessage ..."), A = e.getElementChildren(b), y = 0;y < A.length;y++) {
          if (r = A[y], "properties" == e.getElementName(r)) {
            for (r = e.getElementChildren(r), G = 0;G < r.length;G++) {
              F = r[G], this.ctatdebug("Nodename: " + e.getElementName(F)), "Skills" == e.getElementName(F) && h.parseByValue(F), "SuccessMsg" == e.getElementName(F) && (q = a = e.getNodeTextValue(F)), "BuggyMsg" == e.getElementName(F) && (p = e.getNodeTextValue(F)), "Selection" == e.getElementName(F) && (a = e.getNodeTextValue(F), u.push(F)), "Action" == e.getElementName(F) && (d = e.getNodeTextValue(F), H.push(F)), "Input" == e.getElementName(F) && (f = e.getNodeTextValue(F), E.push(F)), "prompt" == 
              e.getElementName(F) && (m = e.getNodeTextValue(F)), "HighlightMsgText" == e.getElementName(F) && (n = e.getNodeTextValue(F));
            }
          }
        }
      }
      this.ctatdebug("SAI: " + a + "," + d + "," + f);
      "" !== a && null !== a ? (x = new CTATSAI(a, d, f, m), x.setArrayFromElements(u), x.setArrayFromElements(H), x.setArrayFromElements(E), g = !0) : (this.ctatdebug("No SAI found"), g = !1);
      this.ctatdebug("parseSAI () done, hassai: " + g + ", (" + a + "," + d + "," + f + "," + m + ")");
    }
  };
  this.parseTransactionID = function() {
    this.ctatdebug("parseTransactionID()");
    if ("tool_message" != l) {
      if (!c) {
        for (var a = e.getElementChildren(b), g = 0;g < a.length;g++) {
          var d = a[g];
          if ("properties" == e.getElementName(d)) {
            for (var d = e.getElementChildren(d), f = 0;f < d.length;f++) {
              var h = d[f];
              "transaction_id" == e.getElementName(h) && (m = e.getNodeTextValue(h));
            }
          }
        }
      }
      this.ctatdebug("parseTransactionID() done, id: " + m);
    }
  };
  this.parseMessageType = function() {
    this.ctatdebug("parseMessageType()");
    for (var a = e.getElementChildren(b), c = 0;c < a.length;c++) {
      var g = a[c];
      if ("properties" == e.getElementName(g)) {
        for (var g = e.getElementChildren(g), d = 0;d < g.length;d++) {
          var f = g[d];
          "MessageType" == e.getElementName(f) && (l = e.getNodeTextValue(f));
        }
      }
    }
    this.ctatdebug("parseMessageType() -> " + l);
  };
  this.getMessageType = function() {
    return l;
  };
  this.getTransactionID = function() {
    return m;
  };
  this.getSAI = function() {
    return g ? x : new CTATSAI;
  };
  this.getSelection = function() {
    return g ? x.getSelection() : "";
  };
  this.getAction = function() {
    return g ? x.getAction() : "";
  };
  this.getInput = function() {
    return g ? x.getInput() : "";
  };
  this.getSelectionArray = function() {
    return g ? x.getSelectionArray() : [];
  };
  this.getActionArray = function() {
    return g ? x.getActionArray() : [];
  };
  this.getInputArray = function() {
    return g ? x.getInputArray() : [];
  };
  this.getXML = function() {
    return b;
  };
  this.getXMLString = function(a) {
    if (b.xml) {
      return b.xml;
    }
    if (XMLSerializer) {
      return (new XMLSerializer).serializeToString(b);
    }
    alert("ERROR: Extremely old browser");
    return "";
  };
  this.getIndicator = function() {
    return "AssociatedRules" != l ? "" : this.getProperty("Indicator");
  };
  this.getIndicatorSub = function() {
    return "AssociatedRules" != l ? "" : this.getProperty("IndicatorSub");
  };
  this.setProperty = function(a, b) {
    this.ctatdebug("setProperty (" + a + "," + b + ")");
    if (null !== f) {
      for (var c = 0;c < f.length;c++) {
        e.getElementName(f[c]);
      }
    } else {
      this.ctatdebug("Internal error: no messageProperties object available");
    }
  };
  this.getProperty = function(a) {
    if (!c) {
      if (null !== f) {
        for (var b = 0;b < f.length;b++) {
          var g = f[b];
          if (e.getElementName(g) == a) {
            return e.getNodeTextValue(g);
          }
        }
      } else {
        this.ctatdebug("Internal error: no messageProperties object available");
      }
    }
    return "";
  };
  this.hasProperty = function(a) {
    a = this.getProperty(a);
    return !c && "" !== a;
  };
  this.hasSAI = function() {
    return g;
  };
  this.isEndOfTransaction = function() {
    return "true" == this.getProperty("end_of_transaction") ? !0 : !1;
  };
  this.isLogMessageType = function() {
    return c;
  };
  this.hasStudentSAI = function() {
    return !1;
  };
  this.getStudentSelection = function() {
    return null.getSelection();
  };
  this.getStudentAction = function() {
    return null.getAction();
  };
  this.getStudentInput = function() {
    return null.getInput();
  };
  this.getStudentSAI = function() {
    return null;
  };
  this.getToolSelection = function() {
    return "";
  };
  m = CTATMessage.makeTransactionId();
  this.parse();
  this.init = function(a) {
    this.setMessageType(a);
  };
  this.setSelection = function(a) {
    x && x.setSelection(a);
    this.setProperty("SELECTION", a);
  };
  this.setAction = function(a) {
    x && x.setAction(a);
    this.setProperty("ACTION", a);
  };
  this.setInput = function(a) {
    x && x.setInput(a);
    this.setProperty("INPUT", a);
  };
  this.lockTransactionId = function(a) {
    if (null === a || "undefined" === typeof a || 1 > a.length) {
      throw new CTATExampleTracerException("lockTranactionId() argument " + a + " must be a valid id");
    }
    this.setProperty(CTATMessage.TRANSACTION_ID_TAG, a);
    u = !0;
  };
  this.setMessageType = function(a) {
    this.setProperty(CTATMessage.MESSAGE_TYPE, a);
    l = a;
  };
  this.setTransactionId = function(a) {
    if (!u) {
      if (null === a || "undefined" === typeof a || 1 > a.length) {
        a = CTATMessage.makeTransactionId();
      }
      this.setProperty(CTATMessage.TRANSACTION_ID_TAG, a);
    }
  };
  CTATMessage.create = function(a, b) {
    var c = new CTATMessage;
    c.init(a);
    return c;
  };
};
Object.defineProperty(CTATMessage, "MESSAGE_TYPE", {enumerable:!1, configurable:!1, writable:!1, value:"MessageType"});
Object.defineProperty(CTATMessage, "TRANSACTION_ID_TAG", {enumerable:!1, configurable:!1, writable:!1, value:"transaction_id"});
CTATMessage.prototype = Object.create(CTATBase.prototype);
CTATMessage.prototype.constructor = CTATMessage;
"undefined" !== typeof module && (module.exports = CTATMessage);
CTAT.Component.Base.SAIHandler = function(a, b, f, e, d, c, g) {
  CTAT.Component.Base.Graphical.call(this, a, b, f, e, d, c, g);
  var h = new CTATSAI(this.getName(), CTAT.Component.Base.SAIHandler.DefaultAction, CTAT.Component.Base.SAIHandler.DefaultInput, CTAT.Component.Base.SAIHandler.DefaultPrompt), l = this.setName;
  this.setName = function(a) {
    l(a);
    h.setSelection(this.getName());
  };
  this.getSAI = function() {
    return h;
  };
  this.setSAI = function(a, b, c) {
    a instanceof CTATSAI ? h = a : (a = null === a || void 0 === a ? this.getName() : a, h = new CTATSAI(a, b, c, CTAT.Component.Base.SAIHandler.DefaultPrompt));
    return this;
  };
  this.setInput = function(a) {
    h instanceof CTATSAI ? h.setInput(a) : h = new CTATSAI(this.getName(), CTAT.Component.Base.SAIHandler.DefaultAction, a, CTAT.Component.Base.SAIHandler.DefaultPrompt);
    return this;
  };
  this.setAction = function(a) {
    h instanceof CTATSAI ? h.setAction(a) : h = new CTATSAI(this.getName(), a, CTAT.Component.Base.SAIHandler.DefaultInput, CTAT.Component.Base.SAIHandler.DefaultPrompt);
    return this;
  };
  this.setActionInput = function(a, b) {
    this.setAction(a);
    this.setInput(b);
    return this;
  };
  this.setSelection = function(a) {
    h instanceof CTATSAI ? h.setSelection(a) : h = new CTATSAI(a, CTAT.Component.Base.SAIHandler.DefaultAction, CTAT.Component.Base.SAIHandler.DefaultInput, CTAT.Component.Base.SAIHandler.DefaultPrompt);
  };
  this.updateSAI = function() {
  };
  this.executeSAI = function(a) {
    this.ctatdebug("executeSAI ()");
    var b;
    b = a instanceof CTATMessage ? a.getSAI() : a;
    if (b instanceof CTATSAI) {
      var c = b.getAction();
      this.ctatdebug("Processing " + c + "(" + b.getInput() + ") on: " + b.getSelection());
      if ("function" == typeof this[c]) {
        b = b.getArgumentsTyped();
        this.ctatdebug("JSON args: " + JSON.stringify(b));
        try {
          this.ctatdebug("Executing " + c + "(" + b + "," + typeof a + ")..."), b.push(a), this[c].apply(this, b);
        } catch (g) {
          return this.ctatdebug("ERROR: failed to execute action: " + g.message), !1;
        }
        this.component && (a = new CustomEvent("CTAT_EXECUTE_SAI", {detail:{sai:a, component:this}, bubbles:!0, cancelable:!0}), this.component.dispatchEvent(a));
        return !0;
      }
      this.ctatdebug("ERROR: Unsupported action: " + c + " from " + b.toLSxmlString());
      return !1;
    }
    this.ctatdebug("ERROR: Non-SAI sent to executeSAI(" + typeof a + ")");
    return !1;
  };
};
CTAT.Component.Base.SAIHandler.DefaultAction = "ButtonPressed";
CTAT.Component.Base.SAIHandler.DefaultInput = "-1";
CTAT.Component.Base.SAIHandler.DefaultPrompt = "";
CTAT.Component.Base.SAIHandler.prototype = Object.create(CTAT.Component.Base.Graphical.prototype);
CTAT.Component.Base.SAIHandler.prototype.constructor = CTAT.Component.Base.SAIHandler;
CTAT.Component.Base.Tutorable = function(a, b, f, e, d, c, g) {
  CTAT.Component.Base.SAIHandler.call(this, a, b, f, e, d, c, g);
  var h = !0, l = !0, m = !0, q = CTAT.Component.Base.Tutorable.Options.TutorComponent.TUTOR, p = !0, n = this, x = !1;
  this.setTutorComponent = function(a) {
    q = a;
    a = CTAT.Component.Base.Tutorable.Options.TutorComponent;
    switch(q) {
      case a.TUTOR:
        m = h = l = !0;
        break;
      case a.TUTOR_NO_FEEDBACK:
        h = l = !0;
        m = !1;
        break;
      case a.DO_NOT_TUTOR:
        h = !1, l = !0;
    }
  };
  this.setParameterHandler("tutorComponent", this.setTutorComponent);
  this.data_ctat_handlers.tutor = function(a) {
    h = CTATGlobalFunctions.toBoolean(a);
  };
  this.data_ctat_handlers["show-feedback"] = function(a) {
    m = CTATGlobalFunctions.toBoolean(a);
  };
  this.getTutorComponent = function() {
    var a = CTAT.Component.Base.Tutorable.Options.TutorComponent;
    return h && l && m ? a.TUTOR : h && l && !m ? a.TUTOR_NO_FEEDBACK : !h && l ? a.DO_NOT_TUTOR : q;
  };
  this.getDisableOnCorrect = function() {
    return p;
  };
  this.setDisableOnCorrect = function(a) {
    p = CTATGlobalFunctions.toBoolean(a);
  };
  this.setParameterHandler("DisableOnCorrect", this.setDisableOnCorrect);
  this.data_ctat_handlers["disable-on-correct"] = function(a) {
    p = CTATGlobalFunctions.toBoolean(a);
  };
  var u = !0;
  this.getShowHintHighlight = function() {
    return u;
  };
  this.setShowHintHighlight = function(a) {
    u = CTATGlobalFunctions.toBoolean(a);
  };
  this.setParameterHandler("ShowHintHighlight", this.setShowHintHighlight);
  this.data_ctat_handlers["show-hint-highlight"] = function(a) {
    u = CTATGlobalFunctions.toBoolean(a);
  };
  var w = CTAT.Component.Base.Tutorable.Options.Status.NOTGRADED;
  this.getComponentStatus = function() {
    return w;
  };
  this.setComponentStatus = function(a) {
    w = a;
  };
  this.isCorrect = function() {
    return w === CTAT.Component.Base.Tutorable.Options.Status.CORRECT;
  };
  this.isIncorrect = function() {
    return w === CTAT.Component.Base.Tutorable.Options.Status.INCORRECT;
  };
  this.isNotGraded = function() {
    return w === CTAT.Component.Base.Tutorable.Options.Status.NOTGRADED;
  };
  this.setCorrect = function(a) {
    this.setNotGraded();
    "CTATTableGoogle" != this.getClassName() && this.executeSAI(a);
    w = CTAT.Component.Base.Tutorable.Options.Status.CORRECT;
    !0 === this.getDisableOnCorrect() && this.setEnabled(!1);
    !1 === CTATGlobals.suppressStudentFeedback && m && this.showCorrect(a);
    this.ctatdebug("setCorrect() post showCorrect");
    this.component && (a = new CustomEvent(CTAT.Component.Base.Tutorable.EventType.correct, {detail:{sai:a, component:this}, bubbles:!0, cancelable:!0}), this.component.dispatchEvent(a));
  };
  this.setIncorrect = function(a) {
    this.ctatdebug("setIncorrect()");
    this.setNotGraded();
    "CTATTableGoogle" != this.getClassName() && this.executeSAI(a);
    w = CTAT.Component.Base.Tutorable.Options.Status.INCORRECT;
    !1 === CTATGlobals.suppressStudentFeedback && m && this.showInCorrect(a);
    this.component && (a = new CustomEvent(CTAT.Component.Base.Tutorable.EventType.incorrect, {detail:{sai:a, component:this}, bubbles:!0, cancelable:!0}), this.component.dispatchEvent(a));
  };
  this.setNotGraded = function() {
    this.ctatdebug("setNotGraded ()");
    this.setHintHighlight(!1);
    if (!this.isNotGraded() && (w = CTAT.Component.Base.Tutorable.Options.Status.NOTGRADED, this.removeCorrect(), this.removeInCorrect(), this.component)) {
      var a = new CustomEvent(CTAT.Component.Base.Tutorable.EventType.ungrade, {detail:{component:this}, bubbles:!0, cancelable:!0});
      this.component.dispatchEvent(a);
    }
  };
  this.showHintHighlight = function(a, b) {
    this.component.classList.remove("CTAT--correct");
    this.component.classList.remove("CTAT--incorrect");
    a ? this.component.classList.add("CTAT--hint") : this.component.classList.remove("CTAT--hint");
  };
  this.setHintHighlight = function(a, b) {
    this.ctatdebug("setHintHighlight (" + a + ")");
    if (u) {
      var c = CTATGlobalFunctions.toBoolean(a);
      if (this.component) {
        var g = new CustomEvent(CTAT.Component.Base.Tutorable.EventType.highlight, {detail:{isHighlighted:c, component:this}, bubbles:!0, cancelable:!0});
        this.getComponent().dispatchEvent(g);
      }
      c !== x && (x = c, this.showHintHighlight(c, b));
    }
  };
  this.moveHintHighlight = function(a, b) {
    this.ctatdebug("moveHintHighlight (" + a + ")");
    CTATGlobals.Tab.previousFocus = CTATGlobals.Tab.Focus;
    CTATGlobals.Tab.Focus = n;
    n.component.focus ? CTATGlobals.Tab.Focus.getComponent().focus() : CTATGlobals.Tab.Focus.getDivWrap().focus();
    if (u) {
      var c = CTATGlobalFunctions.toBoolean(a);
      if (this.component) {
        var g = new CustomEvent(CTAT.Component.Base.Tutorable.EventType.highlight, {detail:{isHighlighted:c, component:this}, bubbles:!0, cancelable:!0});
        this.getComponent().dispatchEvent(g);
      }
      c !== x && (x = c, this.showHintHighlight(c, b));
    }
  };
  this.highlight = function(a) {
    console.log("highlight ()");
    this.component.classList.add("CTAT--highlight");
  };
  this.unhighlight = function(a) {
    console.log("unhighlight ()");
    this.component.classList.remove("CTAT--highlight");
  };
  this.showCorrect = function(a) {
    this.ctatdebug("showCorrect(" + a + ")");
    this.getComponent().classList.remove("CTAT--incorrect");
    this.getComponent().classList.remove("CTAT--hint");
    this.getComponent().classList.add("CTAT--correct");
  };
  this.removeCorrect = function() {
    this.getComponent() && this.getComponent().classList.remove("CTAT--correct");
  };
  this.showInCorrect = function(a) {
    this.ctatdebug("showInCorrect(" + incorrectColor + ")");
    this.getComponent().classList.remove("CTAT--correct");
    this.getComponent().classList.remove("CTAT--hint");
    this.getComponent().classList.add("CTAT--incorrect");
  };
  this.removeInCorrect = function() {
    this.getComponent() && this.getComponent().classList.remove("CTAT--incorrect");
  };
  this.resetTutoring = function() {
    this.showHintHighlight(!1);
    this.removeCorrect();
    this.removeInCorrect();
    w = CTAT.Component.Base.Tutorable.Options.Status.NOTGRADED;
  };
  this.grade = function() {
    this.updateSAI();
    this.processAction(!0);
  };
  this.processAction = function(a, b) {
    this.ctatdebug("processAction(" + a + "," + b + ")");
    var c = CTATShellTools.findComponentByClass("CTATDoneButton");
    c && c instanceof CTAT.Component.Base.Tutorable && c != this && c.setNotGraded();
    this.ctatdebug("processAction() finished checking doneButton");
    console.log("Clearing hint window ...");
    commShell.showFeedback(" ");
    a = void 0 === a || null === a ? !1 : a;
    b = void 0 === b || null === b ? !1 : b;
    "" !== this.getComponentGroup() ? CTATShellTools.findComponent(this.getComponentGroup()).forEach(function(a) {
      a.setNotGraded();
    }) : this.setNotGraded();
    this.ctatdebug("processAction() finished setNotGraded");
    commShell && (a ? commShell.processComponentAction(this.getSAI(), !0, !0) : b ? commShell.processComponentAction(this.getSAI(), !1, !0) : commShell.processComponentAction(this.getSAI(), h, l));
    this.ctatdebug("processAction() finished call to commShell.processComponentAction");
    this.component && (c = new CustomEvent(CTAT.Component.Base.Tutorable.EventType.action, {detail:{sai:this.getSAI(), component:this}, bubbles:!0, cancelable:!0}), this.component.dispatchEvent(c));
  };
};
CTAT.Component.Base.Tutorable.Options = {TutorComponent:{TUTOR:"Tutor", TUTOR_NO_FEEDBACK:"Tutor but no visual feedback", DO_NOT_TUTOR:"Do not tutor"}, Status:{CORRECT:"CORRECT", INCORRECT:"INCORRECT", NOTGRADED:"NOTGRADED"}};
CTAT.Component.Base.Tutorable.EventType = {correct:"CTAT_CORRECT", incorrect:"CTAT_INCORRECT", highlight:"CTAT_HIGHLIGHT", ungrade:"CTAT_NOTGRADED", action:"CTAT_ACTION"};
CTAT.Component.Base.Tutorable.prototype = Object.create(CTAT.Component.Base.SAIHandler.prototype);
CTAT.Component.Base.Tutorable.prototype.constructor = CTAT.Component.Base.Tutorable;
CTAT.Component.Base.Clickable = function(a, b, f, e, d, c, g) {
  CTAT.Component.Base.Tutorable.call(this, a, b, f, e, d, c, g);
  var h = this;
  this.processClick = function(a) {
    h.ctatdebug("processClick (" + a.currentTarget.getAttribute("id") + " -> " + a.eventPhase + ")");
    !0 === h.getEnabled() ? h.processAction() : h.ctatdebug("Component is disabled, not grading");
  };
  this.setClickable = function(a) {
    h.setEnabled(a);
  };
};
CTAT.Component.Base.Clickable.prototype = Object.create(CTAT.Component.Base.Tutorable.prototype);
CTAT.Component.Base.Clickable.prototype.constructor = CTAT.Component.Base.Clickable;
var CTATButtonBasedComponent = function(a, b, f, e, d, c, g) {
  CTAT.Component.Base.Clickable.call(this, a, b, f, e, d, c, g);
  var h = this, l = "";
  this.setActionInput("ButtonPressed", "-1");
  this.setImage = function(a) {
    h.ctatdebug("assignImage (" + a + ")");
    a && (h.component.style.backgroundImage = "url('" + a + "')");
  };
  this.assignImage = function(a) {
    h.ctatdebug("assignImage ()");
    h.assignImages(a, a, a, a);
  };
  this.assignImages = function(a, b, c, g) {
    h.ctatdebug("assignImages ()");
    h.getDivWrap().setAttribute("data-ctat-image-hover", a);
    h.getDivWrap().setAttribute("data-ctat-image-clicked", b);
    h.getDivWrap().setAttribute("data-ctat-image-default", c);
    h.getDivWrap().setAttribute("data-ctat-image-disabled", g);
    this.setImage(c);
  };
  this.processBaseMousedown = function() {
    h.ctatdebug("processMousedown ()");
    h.component.classList.add("CTAT-button--clicked");
    var a = h.getDivWrap().getAttribute("data-ctat-image-clicked");
    h.getEnabled() && a && void 0 != a && "" != a && null !== a && (h.getComponent().style.backgroundImage = "url('" + a + "')");
  };
  this.processBaseMouseup = function() {
    h.ctatdebug("processMouseup ()");
    h.component.classList.remove("CTAT-button--clicked");
    var a = h.getDivWrap().getAttribute("data-ctat-image-default");
    h.getEnabled() && a && void 0 != a && "" != a && null !== a && (h.getComponent().style.backgroundImage = "url('" + a + "')");
  };
  this.processBaseMouseover = function() {
    h.ctatdebug("processBaseMouseover ()");
    h.component.classList.add("CTAT-button--hover");
    var a = h.getDivWrap().getAttribute("data-ctat-image-hover");
    h.getEnabled() && a && void 0 != a && "" != a && (h.getComponent().style.backgroundImage = "url('" + a + "')");
  };
  this.processBaseMouseout = function() {
    h.ctatdebug("processBaseMouseout ()");
    h.component.classList.remove("CTAT-button--hover");
    h.component.classList.remove("CTAT-button--clicked");
    var a = h.getDivWrap().getAttribute("data-ctat-image-default");
    h.getEnabled() && a && void 0 != a && "" != a && (h.getComponent().style.backgroundImage = "url('" + a + "')");
  };
  this.setText = function(a) {
    h.ctatdebug("setText (" + a + ")");
    l = a;
    null !== h.getComponent() && (h.getComponent().textContent = l);
  };
  this.setStyleHandler("labelText", this.setText);
  this.getText = function() {
    return l;
  };
  this.processClick = function(a) {
    h.ctatdebug("processClick (" + a.currentTarget.getAttribute("id") + " -> " + a.eventPhase + ")");
    !0 === h.getEnabled() ? (null !== CTATGlobals.Tab.Focus && ("CTATTextArea" == CTATGlobals.Tab.Focus.getClassName() || "CTATTextInput" == CTATGlobals.Tab.Focus.getClassName() || "CTATTextField" == CTATGlobals.Tab.Focus.getClassName() ? CTATGlobals.Tab.Focus.processAction() : h.ctatdebug("Info: CTATGlobals.Tab.Focus==null")), a = $(h.getDivWrap()).attr("value"), h.setInput(a ? a : "-1"), h.processAction()) : h.ctatdebug("Component is disabled, not grading");
  };
  this.ButtonPressed = function() {
  };
};
CTATButtonBasedComponent.prototype = Object.create(CTAT.Component.Base.Clickable.prototype);
CTATButtonBasedComponent.prototype.constructor = CTATButtonBasedComponent;
CTAT.ComponentRegistry = {};
CTAT.ComponentRegistry.addComponentType = function() {
};
Object.defineProperty(CTAT.ComponentRegistry, "addComponentType", {enumerable:!1, value:function(a, b) {
  "string" == typeof a && (this.hasOwnProperty(a) ? alert(a + " is already a registered component") : this[a] = b);
}});
var CTATAudioButton = function(a, b, f, e, d) {
  CTATButtonBasedComponent.call(this, "CTATAudioButton", "audiobutton", a, b, f, e, d);
  var c = this;
  c.setActionInput("play", "-1");
  var g = null, h = "", l = "";
  this.setParameterHandler("SoundFile", function(a) {
    h = a;
  });
  this.data_ctat_handlers.src = function(a) {
    h = a;
  };
  this.ctatdebug("CTATAudioButton (" + this.getX() + "," + this.getY() + "," + this.getWidth() + "," + this.getHeight() + ")");
  this.toHHMMSS = function(a) {
    var b = parseInt(a, 10);
    a = Math.floor(b / 3600);
    var c = Math.floor((b - 3600 * a) / 60), b = b - 3600 * a - 60 * c;
    10 > a && (a = "0" + a);
    10 > c && (c = "0" + c);
    10 > b && (b = "0" + b);
    return a + ":" + c + ":" + b;
  };
  this.init = function() {
    c.ctatdebug("init (" + c.getName() + ")");
    c.setSAI(c.getName(), "ButtonPressed", "-1");
    var a = document.createElement("button");
    a.value = c.getName();
    a.name = c.getName();
    a.setAttribute("id", CTATGlobalFunctions.gensym.div_id());
    a.setAttribute("onkeypress", "return noenter(event)");
    a.textContent = c.getText();
    c.setInitialized(!0);
    c.setComponent(a);
    c.addComponentReference(c, a);
    c.getDivWrap().appendChild(a);
    c.ctatdebug("Final location: " + c.getX() + "," + c.getY() + " with text: " + c.getText());
    c.addSafeEventListener("click", c.processClick, a);
    c.addSafeEventListener("focus", c.processFocus, a);
    g = document.createElement("audio");
    g.addEventListener("canplay", function() {
      c.ctatdebug("Audio loaded and ready for play");
      c.setEnabled(!0);
      "" != l && (c.logAudioEvent(l), l = "");
    }, !0);
    g.onended = function() {
      c.ctatdebug("Audio ended");
      c.logAudioEvent("end");
    };
  };
  this.reset = function() {
    c.configFromDescription();
    c.processSerialization();
    c.setEnabled(!0);
    l = "reset";
  };
  this.logAudioEvent = function(a) {
    c.ctatdebug("logAudioEvent (" + a + ")");
    void 0 != g.duration ? null != commShell ? (a = new CTATSAI(c.getName(), a, c.toHHMMSS(g.currentTime) + ".000", "type", "time"), a.addSelection(g.currentSrc, "type", "media_file"), a.addSelection(c.toHHMMSS(g.duration) + ".000", "type", "clip_length"), commShell.processComponentAction(a, !1, !0, c, "AUDIO_ACTION", "USER")) : c.ctatdebug("Error: commShell is null, can't send untutored tool message") : c.ctatdebug("Error: audio file not loaded yet, can't obtain duration");
  };
  this.ButtonPressed = function() {
    c.ctatdebug("ButtonPressed ()");
  };
  this.processClick = function(a) {
    c.ctatdebug("processClick (" + a.currentTarget.getAttribute("id") + " -> " + a.eventPhase + ")");
    !0 === c.getEnabled() ? (c.ctatdebug("Playing audio file: " + h), g.setAttribute("src", h), g.play(), l = "play", c.processAction()) : c.ctatdebug("Component is disabled, not grading");
  };
  this.play = function() {
    c.ctatdebug("play");
    g.setAttribute("src", h);
    g.load();
    g.play();
    l = "play";
  };
  this.playClip = function(a) {
    c.ctatdebug("playClip");
    g.setAttribute("src", a);
    g.load();
    g.play();
    l = "play";
  };
  this.pause = function() {
    c.ctatdebug("pause");
    g.pause();
    l = "pause";
  };
};
CTATAudioButton.prototype = Object.create(CTATButtonBasedComponent.prototype);
CTATAudioButton.prototype.constructor = CTATAudioButton;
CTAT.ComponentRegistry.addComponentType("CTATAudioButton", CTATAudioButton);
var CTATButton = function(a, b, f, e, d) {
  CTATButtonBasedComponent.call(this, "CTATButton", "aButton", a, b, f, e, d);
  var c = this, g = null;
  this.init = function() {
    c.ctatdebug("init (" + c.getName() + ")");
    c.setActionInput("ButtonPressed", "-1");
    g = document.createElement("button");
    g.type = "button";
    g.name = c.getName();
    g.value = $(this.getDivWrap()).attr("value") || "-1";
    this.setInput(g.value);
    g.id = CTATGlobalFunctions.gensym.div_id();
    g.setAttribute("onkeypress", "return noenter(event)");
    g.classList.add("CTAT-button");
    c.setInitialized(!0);
    if (c.getText()) {
      g.textContent = c.getText();
    } else {
      if (c.getDivWrap() && c.getDivWrap().innerHTML) {
        var a = c.getDivWrap().innerHTML;
        c.getDivWrap().innerHTML = "";
        g.innerHTML = a;
      }
    }
    c.setComponent(g);
    c.addComponentReference(c, g);
    c.getDivWrap().appendChild(g);
    c.ctatdebug("Final location: " + c.getX() + "," + c.getY() + " with text: " + c.getText());
    c.addSafeEventListener("click", c.processClick, g);
    c.addSafeEventListener("focus", c.processFocus, g);
    g.addEventListener("mousedown", this.processBaseMousedown);
    g.addEventListener("mouseup", this.processBaseMouseup);
    g.addEventListener("mouseover", c.processBaseMouseover);
    g.addEventListener("mouseout", c.processBaseMouseout);
  }.bind(this);
  this.render = function() {
  };
  this.reset = function() {
    c.configFromDescription();
    c.processSerialization();
    c.setEnabled(!0);
  };
};
CTATButton.prototype = Object.create(CTATButtonBasedComponent.prototype);
CTATButton.prototype.constructor = CTATButton;
CTAT.ComponentRegistry.addComponentType("CTATButton", CTATButton);
var CTATShellTools = {ctat_base:new CTATBase("CTATShellTools", "shelltools"), component_descriptions:{}, registerComponentDescription:function(a) {
  CTATShellTools.ctat_base.ctatdebug("registerComponentDescription (" + a.name + "," + a.type + ")");
  CTATShellTools.component_descriptions[a.name] = a;
}, listComponents:function() {
  CTATShellTools.ctat_base.ctatdebug("listComponents ()");
  var a = CTATShellTools.component_descriptions, b;
  for (b in a) {
    var f = a[b];
    CTATShellTools.ctat_base.ctatdebug("Obtaining component for " + f.name + " with type: " + f.type);
    f = f.getComponentPointer();
    null !== f ? CTATShellTools.ctat_base.ctatdebug("Component: " + f.getName() + " of instance: " + f.getClassName()) : CTATShellTools.ctat_base.ctatdebug("Error: component pointer is null");
  }
}, feedback_components:[], registerFeedbackComponent:function(a, b, f, e, d) {
  CTATShellTools.feedback_components.push({component:a, next:b, prev:f, showHints:e, showFeedback:d});
}, showNextHint:function() {
  CTATShellTools.feedback_components.forEach(function(a) {
    a.next && a.next.bind(a.component)();
  });
}, showPrevHint:function() {
  CTATShellTools.feedback_components.forEach(function(a) {
    a.prev && a.prev.bind(a.component)();
  });
}, showFeedback:function(a) {
  console.log("showFeedback ()");
  0 == CTATShellTools.feedback_components.length ? CTATScrim.scrim.OKScrimUp(a, null) : CTATShellTools.feedback_components.forEach(function(b) {
    b.showFeedback && b.showFeedback.bind(b.component)(a);
  });
}, showHints:function(a) {
  CTATShellTools.feedback_components.forEach(function(b) {
    b.showHints && b.showHints.bind(b.component)(a);
  });
}, getCurrentMs:function() {
  return (new Date).valueOf();
}, getAllComponents:function() {
  console.log("getAllComponents ()");
  var a = [], b = 0, f;
  for (f in CTAT.ComponentRegistry) {
    console.log(f), $("." + f).each(function() {
      console.log("Pushing component ...");
      a[b] = $(this).data("CTATComponent");
      b++;
    });
  }
  console.log("Found: " + a.length + " instances");
  return a;
}, getNameFromGroup:function(a) {
  CTATShellTools.ctat_base.ctatdebug("getNameFromGroup (" + a + ")");
  var b = a.split(" ");
  return 1 == b.length ? a : b[0].substring(0, b[0].length - 1);
}, findComponent:function(a, b) {
  CTATShellTools.ctat_base.ctatdebug("findComponent(" + a + ")");
  var f = CTATShellTools.component_descriptions, e = [], d = null, d = -1 < a.indexOf(".") ? $('[id="' + a + '"]') : $("#" + a);
  if (0 < d.length) {
    var c = [];
    d.each(function() {
      $(this).data("CTATComponent") && c.push($(this).data("CTATComponent"));
    });
    if (0 < c.length) {
      return c;
    }
  }
  d = $('div[data-ctat-component]:has(input[name="' + a + '"])');
  if (0 < d.length) {
    var g = [];
    d.each(function() {
      $(this).data("CTATComponent") && g.push($(this).data("CTATComponent"));
    });
    if (0 < g.length) {
      return g;
    }
  }
  CTATShellTools.ctat_base.ctatdebug("JQuery couldn't find the component, let's try our internal list ...");
  for (var h in f) {
    d = f[h];
    if (null === d) {
      return CTATShellTools.ctat_base.ctatdebug("Internal error parsing component at index " + h), null;
    }
    if (null === d.name) {
      return CTATShellTools.ctat_base.ctatdebug("Internal error parsing component at index " + h + " (no name attribute available)"), null;
    }
    CTATShellTools.ctat_base.ctatdebug("Comparing " + d.name + " to: " + a);
    if (d.name == a) {
      if (null === d.getComponentPointer()) {
        return CTATShellTools.ctat_base.ctatdebug("Internal error, found a component description for [" + d.name + "], but component pointer is null"), null;
      }
      CTATShellTools.ctat_base.ctatdebug("Found a component description for [" + d.name + "], returning pointer (" + d.getComponentPointer() + ") ...");
      e = [];
      e.push(d.getComponentPointer());
      return e;
    }
    d.groupName == a && (CTATShellTools.ctat_base.ctatdebug("Found the component group (" + d.groupName + "), adding component instance for " + d.name + " ..."), e.push(d.getComponentPointer()));
  }
  return null === e ? (CTATShellTools.ctat_base.ctatdebug("Info (groupArray==null), no appropriate component found, perhaps this is a group component"), -1 != a.indexOf(".") ? (f = a.split("."), this.findComponent(f[0])) : e) : 0 === e.length && (CTATShellTools.ctat_base.ctatdebug("Info (groupArray.length==0), no appropriate component found, perhaps this is a group component"), -1 != a.indexOf(".")) ? (f = a.split("."), this.findComponent(f[0])) : e;
}, findComponentInstance:function(a, b) {
  var f = CTATShellTools.findComponent(a, b);
  return 1 == f.length ? f[0] : f;
}, findComponentByClass:function(a) {
  var b = CTATShellTools.component_descriptions, f;
  for (f in b) {
    var e = b[f];
    if (null === e) {
      return null;
    }
    if (null !== e.getComponentPointer() && e.getComponentPointer().getClassName() == a) {
      return e.getComponentPointer();
    }
  }
  a = $("." + a);
  return 0 < a.length ? a.first().data("CTATComponent") : null;
}};
var CTATCheckBox = function(a, b, f, e, d) {
  CTAT.Component.Base.Clickable.call(this, "CTATCheckBox", "__undefined__", a, b, f, e, d);
  this.setDefaultWidth(100);
  this.setDefaultHeight(22);
  var c = null, g = null, h = null, l = "top";
  this.setStyleHandler("inspBackgroundColor", null);
  this.setStyleHandler("BackgroundColor", null);
  this.setStyleHandler("DrawBorder", null);
  this.setStyleHandler("showBorder", null);
  this.setStyleHandler("BorderColor", null);
  this.setStyleHandler("TextAlign", null);
  var m = this;
  this.setSelection(this.getComponentGroup());
  this.setAction("UpdateCheckBox");
  this.getCheckBox = function() {
    return c;
  };
  this.setCheckBox = function(a) {
    c = a;
  };
  this.getLabelPlacement = function() {
    return l;
  };
  this.setLabelPlacement = function(a) {
    l = String(a);
    if (g && c) {
      switch(l.toLowerCase()) {
        case "left":
          c.style.width = null;
          c.style["float"] = "right";
          break;
        case "bottom":
          c.style["float"] = null;
          c.style.width = "100%";
          break;
        case "top":
          h.appendChild(c);
          c.style["float"] = null;
          c.style.width = "100%";
          break;
        default:
          c.style.width = null, c.style["float"] = null;
      }
    }
  };
  this.setStyleHandler("labelPlacement", this.setLabelPlacement);
  this.data_ctat_handlers["label-placement"] = this.setLabelPlacement;
  var q = function(a) {
    this.updateSAI();
    this.processClick(a);
  };
  this.init = function() {
    m.setInitialized(!0);
    h = document.createElement("div");
    c = document.createElement("input");
    c.type = "checkbox";
    c.setAttribute("id", CTATGlobalFunctions.gensym.div_id());
    c.classList.add("CTAT-checkbox-button");
    this.getText() ? c.value = m.getText() : this.getDivWrap() && this.getDivWrap().textContent ? c.value = this.getDivWrap().textContent : c.value = c.id;
    this.getComponentGroup() ? c.name = m.getComponentGroup() : this.getDivWrap() && $(this.getDivWrap()).attr("name") ? c.name = $(this.getDivWrap()).attr("name") : c.name = "checkBoxGroup";
    m.assignEnabled(!0);
    !0 === m.getEnabled() ? c.disabled = !1 : c.disabled = !0;
    m.ctatdebug("Final location: " + m.getX() + "," + m.getY() + " with text: " + m.getText());
    m.addComponentReference(m, c);
    var a = this.getDivWrap().innerHTML;
    this.getDivWrap().innerHTML = "";
    m.getDivWrap().appendChild(h);
    g = document.createElement("label");
    g.htmlFor = c.id;
    this.getText() ? g.textContent = this.getText() : a && (g.innerHTML = a);
    m.setComponent(h);
    m.setLabel(g);
    h.appendChild(c);
    h.appendChild(g);
    h.classList.add("CTAT-checkbox");
    c.addEventListener("click", q.bind(this));
    c.addEventListener("focus", m.processFocus);
    c.onfocus = this.processOnFocus;
    this.setSelection(this.getComponentGroup());
  };
  var p = this.setText;
  this.setText = function(a) {
    m.ctatdebug("setText (" + a + ")");
    p(a);
    h && (c.value = a, g.textContent = a);
  };
  this.setStyleHandler("labelText", this.setText);
  var n = this.setEnabled;
  this.setEnabled = function(a) {
    n(a);
    c && (c.disabled = !this.getEnabled());
  };
  this.getCheckBoxInput = function() {
    return g.innerHTML + ": " + c.checked;
  };
  this.reset = function() {
    c.checked = !1;
    m.setEnabled(!0);
    m.setLabelPlacement(l);
  };
  this.UpdateCheckBox = function(a) {
    c.checked = 0 <= a.search(new RegExp("(^|;)" + g.innerHTML + "\\s*:\\s*true"));
  };
  this.SetSelected = function(a) {
    a = CTATGlobalFunctions.toBoolean(a);
    c.checked = a;
  };
  this.updateSAI = function() {
    var a = $('div[data-ctat-component]:has(input[type="checkbox"][name="' + c.name + '"])').sort(function(a, b) {
      var c = a.id, g = b.id;
      return c > g ? 1 : c < g ? -1 : 0;
    }), a = $.map(a, function(a) {
      a = $(a).data("CTATComponent").getCheckBox();
      return a.value + ": " + a.checked;
    });
    this.setSelection(c.name);
    this.setInput(a.join(";"));
  };
  var x = function(a) {
    g.classList.add(a);
    c.classList.add(a);
  }, u = function(a) {
    g.classList.remove(a);
    c.classList.remove(a);
  };
  this.showCorrect = function(a) {
    u("CTAT--incorrect");
    u("CTAT--hint");
    x("CTAT--correct");
  };
  this.removeCorrect = u.bind(this, "CTAT--correct");
  this.showInCorrect = function(a) {
    u("CTAT--correct");
    u("CTAT--hint");
    x("CTAT--incorrect");
  };
  this.removeInCorrect = u.bind(this, "CTAT--incorrect");
  this.showHintHighlight = function(a) {
    u("CTAT--incorrect");
    u("CTAT--correct");
    a ? x("CTAT--hint") : u("CTAT--hint");
  };
};
CTATCheckBox.prototype = Object.create(CTAT.Component.Base.Clickable.prototype);
CTATCheckBox.prototype.constructor = CTATCheckBox;
CTAT.ComponentRegistry.addComponentType("CTATCheckBox", CTATCheckBox);
var CTATComboBox = function(a, b, f, e, d) {
  CTAT.Component.Base.Clickable.call(this, "CTATComboBox", "__undefined__", a, b, f, e, d);
  this.setDefaultWidth(100);
  this.setDefaultHeight(22);
  var c = this, g = null;
  this.setAction("UpdateComboBox");
  var h = ",";
  a = function(a) {
    h = a;
    g && (g.innerHTML = "", this.addLabels(l, h));
  }.bind(this);
  this.setStyleHandler("SplitCharacter", a);
  this.data_ctat_handlers["split-on"] = a;
  var l = null;
  this.setLabels = function(a) {
    l = a;
    g && (g.innerHTML = "", this.addLabels(l, h));
  }.bind(this);
  this.setStyleHandler("Labels", this.setLabels);
  this.data_ctat_handlers.labels = this.setLabels;
  var m = null;
  a = function(a) {
    a = parseInt(a);
    m = isNaN(a) ? null : a;
    g && g.setAttribute("size", m);
  };
  this.setStyleHandler("DropDownSize", a);
  this.data_ctat_handlers.size = a;
  this.setStyleHandler("DropDownWidth", null);
  this.init = function() {
    c.setInitialized(!0);
    g = document.createElement("select");
    g.name = c.getName();
    g.setAttribute("id", CTATGlobalFunctions.gensym.div_id());
    g.setAttribute("onkeypress", "return noenter(event)");
    g.onchange = this.processComboSelection;
    g.classList.add("CTAT-combobox");
    m && g.setAttribute("size", m);
    var a = this.getDivWrap().innerHTML;
    console.log('content:"', a.trim(), '"');
    this.getDivWrap().innerHTML = "";
    a.trim() && (g.innerHTML = a);
    l && this.addLabels(l, h);
    c.assignEnabled(!0);
    !0 === c.getEnabled() ? g.disabled = !1 : g.disabled = !0;
    c.ctatdebug("Final location: " + c.getX() + "," + c.getY() + " with text: " + c.getText());
    c.addComponentReference(c, g);
    c.setComponent(g);
    c.getDivWrap().appendChild(g);
    c.render();
    g.addEventListener("focus", c.processFocus);
  };
  this.getHTMLComponent = function() {
    return g;
  };
  this.addLabels = function(a, b) {
    for (var c = a.split(b ? b : h), g = 0;g < c.length;g++) {
      this.addItem(c[g]);
    }
  };
  this.addItem = function(a) {
    c.ctatdebug("addItem (" + a + ")");
    var b = document.createElement("option");
    b.setAttribute("value", a);
    b.textContent = a;
    b.classList.add("CTAT-combobox--option");
    g.appendChild(b);
  };
  this.valid_selection = function() {
    return 0 <= g.selectedIndex && !CTATGlobalFunctions.isBlank(g.value);
  };
  this.processComboSelection = function() {
    c.ctatdebug("processComboSelection ()");
    c.setInput(g.options[g.selectedIndex].value);
    c.valid_selection() ? c.processAction() : this.ctatdebug("Empty component, nothing to grade");
  };
  this.UpdateComboBox = function(a) {
    g.value = a;
  };
  this.updateSAI = function() {
    c.setInput(g.value);
  };
};
CTATComboBox.prototype = Object.create(CTAT.Component.Base.Clickable.prototype);
CTATComboBox.prototype.constructor = CTATComboBox;
CTAT.ComponentRegistry.addComponentType("CTATComboBox", CTATComboBox);
var CTATConnectionBase = function(a, b) {
  CTATBase.call(this, "CTATConnectionBase", "ctatconnection");
  var f = -1, e = "", d = "http";
  this.setURL = function(a) {
    e = a;
  };
  this.getURL = function() {
    return e;
  };
  this.setID = function(a) {
    f = a;
  };
  this.getID = function() {
    return f;
  };
  this.setSocketType = function(a) {
    d = a;
  };
  this.getSocketType = function() {
    return d;
  };
};
CTATConnectionBase.prototype = Object.create(CTATBase.prototype);
CTATConnectionBase.prototype.constructor = CTATConnectionBase;
var CTATConnection = function(a) {
  CTATConnectionBase.call(this, "CTATConnection");
  var b = null, f = null, e = !1, d = this, c = "text/plain";
  d.setSocketType("http");
  this.setContentType = function(a) {
    c = a;
  };
  this.getContentType = function() {
    return c;
  };
  this.setConsumed = function(a) {
    e = a;
    d.ctatdebug("consumed: " + e);
  };
  this.getConsumed = function() {
    d.ctatdebug("consumed: " + e);
    return e;
  };
  this.assignReceiveFunction = function(a) {
    f.onreadystatechange = a;
  };
  this.setData = function(a) {
    b = a;
  };
  this.getData = function() {
    return b;
  };
  this.getHTTPObject = function() {
    return f;
  };
  this.createHTTPObject = function() {
    d.ctatdebug("createHTTPObject ()");
    f = new XMLHttpRequest;
    if (window.XMLHttpRequest) {
      d.ctatdebug("Creating regular XMLHttpRequest ..."), f = new XMLHttpRequest, f.overrideMimeType && f.overrideMimeType("text/html");
    } else {
      if (d.ctatdebug("Trying alternative HTTP object creation ..."), window.ActiveXObject) {
        d.ctatdebug("Detected window.ActiveXObject ...");
        try {
          d.ctatdebug("Creating Msxml2.XMLHTTP ..."), f = new ActiveXObject("Msxml2.XMLHTTP");
        } catch (a) {
          try {
            d.ctatdebug("Creating Microsoft.XMLHTTP ..."), f = new ActiveXObject("Microsoft.XMLHTTP");
          } catch (b) {
            alert("Error: Unable to create HTTP Request Object: " + b.message);
          }
        }
      } else {
        alert("Internal error: an HTTP connection object could not be created");
      }
    }
  };
  this.init = function() {
    d.ctatdebug("init ()");
    if (null !== f) {
      var b = flashVars ? flashVars.getRawFlashVars() : a, b = b.session_id ? b.session_id : "dummySession";
      "dummySession" == b && d.ctatdebug("Unable to find CTAT session information from environment, trying OLI ...");
      try {
        f.setRequestHeader("Content-type", c), f.setRequestHeader("ctatsession", b);
      } catch (e) {
        alert("HTTP object creation error: " + e.message);
      }
    } else {
      alert("Internal error: http object is null right after creation");
    }
    d.ctatdebug("init () done");
  };
  this.send = function() {
    d.ctatdebug("send ()");
    d.getHTTPObject().onerror = function() {
      d.ctatdebug("Networking error!");
    };
    try {
      d.getHTTPObject().open("POST", d.getURL(), !0);
    } catch (a) {
      d.ctatdebug("Error in newConnection.httpObject.open: " + a.message);
      return;
    }
    d.init();
    try {
      b ? d.getHTTPObject().send(b) : d.getHTTPObject().send();
    } catch (a) {
      this.ctatdebug("Error in newConnection.httpObject.send: " + a.message);
    }
  };
  d.createHTTPObject();
};
CTATConnection.prototype = Object.create(CTATConnectionBase.prototype);
CTATConnection.prototype.constructor = CTATConnection;
var CTATWSConnection = function(a) {
  CTATConnectionBase.call(this, "CTATWSConnection");
  var b = "", f = !1, e = this, d = null, c = [], g = !1, h = 0, l = 0, m = null, q = null;
  e.setSocketType("ws");
  this.setConsumed = function(a) {
    f = a;
    e.ctatdebug("consumed: " + f);
  };
  this.getConsumed = function() {
    e.ctatdebug("consumed: " + f);
    return f;
  };
  this.assignReceiveFunction = function(a) {
    m = a;
  };
  this.assignCloseFunction = function(a) {
    q = a;
  };
  this.setData = function(a) {
    b = a;
  };
  this.getData = function() {
    return b;
  };
  this.init = function() {
    e.ctatdebug("init (" + e.getURL() + "); websocket " + d);
    null == d && (d = new WebSocket(e.getURL()), d.addEventListener("open", function(a) {
      e.ctatdebug("STATUS: open");
      g = !0;
      e.ctatdebug("Connection open, flushing outgoing queue ...");
      h = (new Date).getTime();
      if (0 < c.length) {
        for (a = 0;a < c.length;a++) {
          d.send(c[a]);
        }
        c = [];
      }
    }), d.addEventListener("message", function(a) {
      l = (new Date).getTime();
      e.ctatdebug("STATUS: message after " + (l - h) + " ms");
      e.ctatdebug("Received: " + a.data);
      m ? m(a.data) : e.ctatdebug("Error: no processing function provided");
    }), d.addEventListener("close", function(a) {
      e.ctatdebug("STATUS: close; " + (a ? "code " + a.code + ", reason " + a.reason : "no event"));
      g = !1;
      d.close(1E3, a ? a.reason ? a.reason : "received close code " + a.code : "no close event received");
      q && q(a);
    }), d.addEventListener("error", function(a) {
      e.ctatdebug("STATUS: error; " + (a ? a.type : "no event"));
      g = !1;
      d.close(1E3, "client closing in response to error");
    }), e.ctatdebug("init () done"));
  };
  this.send = function() {
    e.ctatdebug("send ()");
    e.init();
    !1 === g ? (e.ctatdebug("Connection not ready yet, storing ..."), c.push(b)) : (e.ctatdebug("Connection ready, sending data ..."), h = (new Date).getTime(), d.send(b));
  };
};
CTATWSConnection.prototype = Object.create(CTATConnectionBase.prototype);
CTATWSConnection.prototype.constructor = CTATWSConnection;
var CTATCanvasComponent = function(a) {
  var b = this, f = [];
  this.addShape = function(a) {
    f.push(a);
  };
  this.hideShape = function(a) {
    for (var b = 0;b < f.length;b++) {
      if (f[b].getName() == a) {
        f[b].modifyCanvasCSS("visibility", "hidden");
        break;
      }
    }
  };
  this.showShape = function(a) {
    for (var b = 0;b < f.length;b++) {
      if (f[b].getName() == a) {
        f[b].modifyCanvasCSS("visibility", "visible");
        break;
      }
    }
  };
  this.hideComponent = function() {
    for (var a = 0;a < f.length;a++) {
      f[a].modifyCanvasCSS("visibility", "hidden");
    }
  };
  this.showComponent = function() {
    for (var a = 0;a < f.length;a++) {
      f[a].modifyCanvasCSS("visibility", "visible");
    }
  };
  this.moveShape = function(a, b, c) {
    for (var g = 0;g < f.length;g++) {
      if (f[g].getName() == a) {
        f[g].modifyCanvasCSS("left", b + "px");
        f[g].modifyCanvasCSS("top", c + "px");
        break;
      }
    }
  };
  this.moveComponent = function(a, b) {
    for (var c = 0;c < f.length;c++) {
      f[c].modifyCanvasCSS("left", a + "px"), f[c].modifyCanvasCSS("top", b + "px");
    }
  };
  this.removeShape = function(a) {
    for (var b = 0, c = 0;c < f.length;c++) {
      if (f[c].getName() == a) {
        b = c;
        break;
      }
    }
    f[b].detatchCanvas();
    f.splice(b, 1);
  };
  this.removeComponent = function() {
    for (;0 < f.length;) {
      b.removeShape(f[0].getName());
    }
  };
};
var CTATGraphicsTools = function(a, b, f, e, d, c) {
  CTATBase.call(this, "CTATGraphicsTools", "__undefined__");
  var g = b || 1, h = f || "#000000", l = e || "#EEEEEE", m = d || !1, q = "Arial", p = a || null;
  a = c || !1;
  var n = 0, x = this;
  if (null == p) {
    return x.ctatdebug("--- Error: Must pass a canvas context. ---"), -1;
  }
  0 == a && (n = .5);
  this.getGraphicBorderWidth = function() {
    return g;
  };
  this.setGraphicBorderWidth = function(a) {
    g = a;
  };
  this.setFont = function(a) {
    q = a;
  };
  this.setFontSize = function(a) {
    x.fontSize = a;
  };
  this.getLineColor = function() {
    return h;
  };
  this.getFillColor = function() {
    return l;
  };
  this.getFillShape = function() {
    return m;
  };
  this.setLineColor = function(a) {
    h = a;
  };
  this.setFillColor = function(a) {
    l = a;
  };
  this.setFillShape = function(a) {
    m = a;
  };
  this.getFont = function() {
    return q;
  };
  this.getFontSize = function() {
    return x.fontSize;
  };
  this.magicTrigFunctionX = function(a) {
    return Math.cos(2 * a * Math.PI);
  };
  this.magicTrigFunctionY = function(a) {
    return Math.sin(2 * a * Math.PI);
  };
  this.drawLine = function(a, b, c, g, e, d) {
    null == p && x.ctatdebug("Error: canvas canvasCtx is NULL in drawLine");
    a += n;
    c += n;
    b += n;
    g += n;
    p.lineWidth = d;
    p.strokeStyle = e;
    p.beginPath();
    p.moveTo(a, b);
    p.lineTo(c, g);
    p.stroke();
  };
  this.drawCircle = function(a, b, c) {
    null == p && x.ctatdebug("Error: canvas canvasCtx is NULL in drawCircle");
    a += n;
    b += n;
    p.strokeStyle = h;
    p.lineWidth = g;
    p.beginPath();
    p.arc(a, b, c, 0, 2 * Math.PI);
    p.stroke();
  };
  this.drawCircleFilled = function(a, b, c) {
    null == p && x.ctatdebug("Error: canvas canvasCtx is NULL in drawCircleFilled");
    a += n;
    b += n;
    p.fillStyle = l;
    p.beginPath();
    p.arc(a, b, c, 0, 2 * Math.PI);
    p.fill();
  };
  this.drawRectangle = function(a, b, c, e) {
    null == p && x.ctatdebug("Error: canvas canvasCtx is NULL in drawRectangle");
    a += n;
    b += n;
    p.lineWidth = g;
    1 == m ? (p.fillStyle = l, p.fillRect(a, b, c, e)) : (p.strokeStyle = h, p.beginPath(), p.rect(a, b, c, e), p.stroke());
  };
  this.drawRectangleFilled = function(a, b, c, g) {
    null == p && x.ctatdebug("Error: canvas canvasCtx is NULL in drawRectangleFilled");
    a += n;
    b += n;
    p.fillStyle = l;
    p.fillRect(a, b, c, g);
  };
  this.drawRoundedRect = function(a, b, c, e, d) {
    a += n;
    b += n;
    null != p && (p.strokeStyle = h, p.lineWidth = g, p.beginPath(), p.moveTo(a, b + d), p.lineTo(a, b + e - d), p.quadraticCurveTo(a, b + e, a + d, b + e), p.lineTo(a + c - d, b + e), p.quadraticCurveTo(a + c, b + e, a + c, b + e - d), p.lineTo(a + c, b + d), p.quadraticCurveTo(a + c, b, a + c - d, b), p.lineTo(a + d, b), p.quadraticCurveTo(a, b, a, b + d), p.stroke());
  };
  this.drawRoundedRectFilled = function(a, b, c, e, d) {
    a += n;
    b += n;
    null != p && (p.strokeStyle = h, p.lineWidth = g, p.beginPath(), p.moveTo(a, b + d), p.lineTo(a, b + e - d), p.quadraticCurveTo(a, b + e, a + d, b + e), p.lineTo(a + c - d, b + e), p.quadraticCurveTo(a + c, b + e, a + c, b + e - d), p.lineTo(a + c, b + d), p.quadraticCurveTo(a + c, b, a + c - d, b), p.lineTo(a + d, b), p.quadraticCurveTo(a, b, a, b + d), p.stroke(), p.fillStyle = l, p.beginPath(), p.moveTo(a, b + d), p.lineTo(a, b + e - d), p.quadraticCurveTo(a, b + e, a + d, b + e), p.lineTo(a + 
    c - d, b + e), p.quadraticCurveTo(a + c, b + e, a + c, b + e - d), p.lineTo(a + c, b + d), p.quadraticCurveTo(a + c, b, a + c - d, b), p.lineTo(a + d, b), p.quadraticCurveTo(a, b, a, b + d), p.fill());
  };
  this.drawText = function(a, b, c) {
    if (null != p) {
      a += n;
      b += n;
      try {
        p.fillStyle = h, p.font = q + " 12pt", p.fillText(c, a, b);
      } catch (g) {
        throw alert(incompatibleBrowserMessage), Error("Browser does not support fillText");
      }
    }
  };
  this.drawTextFormatted = function(a, b, c, g, e, d, f, h, l, m) {
    if (null != p) {
      a += n;
      b += n;
      g = "";
      1 == h && (g += "italic ");
      1 == f && (g += "bold ");
      g += "12pt " + q;
      try {
        p.fillStyle = d, p.font = g, p.fillText(c, a, b);
      } catch (x) {
        throw alert(incompatibleBrowserMessage), Error("Browser does not support fillText");
      }
    }
  };
  this.drawTriangle = function(a, b, c, e, d, f) {
    null == p && x.ctatdebug("Error: canvas canvasCtx is NULL in drawTriangle");
    a += n;
    c += n;
    d += n;
    b += n;
    e += n;
    f += n;
    p.fillStyle = h;
    p.lineWidth = g;
    p.beginPath();
    p.moveTo(a, b);
    p.lineTo(c, e);
    p.lineTo(d, f);
    p.lineTo(a, b);
    p.stroke();
  };
  this.drawTriangleFilled = function(a, b, c, e, d, f) {
    null == p && x.ctatdebug("Error: canvas canvasCtx is NULL in drawTriangleFilled");
    a += n;
    c += n;
    d += n;
    b += n;
    e += n;
    f += n;
    p.fillStyle = l;
    p.lineWidth = g;
    p.beginPath();
    p.moveTo(a, b);
    p.lineTo(c, e);
    p.lineTo(d, f);
    p.lineTo(a, b);
    p.fill();
  };
  this.save = function() {
    p.save();
  };
  this.restore = function() {
    p.restore();
  };
  this.clip = function() {
    p.clip();
  };
  this.clearCanvas = function(a, b, c, g) {
    "ctat" == CTATConfig.platform && p.clearRect(a, b, c, g);
  };
};
CTATGraphicsTools.prototype = Object.create(CTATBase.prototype);
CTATGraphicsTools.prototype.constructor = CTATGraphicsTools;
var CTATShape = function(a, b, f, e, d, c) {
  var g = this;
  if (void 0 == a || null == a) {
    return g.ctatdebug("--- Error: Must pass a valid ID. ---"), null;
  }
  var h = [], l = [], m = d, q = c, p = b, n = void 0, x = "black", u = "black", w = "Arial", z = 12, t = [], D = 1, C = 5, H = document.createElement("canvas");
  H.id = p;
  H.width = m;
  H.height = q;
  var E = new CTATCSS;
  E.addCSSAttribute("position", "absolute");
  E.addCSSAttribute("left", f + "px");
  E.addCSSAttribute("top", e + "px");
  E.addCSSAttribute("visibility", "visible");
  E.addCSSAttribute("background-color", "rgba(0, 0, 0, 0)");
  E.addCSSAttribute("border-style", "none");
  H.setAttribute("style", E.toCSSString());
  getSafeElementById(a).appendChild(H);
  var A = new CTATGraphicsTools(H.getContext("2d"));
  A.setGraphicBorderWidth(D);
  A.setLineColor(x);
  A.setFillColor(u);
  this.getXOffset = function() {
    return f + h[0];
  };
  this.getYOffset = function() {
    return e + l[0];
  };
  this.addPoint = function(a, b) {
    h.push(a);
    l.push(b);
  };
  this.getName = function() {
    return p;
  };
  this.getXPoint = function(a) {
    return h[a];
  };
  this.getYPoint = function(a) {
    return l[a];
  };
  this.getWidth = function() {
    return m;
  };
  this.getHeight = function() {
    return q;
  };
  this.getName = function() {
    return p;
  };
  this.getData = function() {
    return n;
  };
  this.getColor = function() {
    return u;
  };
  this.getRadius = function() {
    return C;
  };
  this.getTextFont = function() {
    return w;
  };
  this.getTextSize = function() {
    return z;
  };
  this.getLineColor = function() {
    return x;
  };
  this.getFillColor = function() {
    return u;
  };
  this.setXPoints = function(a) {
    h = a;
    E.modifyCSSAttribute("left", h[0] + "px");
    H.setAttribute("style", E.toCSSString());
  };
  this.setYPoints = function(a) {
    l = a;
    E.modifyCSSAttribute("top", l[0] + "px");
    H.setAttribute("style", E.toCSSString());
  };
  this.setWidth = function(b) {
    m = b;
    "main-canvas" != a && (H.width = m);
  };
  this.setHeight = function(b) {
    q = b;
    "main-canvas" != a && (H.height = q);
  };
  this.setName = function(a) {
    p = a;
  };
  this.setData = function(a) {
    n = a;
  };
  this.setFillColor = function(a) {
    u = a;
    A.setFillColor(a);
  };
  this.setLineColor = function(a) {
    x = a;
    A.setLineColor(a);
  };
  this.setDrawWidth = function(a) {
    D = a;
    A.setGraphicBorderWidth(D);
  };
  this.setRadius = function(a) {
    C = a;
  };
  this.setColor = function(a) {
    u = x = a;
    A.setLineColor(x);
    A.setFillColor(u);
  };
  this.setTextFont = function(a) {
    w = a;
    A.setFont(w);
  };
  this.setTextSize = function(a) {
    z = a;
    A.setFontSize(z);
  };
  this.modifyCanvasCSS = function(a, b) {
    E.modifyCSSAttribute(a, b);
    H.setAttribute("style", E.toCSSString());
  };
  this.detatchCanvas = function() {
    a == ctatcontainer ? getSafeElementById(a).removeChild(H) : getSafeElementById("ctatdiv" + a).removeChild(H);
  };
  this.shapeMagicTrigFunctionX = function(a) {
    A.magicTrigFunctionX(a);
  };
  this.shapeMagicTrigFunctionY = function(a) {
    A.magicTrigFunctionY(a);
  };
  this.drawLine = function() {
    A.drawLine(h[0] + D, l[0] + D, h[1], l[1], x, D);
  };
  this.drawCircle = function() {
    A.drawCircle(h[0] + C, l[0] + C, C);
  };
  this.drawCircleFilled = function() {
    A.drawCircleFilled(h[0] + C, l[0] + C, C - 1);
  };
  this.drawRectangle = function(a, b, c, g) {
    A.drawRectangle(a[0] + D, b[0] + D, m - D, q - D);
  };
  this.drawRectangleFilled = function() {
    A.drawRectangleFilled(h[0], l[0], m, q);
  };
  this.drawRoundedRect = function() {
    A.drawRoundedRect(h[0] + D, l[0] + D, m - C - D, q - C - D, C);
  };
  this.drawRoundedRectFilled = function() {
    A.drawRoundedRectFilled(h[0] + D, l[0] + D, m - C - D, q - C - D, C);
  };
  this.drawText = function() {
    A.drawText(z / 2, z / 2, n);
  };
  this.drawTriangle = function() {
    A.drawTriangle(h[0] + D, l[0] + D, h[1], l[1], h[2], l[2]);
  };
  this.drawTriangleFilled = function() {
    A.drawTriangleFilled(h[0], l[0], h[1], l[1], h[2], l[2]);
  };
  this.save = function() {
    A.save();
  };
  this.restore = function() {
    A.restore();
  };
  this.clip = function() {
    A.clip();
  };
  this.erase = function() {
    g.detatchCanvas();
    h = [];
    l = [];
    H = document.createElement("canvas");
    H.id = p;
    H.width = m;
    H.height = q;
    E = new CTATCSS;
    E.addCSSAttribute("position", "absolute");
    E.addCSSAttribute("left", f + "px");
    E.addCSSAttribute("top", e + "px");
    E.addCSSAttribute("visibility", "visible");
    E.addCSSAttribute("background-color", "rgba(0, 0, 0, 0)");
    E.addCSSAttribute("border-style", "none");
    H.setAttribute("style", E.toCSSString());
    a == ctatcontainer ? getSafeElementById(a).appendChild(H) : getSafeElementById("ctatdiv" + a).appendChild(H);
    for (var b = 0;b < t.length;b++) {
      H.addEventListener(t[b][0], t[b][1]);
    }
  };
};
var CTATDefaultLangagePack = {HORIZONTAL:"LR", VERTICAL:"TB", LOADING:"Please wait while the tutor is being loaded", NEXTPROBLEM:"Retrieving the Next Problem...", TUTORDISCONNECTED:"The tutor has disconnected. Please refresh the page.", OUTOFORDER:"You need to do other steps first, before doing the step you just worked on. You might request a hint for more help.", DONE:"Done", HINT:"Hint", NEXT:"Next", PREVIOUS:"Previous", HIGHLIGHTEDSTEP:"Instead of the step you are working on, please work on the highlighted step.", 
NOTDONE:"I'm sorry, but you are not done yet. Please continue working.", AUTHORPLEASECLOSE:"Authoring Tools disconnected. Please close this page."}, CTATLanguageManager = function() {
  CTATBase.call(this, "CTATLanguageManager", "theLanguagePack");
  var a = this;
  this.getString = function(b) {
    a.ctatdebug("getString (" + b + ")");
    return "undefined" !== typeof CTATLanguagePack && CTATLanguagePack[b] ? CTATLanguagePack[b] : CTATDefaultLangagePack[b];
  };
  this.filterString = function(b) {
    a.ctatdebug("filterString (" + b + ")");
    return "undefined" !== typeof CTATLanguagePack && CTATLanguagePack[b] ? (a.ctatdebug("Found tag in provided language pack, returning: " + CTATLanguagePack[b]), CTATLanguagePack[b]) : "undefined" !== typeof CTATDefaultLangagePack && CTATDefaultLangagePack[b] ? (a.ctatdebug("Found tag in default language pack, returning: " + CTATDefaultLangagePack[b]), CTATDefaultLangagePack[b]) : b;
  };
};
CTATLanguageManager.prototype = Object.create(CTATBase.prototype);
CTATLanguageManager.prototype.constructor = CTATLanguageManager;
CTATLanguageManager.theSingleton = new CTATLanguageManager;
var scrimIsUp = !1, errorScrim = !1, waitScrim = !0, warnScrim = !1, connectionScrim = !1, authorTimeSet = !0, inAuthorTime = !0, CTATScrim = function() {
  function a() {
    warnScrim = !1;
    w.scrimDown();
  }
  function b(a) {
    "google" != CTATConfig.platform && (1 == scrimIsUp && w.scrimDownForced(), w.ctatdebug("errScrimUp (" + a + ")"), 1 == errorScrim ? 1 == g && (g = !1, getSafeElementById(ctatcontainer).removeChild(x)) : 1 == warnScrim && (g = !0), w.scrimUp(a));
  }
  function f(a, b) {
    w.ctatdebug("makeHTMLButton ()");
    var c = document.createElement("input");
    c.type = "button";
    c.value = b;
    null != a ? (w.ctatdebug("clickHandle!=null"), c.onclick = a) : (w.ctatdebug("clickHandle==null"), c.onclick = w.defaultClickHandler);
    c.id = b;
    c.setAttribute("class", "scrimButton");
    return c;
  }
  CTATBase.call(this, "CTATScrim", "__undefined__");
  var e = "", d = !1, c = !1, g = !1, h = null, l = null, m = new CTATCanvasComponent("CTAT Scrim"), q = [], p = null, n = null, x = null, u = null, w = this;
  this.scrimUp = function(b) {
    if ("google" != CTATConfig.platform) {
      if (w.ctatdebug("scrimUp ()"), b = CTATGlobals.languageManager.filterString(b), w.ctatdebug("Message: " + b), 1 == scrimIsUp ? (e = 1 == waitScrim ? b : e + (" \n " + b), m.removeComponent()) : (e = b, scrimIsUp = !0), w.ctatdebug("drawScrim ()"), "google" == CTATConfig.platform) {
        w.ctatdebug("This is not available for now when we're in this environment");
      } else {
        if ($('<div id="scrim" class="ctatpageoverlay"></div>').appendTo("body"), $("#scrim").css("z-index", 1E3), "google" != CTATConfig.platform && ($("#scrim").append('<div class="css3-windows-7"><div class="fenster"><h4 class="titel">CTAT Info Panel</h4><div id="scrimpanel" class="inhalt"><br>' + e + "<br><br></div></div></div>"), !0 === g && (x = f(a, "close"), $(x).appendTo("#scrimpanel")), !0 === d && (p = f(h, "yes"), $(p).appendTo("#scrimpanel")), !0 === c && (n = f(l, "no"), $(n).appendTo("#scrimpanel")), 
        1 == waitScrim)) {
          w.ctatdebug("Adding spinner ...");
          $("#scrimpanel").append("<br>");
          b = $('<div id="scrim_spin">');
          b.css("width", "100%");
          b.css("position", "relative");
          $("#scrimpanel").append(b);
          try {
            var q = (new Spinner({className:"scrim_spinner"})).spin();
            $("#scrim_spin").append(q.el);
          } catch (u) {
            (u instanceof ReferenceError || u instanceof TypeError) && w.ctatdebug('Spinner is not available, please include it in the build or add <script src="node_modules/spin.js/spin.min.js">\x3c/script> to the html file.', u, typeof u);
          }
        }
      }
    }
  };
  this.waitScrimUp = function() {
    "google" != CTATConfig.platform && (1 == scrimIsUp && w.scrimDownForced(), w.ctatdebug("waitScrimUp ()"), waitScrim = !0, w.scrimUp(CTATGlobals.languageManager.getString("LOADING")));
  };
  this.nextProblemScrimUp = function() {
    "google" != CTATConfig.platform && (1 == scrimIsUp && w.scrimDownForced(), w.ctatdebug("nextProblemScrimUp ()"), w.scrimUp(CTATGlobals.languageManager.getString("NEXTPROBLEM")));
  };
  this.OKScrimUp = function(a, b) {
    "google" != CTATConfig.platform && (1 == scrimIsUp && w.scrimDownForced(), w.ctatdebug("OKScrimUp (" + a + "," + b + ")"), c = d = g = warnScrim = errorScrim = !1, w.scrimUp(a), u = f(b, "OK"), $(u).appendTo("#scrimpanel"));
  };
  this.confirmScrimUp = function(a, b, g) {
    "google" != CTATConfig.platform && (1 == scrimIsUp && w.scrimDownForced(), w.ctatdebug("confirmScrimUp (" + a + "," + b + "," + g + ")"), c = d = !0, l = g, h = b, w.scrimUp(a));
  };
  this.errorScrimUp = function(a) {
    "google" != CTATConfig.platform && (1 == scrimIsUp && w.scrimDownForced(), 0 == authorTimeSet ? (w.ctatdebug("we don't know if we're in authorTime or not yet so we're just going to hold onto the messasge"), q.push("ERROR: " + a), errorScrim = !0) : 0 == inAuthorTime ? w.ctatdebug("We're not in authorTime, student's don't need to see our design mistakes") : (errorScrim = !0, b("ERROR: " + a)));
  };
  this.warningScrimUp = function(a) {
    "google" != CTATConfig.platform && (1 == scrimIsUp && w.scrimDownForced(), 0 == authorTimeSet ? (w.ctatdebug("we don't know if we're in authorTime or not yet so we're just going to hold onto the messasge"), q.push("WARNING: " + a), warnScrim = !0) : 0 == inAuthorTime ? w.ctatdebug("We're not in authorTime, student's don't need to see our design mistakes") : (warnScrim = !0, b("WARNING: " + a)));
  };
  this.handleTSDisconnect = function() {
    connectionScrim = !0;
    w.scrimUp(CTATGlobals.languageManager.getString("TUTORDISCONNECTED"));
  };
  this.scrimDown = function() {
    "google" != CTATConfig.platform && (0 == scrimIsUp ? w.ctatdebug("The scrim isn't up, returning") : 1 == errorScrim ? w.ctatdebug("The scrim is up to describe errors to the user, leave it up!") : 1 == warnScrim ? w.ctatdebug("The scrim is up to display warnings to the user, leave it up!") : 1 == connectionScrim ? w.ctatdebug("The scrim is up for a connection issue leave it up!") : w.scrimDownForced());
  };
  this.scrimDownForced = function() {
    $("#scrim").remove();
    m.removeComponent();
    waitScrim = scrimIsUp = !1;
    e = "";
  };
  this.defaultClickHandler = function() {
    w.ctatdebug("defaultClickHandler ()");
    w.scrimDown();
  };
  this.setInAuthorTime = function(a) {
    w.ctatdebug("setting inAuthorTime = " + a);
    authorTimeSet = !0;
    inAuthorTime = a;
    if (!a) {
      warnScrim = errorScrim = !1, g && null.removeChild(x);
    } else {
      if (errorScrim || warnScrim) {
        for (var c in q) {
          b(c);
        }
      }
    }
  };
  this.getInAuthorTime = function() {
    return inAuthorTime;
  };
};
CTATScrim.prototype = Object.create(CTATBase.prototype);
CTATScrim.prototype.constructor = CTATScrim;
CTATGlobals.languageManager = CTATLanguageManager.theSingleton;
window.jQuery ? (console.log("JQuery check: available, assining document ready event handler ..."), $(document).ready(function() {
  ctatdebug("$ready ()");
  CTATScrim.scrim = new CTATScrim;
  0 == noScrim && CTATScrim.scrim.waitScrimUp();
})) : (console.log("Error: JQuery not available, can't execute $(document).ready() in CTATScrim.js"), alert("CTAT is unable to access JQuery, please make sure the library is referenced in your html file and loaded before CTAT."));
CTAT.ToolTutor = {interfaceMessages:[], tutorMessages:[]};
Object.defineProperty(CTAT.ToolTutor, "message_handler", {enumerable:!0, get:function() {
  if (window.hasOwnProperty("getInterfaceObject") && "function" === typeof window.getInterfaceObject) {
    return window.getInterfaceObject();
  }
  if (window.hasOwnProperty("interfaceObject")) {
    return window.interfaceObject;
  }
  this.hasOwnProperty("_interface") || (this._interface = null);
  return this._interface;
}, set:function(a) {
  window.hasOwnProperty("interfaceObject") ? window.interfaceObject = a : this._interface = a;
  return a;
}});
Object.defineProperty(CTAT.ToolTutor, "tutor", {enumerable:!0, get:function() {
  if (window.hasOwnProperty("getTutorObject") && "function" === typeof window.getTutorObject) {
    return window.getTutorObject();
  }
  if (window.hasOwnProperty("tutorObject")) {
    return window.tutorObject;
  }
  this.hasOwnProperty("_tutor") || (this._tutor = null);
  return this._tutor;
}, set:function(a) {
  window.hasOwnProperty("tutorObject") ? window.tutorObject = a : this._tutor = a;
  return a;
}});
CTAT.ToolTutor.registerTutor = function(a) {
  if (window.hasOwnProperty("registerTutor") && "function" === typeof window.registerTutor) {
    return window.registerTutor(a);
  }
  if (this.tutor = a) {
    for (;0 < this.tutorMessages.length;) {
      this.sendToTutor(this.tutorMessages.shift());
    }
  }
};
CTAT.ToolTutor.sendToInterface = function(a) {
  ctatdebug("CTAT.ToolTutor.sendToInterface()\n  " + a);
  return window.hasOwnProperty("sendToInterface") && "function" === typeof window.sendToInterface ? window.sendToInterface.apply(null, arguments) : this.message_handler ? this.message_handler.receiveFromTutor(a) : commMessageHandler ? commMessageHandler.processMessage(a) : this.interfaceMessages.push(a);
};
CTAT.ToolTutor.registerInterfaceMessageHandler = function(a) {
  ctatdebug("CTAT.ToolTutor.registerInterfaceMessageHandler(" + a + ")");
  "string" === typeof a && (a = document.getElementById(a));
  if (this.message_handler = a) {
    for (;0 < this.interfaceMessages.length;) {
      this.sendToInterface(this.interfaceMessages.shift());
    }
  }
};
CTAT.ToolTutor.registerInterface = function(a) {
  if (window.hasOwnProperty("registerInterface") && "function" === typeof window.registerInterface) {
    return window.registerInterface(a);
  }
  this.registerInterfaceMessageHandler(a);
};
CTAT.ToolTutor.sendToTutor = function(a) {
  return window.hasOwnProperty("sendToTutor") && "function" === typeof window.sendToTutor ? window.sendToTutor(a) : this.tutor ? this.tutor.receiveFromInterface(a) : this.tutorMessages.push(a);
};
var bundleFormatter = "", inBundle = !1, useBundling = !1, useOLIEncoding = !1, CTATCommLibrary = function(a, b) {
  CTATBase.call(this, "CTATCommLibrary", a);
  var f = authenticityToken = "", e = 0, d = [], c = a ? a : null, g = null == b ? !0 : b, h = !0, l = null, m = this, q = "http";
  this.setUseCommSettings = function(a) {
    h = a;
  };
  this.getUseCommSettings = function() {
    return h;
  };
  this.setSocketType = function(a) {
    q = a;
  };
  this.getSocketType = function() {
    return q;
  };
  this.assignHandler = function(a) {
    c = a;
  };
  this.assignMessageListener = function(a) {
    l = a;
  };
  this.encodeVariables = function(a) {
    m.ctatdebug("encodeVariables ()");
    for (var b = "", c = 0;c < a.length;c++) {
      var g = a[c];
      0 < c && (b += "&");
      b += g.name;
      b += "=";
      b += encodeURIComponent(g.value);
    }
    return b;
  };
  this.encodeVariablesOLI = function(a) {
    m.ctatdebug("encodeVariablesOLI ()");
    for (var b = "", c = 0;c < a.length;c++) {
      var g = a[c];
      0 < c && (b += "&");
      b += g.name;
      b += "=";
      b += encodeURIComponent(g.value);
    }
    return b;
  };
  this.createConnection = function(a, b) {
    m.ctatdebug("createConnection ()");
    if (!b) {
      return new CTATConnection(a);
    }
    flashVars.getRawFlashVars();
    var c;
    if ("websocket" == m.getSocketType()) {
      for (c = 0;c < d.length;c++) {
        var g = d[c];
        if ("ws" == g.getSocketType() && g.getURL() == b) {
          return g;
        }
      }
      c = new CTATWSConnection(a);
      c.setID(e);
      c.setURL(b);
      c.assignReceiveFunction(this.processWSReply);
      c.assignCloseFunction(this.processWSClose);
      d.push(c);
      e++;
      return c;
    }
    c = new CTATConnection(a);
    c.setID(e);
    c.setURL(b);
    c.assignReceiveFunction(this.processReply);
    d.push(c);
    e++;
    return c;
  };
  this.startBundle = function() {
    m.ctatdebug("startBundle ()");
    0 == useBundling ? this.ctatdebug("Not using bundling, bump") : (bundleFormatter = '<?xml version="1.0" encoding="UTF-8"?><message><verb/><properties><MessageType>MessageBundle</MessageType><messages>', inBundle = !0);
  };
  this.endBundle = function() {
    m.ctatdebug("endBundle ()");
    0 == useBundling ? m.ctatdebug("Not using bundling, bump") : (inBundle = !1, bundleFormatter += "</messages></properties></message>", m.sendXML(bundleFormatter));
  };
  this.setFixedURL = function(a) {
    f = a;
  };
  this.getURL = function() {
    m.ctatdebug("getURL ()");
    if ("" != f) {
      return m.ctatdebug("Returning fixedURL: " + f), f;
    }
    var a = flashVars.getRawFlashVars(), b = "http://";
    "https" == m.getSocketType() && (b = "https://");
    b = b + a.remoteSocketURL + ":" + a.remoteSocketPort;
    -1 != a.remoteSocketURL.indexOf("http") && (b = a.remoteSocketURL + ":" + a.remoteSocketPort);
    return b;
  };
  this.sendXML = function(a) {
    m.ctatdebug("Sending: " + a);
    m.ctatdebug("sendXML (" + a + ")");
    if (1 == useBundling && 1 == inBundle) {
      m.ctatdebug("Bundling ..."), bundleFormatter += a;
    } else {
      bundleFormatter = a;
      flashVars.getRawFlashVars();
      a = this.getURL();
      var b = bundleFormatter;
      -1 == bundleFormatter.indexOf("<?xml") && (b = '<?xml version="1.0" encoding="UTF-8"?>' + bundleFormatter);
      1 == this.getUseCommSettings() ? "javascript" == m.getSocketType() ? CTAT.ToolTutor.sendToTutor(b) : this.send_post(a, b) : this.send_post(a, b);
    }
  };
  this.sendXMLNoBundle = function(a) {
    m.ctatdebug("sendXMLNoBundle (" + a + ")");
    bundleFormatter = a;
    var b = this.getURL(), c = a;
    -1 == a.indexOf("<?xml") && (c = '<?xml version="1.0" encoding="UTF-8"?>' + a);
    flashVars.getRawFlashVars();
    1 == this.getUseCommSettings() ? "javascript" == m.getSocketType() ? CTAT.ToolTutor.sendToTutor(c) : this.send_post(b, c) : this.send_post(b, c);
  };
  this.sendXMLURL = function(a, b) {
    m.ctatdebug("sendXMLURL (" + b + ")");
    var c = a;
    -1 == a.indexOf("<?xml") && (c = '<?xml version="1.0" encoding="UTF-8"?>' + a);
    flashVars.getRawFlashVars();
    m.ctatdebug("Sending: " + c);
    1 == this.getUseCommSettings() ? "javascript" == m.getSocketType() ? CTAT.ToolTutor.sendToTutor(c) : this.send_post(b, c) : this.send_post(b, c);
  };
  this.sendURLVariables = function(a, b) {
    this.ctatdebug("sendURLVariables (" + a + ")");
    this.send_post_variables(a, b);
  };
  this.send = function(a) {
    m.ctatdebug("send (" + a + ")");
    if (!0 === globalCommDisabled) {
      m.ctatdebug("Communications globally disabled, please check your settings");
    } else {
      var b = new CTATConnection(null);
      b.setID(e);
      e++;
      if (null === b.getHTTPObject()) {
        return alert("Cannot create XMLHTTP instance"), !1;
      }
      d.push(b);
      b.setURL(a);
      b.assignReceiveFunction(this.processReply);
      try {
        b.getHTTPObject().open("GET", a, !0);
      } catch (c) {
        this.ctatdebug("Error in newConnection.httpObject.open: " + c.message);
        return;
      }
      try {
        b.init();
      } catch (c) {
        this.ctatdebug("Error in newConnection.init: " + c.message);
        return;
      }
      try {
        b.getHTTPObject().send(null);
      } catch (c) {
        this.ctatdebug("Error in newConnection.httpObject.send: " + c.message);
      }
    }
  };
  this.send_post_variables = function(a, b) {
    m.ctatdebug("send_post_variables (" + a + ")");
    flashVars.getRawFlashVars();
    m.getSocketType();
    var c;
    c = 0 == useOLIEncoding ? this.encodeVariables(b) : this.encodeVariablesOLI(b);
    this.ctatdebug("Sending: " + c);
    if (!0 === globalCommDisabled) {
      m.ctatdebug("Communications globally disabled, please check your settings");
    } else {
      var g = m.createConnection(CTATConfiguration.getRawFlashVars(), a);
      g.setContentType("application/x-www-form-urlencoded");
      e++;
      d.push(g);
      m.ctatdebug(c);
      null != l && l.processOutgoing(c);
      g.setURL(a);
      g.setData(c);
      g.assignReceiveFunction(this.processReply);
      g.send();
    }
  };
  this.send_post = function(a, b) {
    var c;
    m.ctatdebug("send_post (" + a + ")");
    if (!0 === globalCommDisabled) {
      m.ctatdebug("Communications globally disabled, please check your settings");
    } else {
      m.ctatdebug("Outoing on wire: " + b);
      c = flashVars.getRawFlashVars();
      var g = a;
      "websocket" == m.getSocketType() ? (g = a.replace("http:", "ws:"), c = m.createConnection(c, g), c.setData(b), m.ctatdebug(b)) : (c = m.createConnection(c, g), c.setData(b));
      null != l && l.processOutgoing(b);
      c.send();
    }
  };
  this.processReply = function(a) {
    m.ctatdebug("processReply (" + d.length + "," + a + ")");
    var b = 0, e;
    a = [];
    var f;
    for (f = 0;f < d.length;f++) {
      var h = d[f], q = h.getHTTPObject();
      m.ctatdebug("Testing connection entry " + f + ", readyState: " + q.readyState + ", testConnection.consumed: " + h.getConsumed());
      4 == q.readyState && 0 == h.getConsumed() ? (m.ctatdebug("Investigating request response: " + b + " -> " + q.status + ", for: " + h.getURL()), e = !1, 0 === q.status && (e = !0, m.ctatdebug("Received message (status 0): " + q.responseText)), 408 == q.status && (e = !0, m.ctatdebug("Received message (status 408): " + q.responseText), g && CTATScrim.scrim.scrimDown()), 502 == q.status && (e = !0, m.ctatdebug("Received message (status 502): " + q.responseText), g && CTATScrim.scrim.errorScrimUp("Error contacting the server, please refresh the page and try again (HTTP status 502: gateway response).")), 
      200 == q.status ? (e = !0, m.ctatdebug("Processing 200 response ..."), null !== c ? (a.push(q.responseText), null != l && l.processIncoming(q.responseText)) : m.ctatdebug("Error: httphandler is null, can't process response!")) : c && c.processError && (e = !0, m.ctatdebug("Processing non-200 response, status " + q.status), c.processError(q.status, q.responseText)), !1 === e && m.ctatdebug("Error: status not handled for: " + q.status), m.ctatdebug("Marking connection as consumed ..."), h.setConsumed(!0)) : 
      (0 === q.readyState && m.ctatdebug("Received message (status 0, request not initialized)"), 1 === q.readyState && m.ctatdebug("Received message (status 1, server connection established)"), 2 === q.readyState && m.ctatdebug("Received message (status 2, request received)"), 3 === q.readyState && m.ctatdebug("Received message (status 3, processing request)"));
      b++;
    }
    m.cleanup();
    for (b = 0;b < a.length;b++) {
      e = a[b], -1 != e.indexOf("status=success") ? m.ctatdebug("Info: logging success message received, not propagating to message handler") : (m.ctatdebug("Processing incoming message: " + e), c.processMessage(e));
    }
  };
  this.processWSReply = function(a) {
    m.ctatdebug("processWSReply() length " + (null == a ? null : a.toString().length));
    "string" == typeof a && (null != l && l.processIncoming(a), -1 != a.indexOf("status=success") ? m.ctatdebug("processWSReply() logging success message received, not propagating to message handler: " + a) : (m.ctatdebug("Processing incoming message: " + a), c.processMessage(a)));
  };
  this.processWSClose = function(a) {
    m.ctatdebug("processWSClose(" + a + ")");
    a instanceof CloseEvent && m.ctatdebug("CloseEvent: code " + a.code + ", reason " + a.reason + ", wasClean " + a.wasClean);
    "AUTHORING" == CTATTarget && CTATScrim.scrim.scrimUp(CTATGlobals.languageManager.filterString("AUTHORPLEASECLOSE"));
  };
  this.cleanup = function() {
    m.ctatdebug("cleanup ()");
    for (var a = 0, b, c = !1;!1 === c;) {
      b = this.checkEntries(), !1 === b ? c = !0 : a++;
    }
    m.ctatdebug("Removed " + a + " entries");
  };
  this.checkEntries = function() {
    m.ctatdebug("checkEntries (" + d.length + ")");
    var a = 0, b;
    for (b = 0;b < d.length;b++) {
      var c = d[b];
      if (!0 === c.getConsumed()) {
        return m.ctatdebug("Removing : " + c.getID()), d.splice(a, 1), !0;
      }
      var g = c.getHTTPObject();
      m.ctatdebug("Check, readyState: " + g.readyState + ", consumed: " + c.getConsumed());
      a++;
    }
    return !1;
  };
  this.retrieveXMLFile = function(a, b, c) {
    m.ctatdebug("retrieveXMLFile (" + a + ")");
    var g = (new CTATConnection).getHTTPObject();
    g.onreadystatechange = function() {
      m.ctatdebug("onready... GET for xmlFile xmlhttp.readyState " + g.readyState + ", .status " + g.status + ", parser " + b);
      if (4 == g.readyState) {
        if (200 == g.status) {
          var e;
          g.responseXML ? (m.ctatdebug("parsing brd xml using something else"), e = g.responseXML.documentElement) : (m.ctatdebug("parsing brd xml using node"), e = (b = new CTATXML).parseXML(g.responseText));
          if (null == e) {
            e = (new CTATTutorMessageBuilder).createErrorMessage("Error parsing xmlFile " + a);
            m.ctatdebug("Error parsing xmlFile " + a + ": " + e);
            CTAT.ToolTutor.sendToInterface(e, !0);
            return;
          }
          c.processXML(e);
        }
        404 == g.status && (e = (new CTATTutorMessageBuilder).createErrorMessage("Unable to download file", "(" + a + ") not found"), m.ctatdebug("Error loading xmlFile " + a + ": " + e), CTAT.ToolTutor.sendToInterface(e, !0));
      }
    };
    g.onerror = function() {
      var a = (new CTATTutorMessageBuilder).createErrorMessage("Unable to load file", "Either there is a firewall between us or the file is on a different domain than this tutor is served from and we do not have permissions to retrieve data from that server.");
      m.ctatdebug("onerror GET for xmlFile " + a);
      CTAT.ToolTutor.sendToInterface(a, !0);
      c.processXML(null);
    };
    g.open("GET", a, !0);
    g.setRequestHeader("Content-type", "text/plain");
    g.send();
  };
  this.retrieveJSONFile = function(a, b) {
    m.ctatdebug("retrieveJSONFile (" + a + ")");
    var c = (new CTATConnection).getHTTPObject();
    c.onreadystatechange = function() {
      4 == c.readyState && 200 == c.status && (m.ctatdebug("Successfully retrieved file: " + a), b(JSON.parse(c.responseText)));
    };
    c.onerror = function() {
      m.ctatdebug("Error retrieving JSON file");
    };
    c.open("GET", a, !0);
    c.setRequestHeader("Content-type", "text/plain");
    c.send();
  };
  this.retrieveFile = function(a, b) {
    m.ctatdebug("retrieveFile (" + a + ")");
    var c = (new CTATConnection).getHTTPObject();
    c.onreadystatechange = function() {
      4 == c.readyState && 200 == c.status && (m.ctatdebug("Successfully retrieved file: " + a), b(c.responseText));
    };
    c.onerror = function() {
      m.ctatdebug("Error retrieving file");
    };
    c.open("GET", a, !0);
    c.setRequestHeader("Content-type", "text/plain");
    c.send();
  };
};
CTATCommLibrary.setAuthenticityToken = function(a) {
  Array.isArray(a) && (a = 0 < a.length ? a[0] : "");
  a && (CTATCommLibrary.authenticityToken = decodeURIComponent(a));
};
CTATCommLibrary.getAuthenticityToken = function(a) {
  return CTATCommLibrary.authenticityToken;
};
CTATCommLibrary.addAuthenticityToken = function(a) {
  return CTATCommLibrary.authenticityToken && ("" == a || 0 > a.search(/authenticity_token=/) && 0 <= a.search(/^[?]?[^?&=><]+=?[^&=]*(&[^?&=><]+=?[^&=]*)*$/)) ? "" + a + (a ? "&" : "") + "authenticity_token=" + encodeURIComponent(CTATCommLibrary.authenticityToken) : a;
};
CTATCommLibrary.prototype = Object.create(CTATBase.prototype);
CTATCommLibrary.prototype.constructor = CTATCommLibrary;
var CTATActionEvaluationData = function(a) {
  CTATBase.call(this, "CTATActionEvaluationData", "actionevaluation");
  var b = 0, f = 0, e = "", d = a;
  this.setClassification = function(a) {
    this.classification = a;
  };
  this.isHint = function() {
    return "HINT" == d;
  };
  this.hasClassification = function() {
    return !0;
  };
  this.setCurrentHintNumber = function(a) {
    b = a;
  };
  this.setTotalHintsAvailable = function(a) {
    f = a;
  };
  this.setHintID = function(a) {
    e = a;
  };
  this.getClassification = function() {
    return "";
  };
  this.setEvaluation = function(a) {
    d = a;
  };
  this.getEvaluation = function() {
    return d;
  };
  this.getAttributeString = function() {
    var a = "";
    if (!this.isHint()) {
      return a;
    }
    a += 'current_hint_number="' + b + '" ';
    a += 'total_hints_available="' + f + '" ';
    "" !== e && (a += 'hint_id="' + e + '" ');
    return a;
  };
};
CTATActionEvaluationData.prototype = Object.create(CTATBase.prototype);
CTATActionEvaluationData.prototype.constructor = CTATActionEvaluationData;
var CTATVariable = function() {
  this.value = this.name = "";
};
var CTATCurriculumService = function(a) {
  CTATBase.call(this, "CTATCurriculumService", "curriculum_service");
  var b = [], f = this;
  this.reset = function() {
    b = [];
  };
  this.addVariable = function(a, d) {
    var c = new CTATVariable;
    c.name = a;
    c.value = d;
    b.push(c);
  };
  this.sendSummary = function(e) {
    f.ctatdebug("sendSummary ()");
    var d = new CTATXML, c = e.getXMLObject();
    e = c.getElementsByTagName("ProblemSummary");
    e = $("<div>").html(e[0].innerHTML).text();
    d.xmlToString(c);
    var c = flashVars.getRawFlashVars(), d = c.curriculum_service_url, g = new CTATXML, h = g.parse(e), g = g.getElementAttr(h, "CompletionStatus");
    d ? ("complete" == g && (CTATScrim.scrim.nextProblemScrimUp(), a.assignMessageListener(f), a.assignHandler(f)), b = [], this.addVariable("user_guid", c.user_guid), this.addVariable("session_id", c.session_id), this.addVariable("authenticity_token", c.authenticity_token), this.addVariable("school_name", c.school_name), this.addVariable("summary", e), e = c.target_frame, g = c.reuse_swf, c = c.run_problem_url, this.addVariable("targetFrame", e), this.addVariable("reuseSWF", g), f.ctatdebug("CTATCurriculumService.sendSummary about to send targetFrame = " + 
    e + ", reuseSwf " + g + ", runProblemUrl " + c), a.send_post_variables(d, b)) : "complete" == g && CTATScrim.scrim.scrimUp("Congratulations, you are done with this problem.");
  };
  this.processOutgoing = function(a) {
    f.ctatdebug('CTATCurriculumService.processOutgoing("' + a + '")');
  };
  this.processIncoming = function(a) {
    var b = flashVars.getRawFlashVars().run_problem_url;
    f.ctatdebug("CTATCurriculumService.processIncoming(" + (a ? a.substring(0, 12) + "..." : "") + ") parent.location.replace " + parent.location.replace + ', runProblemUrl "' + b + '"');
    b && parent && parent.location && parent.location.replace(b);
  };
  this.processMessage = function(a) {
    this.ctatdebug("CTATCurriculumService.processMessage(" + (a ? a.substring(0, 30) + "..." : "") + ")");
  };
  this.updateFlashVars = function(a) {
    f.ctatdebug("UpdateFlashVars ()");
  };
  this.checkProtocol = function(a) {
    return "localhost" == a || "127.0.0.1" == a ? !0 : null === /^http[s]?:\/\/([^\/]+)\//.exec(a) || 4096 <= a.length ? !1 : !0;
  };
};
CTATCurriculumService.prototype = Object.create(CTATBase.prototype);
CTATCurriculumService.prototype.constructor = CTATCurriculumService;
var CTATConfiguration = function() {
  CTATBase.call(this, "CTATConfiguration", "config");
  var a = this, b = [], f = null, e = null, d = null, c = null;
  this.raw = {admit_code:"ies", authenticity_token:"", auth_token:"none", BehaviorRecorderMode:"AuthorTimeTutoring", class_name:"DefaultClass", curriculum_service_url:"", connection:"javascript", dataset_level_name:"none", dataset_level_type:"ProblemSet", dataset_name:"none", expire_logout_url:"none", info:"", instructor_name:"none", instrumentation_log:"off", lcId:"none", Logging:"None", log_service_url:"http://pslc-qa.andrew.cmu.edu/log/server", log_to_disk_directory:".", problem_name:"none", problem_position:"none", 
  problem_started_url:"none", problem_state_status:"empty", question_file:"none", refresh_session_url:"none", remoteSocketPort:"80", remoteSocketURL:"127.0.0.1", restore_problem_url:"", reuse_swf:"false", run_problem_url:"none", school_name:"none", SessionLog:"true", session_id:"none", session_timeout:"none", skills:"", source_id:"PACT_CTAT_HTML5", student_interface:"none", student_problem_id:"none", study_condition_name:"none", study_condition_type:"none", study_condition_description:"none", study_name:"Study1", 
  target_frame:"none", TutorShopDeliveryMethod:"sendandload", tutoring_service_communication:"javascript", user_guid:"none", wmode:"opaque", ssl:"off", sui:"", centerTutor:!1, previewMode:!1, width:550, height:450};
  this.assignRawFlashVars = function(b) {
    a.ctatdebug("assignRawFlashVars() raw['session_id'] " + a.raw.session_id + ", aData['session_id'] " + b.session_id);
    a.raw = b;
    a.preParse();
  };
  this.getRawFlashVars = function() {
    return a.raw;
  };
  this.getSingleParameterValues = function(b) {
    var c = [];
    if (!b) {
      return c;
    }
    for (var e = a.getRawFlashVars(), d = 0;d < b.length;++d) {
      e[b[d]] && c.push(b[d]);
    }
    return c;
  };
  this.generateDefaultConfiguration = function(b) {
    var c = {}, e = 0;
    if (b) {
      for (v in b) {
        c[v] = b[v], e++;
      }
    }
    a.ctatdebug("generateDefaultConfiguration() nDefaults " + e + ", result['session_id'] " + c.session_id);
    e = b = null;
    if (window && window.frameElement && (e = window.frameElement.getAttribute("data-params"))) {
      b = jQuery.parseJSON(e);
      for (var d in b) {
        c[d] = CTATGlobals.EncodedParams[d] ? decodeURIComponent(b[d].replace(/\+/g, "%20")) : b[d];
      }
    }
    if (null == b) {
      for (d = $('object param[name="flashvars"]'), a.ctatdebug("generateDefaultConfiguration() objs " + d), b = 0;b < d.length;++b) {
        if (e = $(d[b]).attr("value"), a.ctatdebug("generateDefaultConfiguration() fVarsAsString " + e), e && (e = parseQueryStringArgs(e)) && e.question_file) {
          for (v in e) {
            c[v] = e[v];
          }
        }
      }
    }
    ctatdebug("tutorPrep (" + c + ")");
    d = {};
    if (null == c) {
      ctatdebug("tutorPrep(): Internal error: null argument passed");
    } else {
      if ("undefined" != typeof CTATTarget && "XBlock" != CTATTarget && "OLI" != CTATTarget) {
        ctatdebug("parseQueryString ()");
        b = location.search;
        ctatdebug("Query String: " + b);
        e = "?" == b.charAt(0) ? b.substring(1) : b;
        b = {};
        if (e) {
          for (var e = e.split("&"), f = 0;f < e.length;f++) {
            var p = e[f].split("=");
            ctatdebug("Setting flashvar " + p[0] + ", to: " + decodeURIComponent(p[1].replace(/\+/g, " ")));
            b[decodeURIComponent(p[0])] = decodeURIComponent(p[1].replace(/\+/g, " "));
          }
        }
        null != b && (ctatdebug("tutorPrep(): Assigning parsed arguments ..."), d = b);
      }
      b = !1;
      for (var n in d) {
        if (d.hasOwnProperty(n)) {
          switch(ctatdebug("Processing external FlashVar " + n + "(" + d[n] + ")"), n) {
            case "GENERATED":
              "on" == d[n] && (b = new CTATGuid, c.session_id = b.guid(), b = !0);
              break;
            case "BRD":
              c.question_file = d[n];
              break;
            case "BRMODE":
              c.BehaviorRecorderMode = d[n];
              break;
            case "PROBLEM":
              c.problem_name = d[n];
              break;
            case "DATASET":
              c.dataset_name = d[n];
              break;
            case "LEVEL1":
              c.dataset_level_name1 = d[n];
              break;
            case "TYPE1":
              c.dataset_level_type1 = d[n];
              break;
            case "LEVEL2":
              c.dataset_level_name2 = d[n];
              break;
            case "TYPE2":
              c.dataset_level_type2 = d[n];
              break;
            case "LEVEL3":
              c.dataset_level_name3 = d[n];
              break;
            case "TYPE3":
              c.dataset_level_type3 = d[n];
              break;
            case "LEVEL4":
              c.dataset_level_name4 = d[n];
              break;
            case "TYPE4":
              c.dataset_level_type4 = d[n];
              break;
            case "USER":
              c.user_guid = d[n];
              break;
            case "SESSION":
              !1 === b && (c.session_id = d[n]);
              break;
            case "SOURCE":
              c.source_id = d[n];
              break;
            case "LOGTYPE":
              c.Logging = d[n];
              break;
            case "PORT":
              c.remoteSocketPort = d[n];
              break;
            case "REMOTEURL":
              c.remoteSocketURL = d[n];
              break;
            case "DISKDIR":
              c.log_to_disk_directory = d[n];
              break;
            case "log_service_url":
              c.log_service_url = d[n];
              break;
            case "URL":
              c.log_service_url = d[n];
              break;
            case "LOGURL":
              c.log_service_url = d[n];
              break;
            case "CONNECTION":
              c.tutoring_service_communication = d[n];
              break;
            case "SUI":
              c.sui = d[n];
              break;
            case "VAR1":
              c.var1 = d[n];
              break;
            case "VAL1":
              c.val1 = d[n];
              break;
            case "VAR2":
              c.var2 = d[n];
              break;
            case "VAL2":
              c.val2 = d[n];
              break;
            case "VAR3":
              c.var3 = d[n];
              break;
            case "VAL3":
              c.val3 = d[n];
              break;
            case "VAR4":
              c.var4 = d[n];
              break;
            case "VAL4":
              c.val4 = d[n];
              break;
            case "SLOG":
            ;
            case "SessionLog":
              c.SessionLog = d[n];
              break;
            case "KEYBOARDGROUP":
              "Disabled" == d[n] && (c.keyboard = "disabled");
              "Auto" == d[n] && (c.keyboard = "auto");
              "On" == d[n] && (c.keyboard = "on");
              break;
            default:
              c[n] = d[n];
          }
        }
      }
    }
    return c;
  };
  this.getCustomFields = function() {
    return b;
  };
  this.setTimeZone = function(b) {
    a.ctatdebug("setTimeZone (" + b + ")");
    null == b || "" == b || void 0 == b ? (b = jstz.determine(), a.ctatdebug("Assigning detected timezone: " + b.name()), b = b.name()) : (50 < b.length && (b = b.substr(0, 50)), 3 != b.length && 4 != b.length || a.ctatdebug("3 and 4 letter time zone abbreviations are deprecated. See list of tz database zone names for better options"));
    null != a.raw && (a.raw.timezone = b);
  };
  this.getTimeZone = function() {
    return null != a.raw && a.raw.timezone ? a.raw.timezone : "UTC";
  };
  this.listWithAmpersands = function() {
    var b = "", c;
    for (c in a.raw) {
      var e = c + "=" + encodeURIComponent(a.raw[c]), b = "" != b ? b + "&" + e : e
    }
    a.ctatdebug("CTATConfiguration.listWithAmpersands() result " + b.substring(0, 25) + "...");
    return b;
  };
  this.listFlashVars = function() {
    ctatdebug("listFlashVars ()");
    for (var b in a.raw) {
      ctatdebug("[" + b + "]: " + a.raw[b]);
    }
  };
  this.preParse = function() {
    ctatdebug("preParse ()");
    if (void 0 == a.raw.dataset_name || void 0 == a.raw.dataset_name) {
      a.raw.dataset_name = "DefaultDataset";
    }
    var c = 0, e;
    for (e in a.raw) {
      if ("VAR" == e || "var" == e) {
        b[e] = a.raw[e];
      }
      c++;
    }
    a.ctatdebug("preParse() nRaw " + c);
    c = 0;
    for (e = !0;1 == e;) {
      e = !1;
      var d = "custom_field_name" + (c + 1), f = "custom_field_value" + (c + 1);
      a.ctatdebug("Trying : " + a.raw[d] + "," + a.raw[f]);
      null != a.raw[d] && (a.ctatdebug("Adding: " + d + "," + a.raw[f]), b[a.raw[d]] = a.raw[f], e = !0, c++);
    }
  };
  this.getDatasetNames = function() {
    a.ctatdebug("getDatasetNames ()");
    if (null != f) {
      return f;
    }
    f = {};
    f = [];
    for (var b = 0, c = !0;1 == c;) {
      var c = !1, e = "dataset_level_name" + (b + 1);
      null != a.raw[e] && (a.ctatdebug("Adding: " + e + "," + a.raw[e]), f[b] = a.raw[e], c = !0, b++);
    }
    return f;
  };
  this.getDatasetTypes = function() {
    a.ctatdebug("getDatasetTypes ()");
    if (null != e) {
      return e;
    }
    e = [];
    for (var b = 0, c = !0;1 == c;) {
      var c = !1, d = "dataset_level_type" + (b + 1);
      null != a.raw[d] && (a.ctatdebug("Adding: " + d + "," + a.raw[d]), e[b] = a.raw[d], c = !0, b++);
    }
    return e;
  };
  this.getConditionNames = function() {
    var b = [], c = 0;
    void 0 != a.raw.study_condition_name && "" != a.raw.study_condition_name && (b.push(a.raw.study_condition_name), c++);
    for (var e = 0, d = !0;1 == d;) {
      var d = !1, f = "study_condition_name" + (e + 1);
      null != a.raw[f] && (a.ctatdebug("Adding: " + f + "," + a.raw[f]), b[e + c] = a.raw[f], d = !0, e++);
    }
    return b;
  };
  this.getConditionTypes = function() {
    d = [];
    var b = 0;
    void 0 != a.raw.study_condition_type && "" != a.raw.study_condition_type && (d.push(a.raw.study_condition_type), b++);
    for (var c = 0, e = !0;1 == e;) {
      var e = !1, f = "study_condition_type" + (c + 1);
      null != a.raw[f] && (a.ctatdebug("Adding: " + f + "," + a.raw[f]), d[c + b] = a.raw[f], e = !0, c++);
    }
    return d;
  };
  this.getConditionDescriptions = function() {
    a.ctatdebug("getConditionDescriptions ()");
    c = [];
    var b = 0;
    a.raw.study_condition_description && "" != a.raw.study_condition_description && (a.ctatdebug("Adding study_condition_description: " + a.raw.study_condition_description), c.push(a.raw.study_condition_description), b++);
    for (var e = 0, d = !0;1 == d;) {
      var d = !1, f = "study_condition_description" + (e + 1);
      null != a.raw[f] && (a.ctatdebug("Adding: " + f + "," + a.raw[f]), c[e + b] = a.raw[f], d = !0, e++);
    }
    return c;
  };
  this.get = function(b) {
    return a.raw[b];
  };
  this.set = function(b, c) {
    b && (a.raw[b] = c);
  };
  this.setParams = function(b) {
    if (b) {
      for (var c in b) {
        a.set(c, b[c]);
      }
    }
  };
  this.isInstructorMode = function() {
    var a = this.getRawFlashVars();
    return a && a.deliverymode ? "delivery" == a.deliverymode ? !1 : !0 : !1;
  };
  this.getLoggingLibrary = function() {
    null == commLoggingLibrary && (commLoggingLibrary = new CTATLoggingLibrary(!0));
    return commLoggingLibrary;
  };
  this.setPreviewMode = function(b, c) {
    a.raw.previewMode = c;
  };
  this.setCenterTutor = function(b, c) {
    a.raw.centerTutor = c;
  };
  this.setTutorWidth = function(b, c) {
    a.raw.width = c;
  };
  this.setTutorHeight = function(b, c) {
    a.raw.height = c;
  };
  this.setTutorDimensions = function(b, c, e) {
    a.raw.width = c;
    a.raw.height = e;
  };
  this.setTutorValue = function(b, c, e) {
    a.raw[c] = e;
  };
  this.setCommunicationMode = function(b, c) {
    a.raw.tutoring_service_communication = c;
  };
  this.setRemoteSocketURL = function(b, c) {
    a.raw.remoteSocketURL = c;
  };
  this.setRemoteSocketPort = function(b, c) {
    a.raw.remoteSocketPort = c;
  };
};
CTATConfiguration.prototype = Object.create(CTATBase.prototype);
CTATConfiguration.prototype.constructor = CTATConfiguration;
flashVars = CTATConfiguration.theConfObject = null;
CTATConfiguration.generateDefaultConfigurationObject = function() {
  if (!CTATConfiguration.theConfObject) {
    this.theConfObject = new CTATConfiguration;
    var a = this.theConfObject.generateDefaultConfiguration(this.theConfObject.raw);
    this.theConfObject.assignRawFlashVars(a);
    "none" == this.theConfObject.get("session_id") && this.theConfObject.set("session_id", (new CTATGuid).guid());
    flashVars = this.theConfObject;
    ctatdebug("CTATConfiguration.generateDefaultConfigurationObject() flashVars.getRawFlashVars()['session_id'] " + flashVars.getRawFlashVars().session_id);
  }
  return this.theConfObject;
};
CTATConfiguration.getRawFlashVars = function() {
  CTATConfiguration.generateDefaultConfigurationObject();
  return CTATConfiguration.theConfObject.getRawFlashVars();
};
CTATConfiguration.get = function(a) {
  CTATConfiguration.generateDefaultConfigurationObject();
  return CTATConfiguration.theConfObject.get(a);
};
CTATConfiguration.set = function(a, b) {
  CTATConfiguration.generateDefaultConfigurationObject();
  CTATConfiguration.theConfObject.set(a, b);
};
CTATConfiguration.setParams = function(a) {
  CTATConfiguration.generateDefaultConfigurationObject();
  CTATConfiguration.theConfObject.setParams(a);
};
CTATConfiguration.getSingleParameterValues = function(a) {
  CTATConfiguration.generateDefaultConfigurationObject();
  return CTATConfiguration.theConfObject.getSingleParameterValues(a);
};
var CTATTutorMessageBuilder = function() {
  CTATBase.call(this, "CTATTutorMessageBuilder", "__undefined__");
};
CTATTutorMessageBuilder.isHint = function(a) {
  return null === a || "undefined" === typeof a ? !1 : 0 === a.toString().toLowerCase().indexOf(CTATTutorMessageBuilder.HINT.toLowerCase());
};
CTATTutorMessageBuilder.isCorrect = function(a) {
  if (null === a || "undefined" === typeof a) {
    return !1;
  }
  a = a.toString().toLowerCase();
  return 0 === a.indexOf(CTATTutorMessageBuilder.CORRECT.toLowerCase()) ? !0 : 0 === a.indexOf(CTATExampleTracerLink.SUCCESS.toLowerCase());
};
CTATTutorMessageBuilder.prototype = Object.create(CTATBase.prototype);
CTATTutorMessageBuilder.prototype.createInCorrectActionMessage = function(a, b) {
  this.ctatdebug("createInCorrectActionMessage ()");
  var f;
  f = "<message><verb>SendNoteProperty</verb><properties><MessageType>InCorrectAction</MessageType>" + ("<transaction_id>" + a + "</transaction_id>");
  this.ctatdebug("In CTATTutorMessageBuilder " + b);
  f += b.toXMLString(!1);
  return f + "</properties></message>";
};
CTATTutorMessageBuilder.prototype.createCorrectActionMessage = function(a, b) {
  this.ctatdebug("createCorrectActionMessage ()");
  var f;
  f = "<message><verb>SendNoteProperty</verb><properties><MessageType>CorrectAction</MessageType>" + ("<transaction_id>" + a + "</transaction_id>") + b.toXMLString(!1);
  return f + "</properties></message>";
};
CTATTutorMessageBuilder.prototype.createAssociatedRulesMessageForHint = function(a, b, f, e, d, c) {
  b = "<message><verb>SendNoteProperty</verb><properties><MessageType>AssociatedRules</MessageType><Indicator>Hint</Indicator>" + b.toXMLString();
  b += "<TutorAdvice>";
  for (var g = 0;g < a.length;g++) {
    b += "<value><![CDATA[" + a[g] + "]]\x3e</value>";
  }
  b += "</TutorAdvice><TotalHintsAvailable>" + a.length + "</TotalHintsAvailable><CurrentHintNumber>1</CurrentHintNumber>";
  b = b + ("<Actor>" + f + "</Actor>") + this.fmtSkillBarVector(e);
  b = b + "<skillBarDelimiter><![CDATA[`]]\x3e</skillBarDelimiter>" + ("<StepID>" + d + "</StepID>") + ("<transaction_id>" + c + "</transaction_id>");
  b += "<LogAsResult>true</LogAsResult>";
  return b += "</properties></message>";
};
CTATTutorMessageBuilder.prototype.createAssociatedRulesMessageForAction = function(a, b, f, e, d, c, g, h) {
  a = "<message><verb>SendNoteProperty</verb><properties><MessageType>AssociatedRules</MessageType>" + ("<Indicator>" + (CTATTutorMessageBuilder.isCorrect(a) ? "Correct" : "InCorrect") + "</Indicator>");
  a += b.toXMLString();
  b = e.toXMLString().replace("<Selection>", "<StudentSelection>").replace("<Action>", "<StudentAction>").replace("<Input>", "<StudentInput>");
  b = b.replace("</Selection>", "</StudentSelection>").replace("</Action>", "</StudentAction>").replace("</Input>", "</StudentInput>");
  a = a + b + ("<Actor>" + f + "</Actor>") + this.fmtSkillBarVector(d);
  a += "<skillBarDelimiter><![CDATA[`]]\x3e</skillBarDelimiter>";
  a += "<StepID>" + c + "</StepID>";
  a += "<transaction_id>" + g + "</transaction_id>";
  h && (a += "<TutorAdvice><![CDATA[" + h + "]]\x3e</TutorAdvice>");
  a += "<LogAsResult>true</LogAsResult>";
  a += "<end_of_transaction>" + (h ? !1 : !0) + "</end_of_transaction>";
  return a += "</properties></message>";
};
CTATTutorMessageBuilder.prototype.isDoneStep = function(a, b) {
  b[0] = !1;
  var f = a.getIndicator();
  if (!f) {
    return !1;
  }
  var e = a.getStudentSelection();
  e || (e = a.getProperty("tool_selection"));
  b[0] = CTATTutorMessageBuilder.isCorrect(indicator);
  var d = "done" == e;
  this.ctatdebug("isDoneStep() indicatorObj " + f + ", selectionObj " + e + ", correct[0] " + b[0] + ", result " + d);
  return d;
};
CTATTutorMessageBuilder.prototype.createHintMessage = function(a, b, f, e) {
  f = "<message><verb>SendNoteProperty</verb><properties><MessageType>ShowHintsMessage</MessageType><HintsMessage>";
  for (var d = 0;d < a.length;d++) {
    f += "<value><![CDATA[" + a[d] + "]]\x3e</value>";
  }
  f = f + "</HintsMessage>" + b.toXMLString();
  return f + ("<transaction_id>" + e + "</transaction_id>") + "</properties></message>";
};
CTATTutorMessageBuilder.prototype.createErrorMessage = function(a, b) {
  var f;
  f = "<message><verb>SendNoteProperty</verb><properties><MessageType>TutoringServiceError</MessageType><ErrorType>" + (a ? a : "Unknown Error") + "</ErrorType><Details>" + (b ? b : "");
  return f += "</Details></properties></message>";
};
CTATTutorMessageBuilder.prototype.createSuccessMessage = function(a, b) {
  var f;
  f = "<message><verb>SendNoteProperty</verb><properties><MessageType>SuccessMessage</MessageType>" + ("<SuccessMsg><![CDATA[" + b + "]]\x3e</SuccessMsg>") + ("<transaction_id>" + a + "</transaction_id>") + "<end_of_transaction>true</end_of_transaction>";
  return f += "</properties></message>";
};
CTATTutorMessageBuilder.prototype.createBuggyMessage = function(a, b) {
  var f;
  f = "<message><verb>SendNoteProperty</verb><properties><MessageType>BuggyMessage</MessageType>" + ("<BuggyMsg><![CDATA[" + b + "]]\x3e</BuggyMsg>") + ("<transaction_id>" + a + "</transaction_id>") + "<end_of_transaction>true</end_of_transaction>";
  return f += "</properties></message>";
};
CTATTutorMessageBuilder.prototype.createLockWidgetMsg = function(a) {
  return "<message><verb>SendNoteProperty</verb><properties><MessageType>SendWidgetLock</MessageType>" + ("<WidgetLockFlag>" + a + "</WidgetLockFlag>") + "</properties></message>";
};
CTATTutorMessageBuilder.prototype.createMessage = function(a, b) {
  var f = "<message><verb>SendNoteProperty</verb><properties><MessageType>" + a + "</MessageType>";
  if (b) {
    for (var e in b) {
      f += "<" + e + ">" + b[e] + "</" + e + ">";
    }
  }
  f += "</properties></message>";
  this.ctatdebug("CTATTutorMessageBuilder.createMessage(" + a + ", " + b + ") returns " + f);
  return f;
};
CTATTutorMessageBuilder.prototype.createStateGraphMessage = function(a, b, f, e, d, c, g) {
  a = "<message><verb>SendNoteProperty</verb><properties><MessageType>StateGraph</MessageType>" + ("<caseInsensitive>" + a + "</caseInsensitive>") + ("<unordered>" + b + "</unordered>") + ("<lockWidget>" + f + "</lockWidget>");
  a += "<suppressStudentFeedback>" + e + "</suppressStudentFeedback>";
  a += "<highlightRightSelection>" + d + "</highlightRightSelection>";
  a += "<confirmDone>" + c + "</confirmDone>";
  a += "<skillBarDelimiter><![CDATA[`]]\x3e</skillBarDelimiter>";
  a += this.fmtSkillBarVector(g);
  return a += "</properties></message>";
};
CTATTutorMessageBuilder.prototype.fmtSkillBarVector = function(a) {
  var b = "";
  if (void 0 !== a && null !== a && 0 < a.length) {
    for (var b = b + "<Skills>", f = 0;f < a.length;f++) {
      b += "<value><![CDATA[" + a[f] + "]]\x3e</value>";
    }
    b += "</Skills>";
  }
  return b;
};
CTATTutorMessageBuilder.prototype.createHighlightWidgetMessage = function(a, b, f, e) {
  a = "<message><verb>SendNoteProperty</verb><properties><MessageType>HighlightMsg</MessageType>" + ("<HighlightMsgText>" + f + "</HighlightMsgText>") + ("<Selection><value>" + a + "</value></Selection>") + ("<Action><value>" + b + "</value></Action>");
  a += "<transaction_id>" + e + "</transaction_id>";
  a += "<end_of_transaction>true</end_of_transaction>";
  return a += "</properties></message>";
};
Object.defineProperty(CTATTutorMessageBuilder, "TRIGGER", {enumerable:!1, configurable:!1, writable:!1, value:"trigger"});
Object.defineProperty(CTATTutorMessageBuilder, "SUBTYPE", {enumerable:!1, configurable:!1, writable:!1, value:"subtype"});
Object.defineProperty(CTATTutorMessageBuilder, "TUTOR_PERFORMED", {enumerable:!1, configurable:!1, writable:!1, value:"tutor-performed"});
Object.defineProperty(CTATTutorMessageBuilder, "HINT", {enumerable:!1, configurable:!1, writable:!1, value:"Hint"});
Object.defineProperty(CTATTutorMessageBuilder, "CORRECT", {enumerable:!1, configurable:!1, writable:!1, value:"Correct"});
CTATTutorMessageBuilder.prototype.constructor = CTATTutorMessageBuilder;
"undefined" !== typeof module && (module.exports = CTATTutorMessageBuilder);
var CTATLMS = {identifier:null, initLMSConnection:function() {
}, closeLMSConnection:function() {
}, setValue:function(a, b) {
}, getValue:function(a) {
  return null;
}, saveProblemState:function(a) {
}, getProblemState:function(a) {
  return a(null);
}, gradeStudent:function(a, b) {
}, processProblemSummary:function(a) {
}, is:{}, init:{}};
CTATLMS.init.StandAlone = function() {
  CTATLMS.identifier = null;
  CTATLMS.initLMSConnection = function() {
  };
  CTATLMS.closeLMSConnection = function() {
  };
  CTATLMS.setValue = function() {
  };
  CTATLMS.getValue = function() {
    return null;
  };
  CTATLMS.saveProblemState = function() {
  };
  CTATLMS.getProblemState = function(a) {
    return a(null);
  };
  CTATLMS.gradeStudent = function() {
  };
  CTATLMS.processProblemSummary = function() {
  };
};
CTATLMS.is.SCORM = function() {
  return window.location.search && /mode=SCORM/i.test(window.location.search);
};
CTATLMS.init.SCORM = function() {
  CTATLMS.identifier = "SCORM";
  CTATLMS.initLMSConnection = window.parent.doLMSInitialize;
  CTATLMS.closeLMSConnection = window.parent.doLMSFinish;
  CTATLMS.setValue = window.parent.doLMSSetValue;
  CTATLMS.getValue = window.parent.doLMSGetValue;
  CTATLMS.saveProblemState = function(a) {
    return CTATLMS.setValue("saveandrestore", a.problem_state);
  };
  CTATLMS.getProblemState = function(a) {
    return a(CTATLMS.getValue("saveandrestore"));
  };
  CTATLMS.gradeStudent = function(a, b) {
    return CTATLMS.setValue("cmi.core.score.raw", (a / b).toFixed(2));
  };
  CTATLMS.processProblemSummary = function(a) {
    ["cmi.core.lesson_status", "cmi.core.score.raw", "cmi.core.exit", "cmi.core.session_time"].forEach(function(a) {
      var f = this.getElementsByTagName(a);
      CTATLMS.setValue(a, f);
    }, a);
  };
};
CTATLMS.is.Authoring = function() {
  return window.location.search && /mode=AUTHORING/i.test(window.location.search);
};
CTATLMS.is.TutorShop = function() {
  return window.frameElement && /"LMS":\s*"TutorShop"/i.test(window.frameElement.getAttribute("data-params"));
};
CTATLMS.init.TutorShop = function() {
  CTATLMS.identifier = "TutorShop";
  CTATLMS.initLMSConnection = function() {
  };
  CTATLMS.closeLMSConnection = function() {
  };
  CTATLMS.setValue = function(a, b) {
  };
  CTATLMS.getValue = function(a) {
    return null;
  };
  CTATLMS.saveProblemState = function(a) {
    if (CTATConfiguration.get("curriculum_service_url")) {
      a.session_id = a.session_id ? a.session_id : "dummySession";
      var b = [], f;
      for (f in a) {
        b.push(f + "=" + encodeURIComponent(a[f]));
      }
      $.post(CTATConfiguration.get("curriculum_service_url"), b.join("&"), null, "application/x-www-form-urlencoded");
    }
  };
  CTATLMS.getProblemState = function(a) {
    CTATConfiguration.get("restoreProblemUrl") ? $.get(CTATConfiguration.get("restoreProblemUrl"), "", null, "text").done(function(b) {
      a(b);
    }).fail(function(b, f, e) {
      a(null);
      b = (new CTATTutorMessageBuilder).createErrorMessage("Load ProblemState Error", f + " " + e);
      CTAT.ToolTutor.sendToInterface(b, !0);
    }) : a(null);
  };
  CTATLMS.gradeStudent = function() {
  };
  CTATLMS.processProblemSummary = function() {
  };
};
var CTATFlashVars = function() {
  CTATConfiguration.call(this, "CTATFlashVars", "flashvars");
};
CTATFlashVars.prototype = Object.create(CTATConfiguration.prototype);
CTATFlashVars.prototype.constructor = CTATFlashVars;
var CTATLogMessageBuilder = function() {
  CTATBase.call(this, "CTATLogMessageBuilder", "logmessagebuilder");
  var a = this, b = [], f = [];
  this.setContextName = function(a) {
    contextGUID = a;
  };
  this.getContextName = function() {
    return contextGUID;
  };
  this.makeSessionElement = function() {
    var a = flashVars.getRawFlashVars();
    return void 0 != a.log_session_id && null != a.log_session_id ? "<session_id>" + a.log_session_id + "</session_id>" : "<session_id>" + a.session_id + "</session_id>";
  };
  this.createContextMessage = function(b) {
    a.ctatdebug("createContextMessage()");
    var d = new Date, c = flashVars.getRawFlashVars(), g = '<context_message context_message_id="' + this.getContextName() + '" name="START_PROBLEM">';
    b || (g += this.makeMetaElement(d));
    void 0 != c.class_name ? "" != c.class_name ? (b = "<class>" + ("<name>" + c.class_name + "</name>"), void 0 != c.school_name && (b += "<school>" + c.school_name + "</school>"), void 0 != c.period_name && (b += "<period>" + c.period_name + "</period>"), void 0 != c.class_description && (b += "<description>" + c.class_description + "</description>"), void 0 != c.instructor_name && (b += "<instructor>" + c.instructor_name + "</instructor>"), b += "</class>") : b = "<class />" : b = "<class />";
    g += b;
    b = flashVars.getDatasetTypes();
    var f = flashVars.getDatasetNames();
    a.ctatdebug("Check: " + b.length + ", " + f.length);
    if (null != b && null != f) {
      a.ctatdebug("We have valid data set names and types, adding to message ...");
      for (var d = "<dataset>" + ("<name>" + c.dataset_name + "</name>"), l = 0;l < b.length;l++) {
        a.ctatdebug("Adding ..."), d += '<level type="' + b[l] + '">', d += "<name>" + f[l] + "</name>";
      }
      d += "<problem ";
      a.ctatdebug('Checking vars ["problem_tutorflag"]: ' + c.problem_tutorflag);
      a.ctatdebug('Checking vars ["problem_otherproblemflag"]: ' + c.problem_otherproblemflag);
      if (void 0 != c.problem_tutorflag || void 0 != c.problem_otherproblemflag) {
        void 0 != c.problem_tutorflag ? d += ' tutorFlag="' + c.problem_tutorflag + '"' : void 0 != c.problem_otherproblemflag && (d += 'tutorFlag="' + c.problem_otherproblemflag + '"');
      }
      d = d + ">" + ("<name>" + c.problem_name + "</name>");
      d = void 0 != c.problem_context ? d + ("<context>" + c.problem_context + "</context>") : d + "<context />";
      d += "</problem>";
      for (c = 0;c < b.length;c++) {
        d += "</level>";
      }
      g += d + "</dataset>";
    }
    c = "";
    b = flashVars.getConditionNames();
    d = flashVars.getConditionTypes();
    f = flashVars.getConditionDescriptions();
    if (0 < b.length) {
      for (l = 0;l < b.length;l++) {
        c += "<condition><name>" + b[l] + "</name>", c += "" == d[l] ? "" : "<type>" + d[l] + "</type>", c += "" == f[l] ? "" : "<desc>" + f[l] + "</desc>", c += "</condition>";
      }
    }
    var g = g + c, c = flashVars.getCustomFields(), m;
    for (m in c) {
      c.hasOwnProperty(m) && (g += "<custom_field>", g += "<name>" + m + "</name>", g += "<value>" + c[m] + "</value>", g += "</custom_field>");
    }
    g += "</context_message>";
    a.ctatdebug("messageString = " + g);
    return g;
  };
  this.createSemanticEventToolMessage = function(e, d, c, g, h, l) {
    a.ctatdebug("createSemanticEventToolMessage(" + l + ")");
    var m = new Date;
    flashVars.getRawFlashVars();
    var q = '<tool_message context_message_id="' + this.getContextName() + '">';
    h || (q += this.makeMetaElement(m));
    d = '<semantic_event transaction_id="' + d + '" name="' + c + '"';
    "" != g && (d += ' subtype="' + g + '"');
    void 0 != l && "" != l && (d += ' trigger="' + l + '"');
    q += d + "/>";
    g = "<event_descriptor>";
    e = e.toXMLString(!0);
    q += g + e + "</event_descriptor>";
    q += this.createCustomFields(b, f);
    q += "</tool_message>";
    a.ctatdebug("messageString = " + q);
    return q;
  };
  this.createUIEventToolMessage = function(e, d, c, g) {
    a.ctatdebug("createUIEventToolMessage()");
    var h = new Date;
    flashVars.getRawFlashVars();
    var l = '<tool_message context_message_id="' + this.getContextName() + '">';
    g || (l += this.makeMetaElement(h));
    l += '<ui_event name="' + d + '">' + c + "</ui_event>";
    e = "<event_descriptor>" + e.toSerializedString();
    l = l + (e + "</event_descriptor>") + this.createCustomFields(b, f);
    l += "</tool_message>";
    a.ctatdebug("messageString = " + l);
    return l;
  };
  this.createTutorMessage = function(e, d, c, g, h, l, m, q) {
    a.ctatdebug("createTutorMessage()");
    var p = new Date;
    flashVars.getRawFlashVars();
    var n = '<tutor_message context_message_id="' + this.getContextName() + '">';
    q || (n += this.makeMetaElement(p));
    d = '<semantic_event transaction_id="' + d + '" name="' + c + '"';
    "" !== l && (d += ' subtype="' + l + '"');
    n += d + "/>";
    e = "<event_descriptor>" + e.toXMLString(!0);
    n += e + "</event_descriptor>";
    e = "<action_evaluation ";
    g.hasClassification() && null != g.getAttributeString() && (e += g.getAttributeString());
    e += ">" + g.getEvaluation() + "</action_evaluation>";
    n += e;
    "" != h && (n += "<tutor_advice>" + h + "</tutor_advice>");
    null != m && (a.ctatdebug("Adding skills to log message ..."), n += m.toLogString());
    n += this.createCustomFields(b, f);
    n += "</tutor_message>";
    a.ctatdebug("messageString = " + n);
    return n;
  };
  this.createGenericMessage = function(b, d) {
    a.ctatdebug("createGenericMessage()");
    flashVars.getRawFlashVars();
    var c = '<message context_message_id="' + this.getContextName() + '">', c = c + b + "</message>";
    a.ctatdebug("messageString = " + c);
    return c;
  };
  this.makeMetaElement = function(b) {
    a.ctatdebug("makeMetaElement ()");
    var d = flashVars.getRawFlashVars(), c;
    c = "<meta>" + ("<user_id>" + d.user_guid + "</user_id>");
    c += "<session_id>" + d.session_id + "</session_id>";
    c += "<time>" + this.formatTimeStamp(b) + "</time>";
    return c += "<time_zone>" + flashVars.getTimeZone() + "</time_zone></meta>";
  };
  this.wrapForOLI = function(b) {
    a.ctatdebug("wrapForOLI ()");
    var d = new Date, c = flashVars.getRawFlashVars();
    b = encodeURIComponent(b);
    var g;
    g = '<?xml version="1.0" encoding="UTF-8"?><log_action ' + ('auth_token="' + encodeURIComponent(c.auth_token) + '" ');
    g = void 0 != c.log_session_id && null != c.session_id ? g + ('session_id="' + c.log_session_id + '" ') : g + ('session_id="' + c.session_id + '" ');
    g = g + 'action_id="EVALUATE_QUESTION" ' + ('user_guid="' + c.user_guid + '" ');
    g += 'date_time="' + this.formatTimeStampOLI(d) + '" ';
    g += 'timezone="' + flashVars.getTimeZone() + '" ';
    g += 'source_id="' + c.source_id + '" ';
    g = c.activity_context_guid ? g + ('external_object_id="' + c.activity_context_guid + '" info_type="tutor_message.dtd">') : g + 'external_object_id="" info_type="tutor_message.dtd">';
    return g + b + "</log_action>";
  };
  this.createLogSessionStart = function() {
    a.ctatdebug("createLogSessionStart ()");
    var b = new Date;
    a.ctatdebug("Date: " + b);
    var d = '<log_session_start timezone="' + flashVars.getTimeZone() + '" ', c = flashVars.getRawFlashVars(), d = d + ('date_time="' + this.formatTimeStampOLI(b) + '" '), d = d + ('auth_token="' + c.auth_token + '" '), d = d + ('session_id="' + c.session_id + '" '), d = d + ('user_guid="' + c.user_guid + '" ');
    return d + 'class_id="" treatment_id="" assignment_id="" info_type="tutor_message.dtd"/>';
  };
  this.formatTimeStamp = function(b) {
    a.ctatdebug("formatTimeStamp (" + b + ")");
    var d = "", c = b.getUTCFullYear(), d = d + (c + "-"), c = b.getUTCMonth();
    c++;
    d += (10 > c ? "0" + c : c) + "-";
    c = b.getUTCDate();
    d += (10 > c ? "0" + c : c) + " ";
    c = b.getUTCHours();
    d += (10 > c ? "0" + c : c) + ":";
    c = b.getUTCMinutes();
    d += (10 > c ? "0" + c : c) + ":";
    c = b.getUTCSeconds();
    d += 10 > c ? "0" + c : c;
    b = b.getUTCMilliseconds();
    return d + "." + b;
  };
  this.formatTimeStampOLI = function(b) {
    a.ctatdebug("formatTimeStampOLI (" + b + ")");
    var d = "", c = b.getUTCFullYear(), d = d + (c + "/"), c = b.getUTCMonth();
    c++;
    d += (10 > c ? "0" + c : c) + "/";
    c = b.getUTCDate();
    d += (10 > c ? "0" + c : c) + " ";
    c = b.getUTCHours();
    d += (10 > c ? "0" + c : c) + ":";
    c = b.getUTCMinutes();
    d += (10 > c ? "0" + c : c) + ":";
    c = b.getUTCSeconds();
    d += 10 > c ? "0" + c : c;
    b = b.getUTCMilliseconds();
    return d + "." + b;
  };
  this.resetCustomFields = function() {
    a.ctatdebug("resetCustomFields ()");
    b = [];
    f = [];
  };
  this.createCustomFields = function(b, d) {
    a.ctatdebug("createCustomFields ()");
    if (null == b || null == d) {
      return a.ctatdebug("No custom fields provided"), "";
    }
    a.ctatdebug("Processing " + b.length + " custom fields ...");
    for (var c = "", g = 0;g < b.length;g++) {
      a.ctatdebug("Adding custom field: [" + b[g] + "],[" + d[g] + "]"), c += "<custom_field>", c += "<name>" + b[g] + "</name>", c += "<value>" + d[g] + "</value>", c += "</custom_field>";
    }
    return c;
  };
  this.addCustomFields = function(e, d) {
    a.ctatdebug("addCustomFields ()");
    if (void 0 != e) {
      for (var c = 0;c < e.length;c++) {
        b.push(e[c]), f.push(d[c]);
      }
    }
  };
  this.addCustomField = function(e, d) {
    a.ctatdebug("addCustomfield (" + e + "," + d + ")");
    b.push(e);
    f.push(d);
  };
  this.getCustomFieldNames = function() {
    return b;
  };
  this.getCustomFieldValues = function() {
    return f;
  };
};
CTATLogMessageBuilder.prototype = Object.create(CTATBase.prototype);
CTATLogMessageBuilder.prototype.constructor = CTATLogMessageBuilder;
var CTATCustomLogElementObject = function() {
  this.reset = function() {
  };
  this.addCustomLogElement = function(a, b) {
    customElementsNames.push(a);
    customElementsTypes.push(a);
  };
  this.getCustomElementNames = function() {
    return customElementsNames;
  };
  this.getCustomElementTypes = function() {
    return customElementsTypes;
  };
};
var loggingDisabled = !1, CTATLoggingLibrary = function(a) {
  CTATBase.call(this, "CTATLoggingLibrary", "logginglibrary");
  var b = this, f = !0, e = !1, d = !1, c = [], g = "undefined", h = "undefined", l = "undefined", m = "undefined", q = "undefined", p = "undefined", n = "undefined", x = "undefined", u = "UnassignedDataset", w = "UnassignedLevelName", z = "UnassignedLevelType", x = (new CTATGuid).guid();
  void 0 != a && null != a ? (e = a, 0 == e && (commLogMessageBuilder = new CTATLogMessageBuilder)) : commLogMessageBuilder = new CTATLogMessageBuilder;
  var t = new CTATCommLibrary;
  t.setName("commLoggingLibrary");
  t.setUseCommSettings(!1);
  t.assignHandler(this);
  this.generateSession = function() {
    var a = new CTATGuid;
    c.session_id = "ctat_session_" + a.guid();
    return c.session_id;
  };
  this.setLogClassName = function(a) {
    g = a;
  };
  this.setDatasetName = function(a) {
    u = a;
  };
  this.setDatasetLevelName = function(a) {
    w = a;
  };
  this.setDatasetLevelType = function(a) {
    z = a;
  };
  this.setSchool = function(a) {
    h = a;
  };
  this.setPeriod = function(a) {
    l = a;
  };
  this.setDescription = function(a) {
    m = a;
  };
  this.setInstructor = function(a) {
    q = a;
  };
  this.setProblemName = function(a) {
    p = a;
  };
  this.setProblemContext = function(a) {
    n = a;
  };
  this.setUserID = function(a) {
    x = a;
  };
  this.getLoggingCommLibrary = function() {
    return t;
  };
  this.setUseSessionLog = function(a) {
    f = a;
  };
  this.setLoggingURL = function(a) {
    b.getLoggingCommLibrary().setFixedURL(a);
  };
  this.setupExternalLibraryUsage = function() {
    b.ctatdebug("setupExternalLibraryUsage ()");
    c.class_name = g;
    c.school_name = h;
    c.period_name = l;
    c.class_description = m;
    c.instructor_name = q;
    c.dataset_name = u;
    c.problem_name = p;
    c.problem_context = n;
    c.auth_token = "";
    c.user_guid = x;
    var a = new CTATGuid;
    c.session_id = "ctat_session_" + a.guid();
    c.source_id = "tutor";
    c.dataset_level_name1 = w;
    c.dataset_level_type1 = z;
    flashVars = new CTATFlashVars;
    flashVars.assignRawFlashVars(c);
  };
  this.initCheck = function() {
    b.ctatdebug("initCheck ()");
    0 == e && 0 == d && (b.setupExternalLibraryUsage(), d = !0);
  };
  this.sendMessage = function(a) {
    b.ctatdebug("sendMessage ()");
    b.ctatdebug("Raw log message to send: " + a);
    this.sendMessageInternal(a);
  };
  this.sendMessageInternal = function(a) {
    b.ctatdebug("sendMessageInternal ()");
    if (!0 === loggingDisabled) {
      b.ctatdebug("Warning: loggingDisabled==true");
    } else {
      if (1 == e) {
        var c = flashVars.getRawFlashVars();
        if (null != c) {
          if ("ClientToService" != c.Logging && "ClientToLogServer" != c.Logging) {
            b.ctatdebug("Logging is turned off, as per: " + c.Logging);
            return;
          }
          "ClientToService" != c.Logging || "http" != c.tutoring_service_communication && "https" != c.tutoring_service_communication || (b.setLoggingURL(c.remoteSocketURL + ":" + c.remoteSocketPort), b.ctatdebug("Reconfigured the logging url to be: " + c.remoteSocketURL + ":" + c.remoteSocketPort));
        }
      }
      b.ctatdebug("Pre encoded log message: " + a);
      0 > a.indexOf("<log_session_start") && (a = commLogMessageBuilder.wrapForOLI('<?xml version="1.0" encoding="UTF-8"?><tutor_related_message_sequence version_number="4">' + a + "</tutor_related_message_sequence>"));
      b.ctatdebug("Encoded log message: " + a);
      t.sendXMLNoBundle(a);
    }
  };
  this.startProblem = function() {
    b.ctatdebug("startProblem ()");
    b.initCheck();
    b.logSessionStart();
    b.sendMessage(commLogMessageBuilder.createContextMessage(!0));
  };
  this.logSessionStart = function() {
    b.ctatdebug("logSessionStart ()");
    b.initCheck();
    var a = flashVars.getRawFlashVars();
    void 0 != a.SessionLog && ("true" == a.SessionLog ? (b.ctatdebug("Turning SessionLog on ..."), f = !0) : (b.ctatdebug("Turning SessionLog off ..."), f = !1));
    !0 === f && this.sendMessage(commLogMessageBuilder.createLogSessionStart());
  };
  this.logSemanticEvent = function(a, c, g, d, e, f, h) {
    b.ctatdebug("logSemanticEvent (" + h + ")");
    b.initCheck();
    var l = new Date;
    commLogMessageBuilder.resetCustomFields();
    commLogMessageBuilder.addCustomFields(e, f);
    commLogMessageBuilder.addCustomField("tool_event_time", commLogMessageBuilder.formatTimeStamp(l) + " UTC");
    a = commLogMessageBuilder.createSemanticEventToolMessage(c, a, g, d, !0, h);
    this.sendMessage(a);
  };
  this.logTutorResponse = function(a, c, g, d, e, f, h, l, m) {
    b.ctatdebug("logTutorResponse ()");
    b.initCheck();
    var n = new Date;
    commLogMessageBuilder.resetCustomFields();
    commLogMessageBuilder.addCustomFields(l, m);
    commLogMessageBuilder.addCustomField("tutor_event_time", commLogMessageBuilder.formatTimeStamp(n) + " UTC");
    b.ctatdebug("Formatting feedback ...");
    void 0 != f && null != f ? f = "<![CDATA[" + CTATGlobals.languageManager.filterString(f) + "]]\x3e" : (b.ctatdebug("No feedback provided, using empty string"), f = "");
    b.ctatdebug("Creating tutor message ...");
    a = commLogMessageBuilder.createTutorMessage(c, a, g, e, f, d, h, !0);
    this.sendMessage(a);
  };
  this.processMessage = function(a) {
    b.ctatdebug("processMessage ()");
    b.ctatdebug("Response from log server: " + a);
  };
  this.start = function() {
    b.ctatdebug("start ()");
    var a = b.generateSession();
    b.startProblem();
    return a;
  };
  this.endSession = function() {
    this.generateSession();
  };
};
CTATLoggingLibrary.prototype = Object.create(CTATBase.prototype);
CTATLoggingLibrary.prototype.constructor = CTATLoggingLibrary;
var CTATTutoringServiceMessageBuilder = function() {
  CTATBase.call(this, "CTATTutoringServiceMessageBuilder", "__undefined__");
  this.createStartProblemMessage = function(a) {
    this.ctatdebug("createStartProblemMessage ()");
    return "<message><verb>NotePropertySet</verb><properties><MessageType>StartProblem</MessageType><ProblemName>" + a + "</ProblemName></properties></message>";
  };
  this.createInterfaceIdentificationMessage = function(a) {
    this.ctatdebug("createInterfaceIdentificationMessage (" + a + ")");
    return "<message><verb>NotePropertySet</verb><properties><MessageType>InterfaceIdentification</MessageType><Guid>" + a + "</Guid></properties></message>";
  };
  this.createInterfaceDescriptionMessage = function(a) {
    this.ctatdebug("createInterfaceDescriptionMessage ()");
    var b;
    b = "<message><verb>NotePropertySet</verb><properties><MessageType>MessageBundle</MessageType><messages><message><verb>NotePropertySet</verb><properties><MessageType>InterfaceDescription</MessageType>" + ("<WidgetType>" + a.getClassName() + "</WidgetType>");
    b += "<CommName>" + a.getName() + "</CommName>";
    return "" + (b + "<UpdateEachCycle>false</UpdateEachCycle><serialized></serialized></properties></message></messages></properties></message>");
  };
  this.createSetPreferencesMessage = function(a) {
    this.ctatdebug("createSetPreferencesMessage ()");
    var b = CTATConfiguration.getRawFlashVars(), f;
    f = "<message><verb>NotePropertySet</verb><properties><MessageType>SetPreferences</MessageType>" + ("<log_service_url>" + b.log_service_url + "</log_service_url>");
    var e = !1, d = !1, c = b.Logging;
    this.ctatdebug("Parsing and processing logMethod: " + c);
    switch(c) {
      case "ServiceToLogServer":
        e = !0;
        break;
      case "ServiceToDisk":
        d = !0;
        break;
      case "ServiceToDiskAndLogServer":
        d = e = !0;
        break;
      case "ClientToLogServer":
        d = e = !0;
    }
    f = f + ("<log_to_remote_server>" + e + "</log_to_remote_server><log_to_disk>" + d + "</log_to_disk>") + ("<log_to_disk_directory>" + b.log_to_disk_directory + "</log_to_disk_directory>");
    f += "<logging>" + b.Logging + "</logging>";
    f += "<user_guid>" + b.user_guid + "</user_guid>";
    f += "<problem_name>" + b.problem_name + "</problem_name>";
    f += "<question_file><![CDATA[" + encodeURI(b.question_file) + "]]\x3e</question_file>";
    f += "<class_name>" + b.class_name + "</class_name>";
    f += "<school_name>" + b.school_name + "</school_name>";
    f += "<instructor_name>" + b.instructor_name + "</instructor_name>";
    f += "<session_id>" + b.session_id + "</session_id>";
    f += "<source_id>" + b.source_id + "</source_id>";
    f += "<sui><![CDATA[" + b.sui + "]]\x3e</sui>";
    f += "<problem_state_status>" + b.problem_state_status + "</problem_state_status>";
    f += "<curriculum_service_url>" + b.curriculum_service_url + "</curriculum_service_url>";
    f += "<restore_problem_url>" + b.restore_problem_url + "</restore_problem_url>";
    null !== skillSet && (f += skillSet.toSetPreferencesXMLString());
    f = f + ("<CommShellVersion>" + a + "</CommShellVersion>") + "</properties></message>";
    return "" + f;
  };
  this.createTracerActionMessage = function(a, b) {
    this.ctatdebug("createTracerActionMessage ()");
    var f;
    f = "<message><verb>NotePropertySet</verb><properties><MessageType>TracerAction</MessageType>" + ("<transaction_id>" + a + "</transaction_id>") + b.toXMLString(!1);
    return "" + (f + "</properties></message>");
  };
  this.createInterfaceActionMessage = function(a, b) {
    this.ctatdebug("createInterfaceActionMessage ()");
    var f;
    f = "<message><verb>NotePropertySet</verb><properties><MessageType>InterfaceAction</MessageType>" + ("<transaction_id>" + a + "</transaction_id>") + b.toXMLString(!1);
    return "" + (f + "</properties></message>");
  };
  this.createUntutoredActionMessage = function(a, b) {
    this.ctatdebug("createUntutoredActionMessage (" + a + ")");
    var f;
    f = "<message><verb>NotePropertySet</verb><properties><MessageType>UntutoredAction</MessageType>" + ("<transaction_id>" + a + "</transaction_id>") + b.toXMLString(!1);
    return "" + (f + "</properties></message>");
  };
  this.createProblemSummaryRequestMessage = function() {
    return "<message><verb>NotePropertySet</verb><properties><MessageType>ProblemSummaryRequest</MessageType></properties></message>";
  };
  this.createProblemRestoreEndMessage = function() {
    return "<message><verb>NotePropertySet</verb><properties><MessageType>ProblemRestoreEnd</MessageType></properties></message>";
  };
  this.createInterfaceConfigurationEnd = function() {
    return "<message><verb>NotePropertySet</verb><properties><MessageType>InterfaceConfigurationEnd</MessageType></properties></message>";
  };
  this.createInCorrectActionMessage = function(a, b) {
    this.ctatdebug("createInCorrectActionMessage ()");
    var f;
    f = "<message><verb>SendNoteProperty</verb><properties><MessageType>InCorrectAction</MessageType>" + ("<transaction_id>" + a + "</transaction_id>") + b.toXMLString(!1);
    return "" + (f + "</properties></message>");
  };
  this.createCorrectActionMessage = function(a, b) {
    this.ctatdebug("createCorrectActionMessage ()");
    var f;
    f = "<message><verb>SendNoteProperty</verb><properties><MessageType>CorrectAction</MessageType>" + ("<transaction_id>" + a + "</transaction_id>") + b.toXMLString(!1);
    return "" + (f + "</properties></message>");
  };
  this.createAssociatedRulesMessage = function(a, b, f, e, d, c) {
    a = "<message><verb>SendNoteProperty</verb><properties><MessageType>AssociatedRules</MessageType>" + ("<Indicator>" + a + "</Indicator>") + b.toXMLString();
    f = f.toXMLString().replace("<Selection>", "<StudentSelection>").replace("<Action>", "<StudentAction>").replace("<Input>", "<StudentInput>");
    f = f.replace("</Selection>", "</StudentSelection>").replace("</Action>", "</StudentAction>").replace("</Input>", "</StudentInput>");
    return "" + (a + f);
  };
};
CTATTutoringServiceMessageBuilder.prototype = Object.create(CTATBase.prototype);
CTATTutoringServiceMessageBuilder.prototype.constructor = CTATTutoringServiceMessageBuilder;
var CTATMessageHandler = function() {
  CTATBase.call(this, "CTATMessageHandler", "messagehandler");
  var a = null, b = this, f = [], e = null, d = 0, e = CTATConfig.parserType_is_XML() ? new CTATXML : new CTATJSON;
  this.assignHandler = function(c) {
    b.ctatdebug("assignHandler ()");
    a = c;
  };
  this.reset = function() {
    b.ctatdebug("reset ()");
    f = [];
  };
  this.getInStartState = function() {
    return inStartState;
  };
  var c = !1;
  this.receiveFromTutor = function(a) {
    this.processMessage(a);
  };
  this.processMessage = function(a) {
    b.ctatdebug("Incoming message: " + a);
    b.ctatdebug("processMessage (" + lastMessage + ")");
    if (!0 !== c) {
      if (CTATConfig.parserType_is_JSON() && -1 != a.indexOf("<?xml")) {
        alert("Error: CTAT is configured to parse JSON but it received an XML message, disabling comm capabilities ..."), c = !0;
      } else {
        if (CTATConfig.parserType_is_XML() && 0 === a.indexOf("{")) {
          alert("Error: CTAT is configured to parse XML but it received a JSON message, disabling comm capabilities ..."), c = !0;
        } else {
          var d;
          b.ctatdebug("Attempting parse ...");
          d = e.parse(a);
          null === d ? b.ctatdebug("Error parsing message: " + a) : this.parseElement(d);
        }
      }
    }
  };
  this.parseElement = function(a) {
    var c = e.getElementName(a);
    b.ctatdebug("parseElement (" + c + ")");
    "CTATResponseMessages" != c && "StartStateMessages" != c && "MessageBundle" != c || this.processMessageBundle(a);
    "message" == c && this.processSingleMessage(a);
  };
  this.processMessageBundle = function(a) {
    var c = e.getElementName(a);
    b.ctatdebug("processMessageBundle (" + c + ")");
    a = e.getElementChildren(a);
    if (null === a) {
      b.ctatdebug("Error parsing bundle");
    } else {
      for (ctatdebug("Processing " + a.length + " objects in bundle"), c = 0;c < a.length;c++) {
        this.parseElement(a[c]);
      }
    }
  };
  this.processSingleMessage = function(c) {
    b.ctatdebug("processSingleMessage (" + e.getElementName(c) + ")");
    var h = new CTATMessage(c);
    c = e.getElementChildren(c);
    b.ctatdebug("Generated CTATMessage, now doing regular processing ...");
    for (var l = 0;l < c.length;l++) {
      var m = c[l];
      if ("properties" == e.getElementName(m)) {
        b.ctatdebug("Parsing properties ...");
        for (var q = e.getElementChildren(m), p = 0;p < q.length;p++) {
          var n = q[p];
          if ("MessageType" == e.getElementName(n)) {
            n = e.getNodeTextValue(n);
            b.ctatdebug("MessageType: " + n);
            "StateGraph" == n && (console.log("Setting inStartState to true"), inStartState = !0, this.processStateGraph(m), commShell.propagateShellEvent("StateGraph", h));
            "StartProblem" == n && (b.ctatdebug("Setting inStartState to true"), inStartState = !0, this.processStartProblem(q), commShell.propagateShellEvent("StartProblem", h));
            "InterfaceIdentification" == n && (this.processInterfaceIdentification(q), commShell.propagateShellEvent("InterfaceIdentification", h));
            "InterfaceDescription" == n && (this.processInterfaceDescription(q), commShell.propagateShellEvent("InterfaceDescription", h));
            "GetAllInterfaceDescriptions" == n && (commShell.getAllInterfaceDescriptions(), commShell.propagateShellEvent("GetAllInterfaceDescriptions", h));
            "SendWidgetLock" == n && (b.ctatdebug("Found: SendWidgetLock"), commShell.propagateShellEvent("SendWidgetLock", h));
            "CorrectAction" == n && (b.ctatdebug("Found: CorrectAction"), !0 === this.getInStartState() ? f.push(h) : a.processCorrectAction(h), commShell.propagateShellEvent("CorrectAction", h));
            "InCorrectAction" == n && (b.ctatdebug("Found: InCorrectAction"), !0 === inStartState ? f.push(h) : (b.ctatdebug("Handing incorrect message to messagehandler ..."), a.processInCorrectAction(h)), commShell.propagateShellEvent("InCorrectAction", h));
            "HighlightMsg" == n && (b.ctatdebug("Found: HighlightMsg"), a.processHighlightMsg(h), commShell.propagateShellEvent("HighlightMsg", h));
            "UnHighlightMsg" == n && (b.ctatdebug("Found: UnHighlightMsg"), a.processUnHighlightMsg(h), commShell.propagateShellEvent("UnHighlightMsg", h));
            if ("AssociatedRules" == n) {
              b.ctatdebug("Found: AssociatedRules (" + q.length + ")");
              for (var x = "", u = "", w = 0;w < q.length;w++) {
                var z = q[w];
                "TutorAdvice" == e.getElementName(z) && (x = e.getNodeTextValue(z));
                "Actor" == e.getElementName(z) && e.getNodeTextValue(z);
                "Indicator" == e.getElementName(z) && (u = e.getNodeTextValue(z));
                "StepID" == e.getElementName(z) && e.getNodeTextValue(z);
                "LogAsResult" == e.getElementName(z) && e.getNodeTextValue(z);
                "tool_selection" == e.getElementName(z) && e.getNodeTextValue(z);
                "Skills" == e.getElementName(z) && (b.ctatdebug("Processing skills ..."), null === skillSet && (b.ctatdebug("Interesting, there isn't a skillSet object yet. Creating ..."), skillSet = new CTATSkillSet), skillSet.parseByValue(z));
              }
              a.processAssociatedRules(h, u, x);
              commShell.propagateShellEvent("AssociatedRules", h);
            }
            "BuggyMessage" == n && (b.ctatdebug("Found: BuggyMessage"), a.processBuggyMessage(h), commShell.propagateShellEvent("BuggyMessage", h));
            "SuccessMessage" == n && (b.ctatdebug("Found: SuccessMessage"), a.processSuccessMessage(h), commShell.propagateShellEvent("SuccessMessage", h));
            "InterfaceAction" == n && (b.ctatdebug("Found: InterfaceAction"), !0 === inStartState ? (b.ctatdebug("inStartState==true => storing for later playback ..."), f.push(h)) : a.processInterfaceAction(h), commShell.propagateShellEvent("InterfaceAction", h));
            "InterfaceIdentification" == n && (b.ctatdebug("Found: InterfaceIdentification"), commShell.propagateShellEvent("InterfaceIdentification", h));
            "AuthorModeChange" == n && (b.ctatdebug("Found: AuthorModeChange"), a.globalReset(), commShell.propagateShellEvent("AuthorModeChange", h));
            "ResetAction" == n && (b.ctatdebug("Found: ResetAction"), a.globalReset(), commShell.propagateShellEvent("ResetAction", h));
            if ("ShowHintsMessage" == n) {
              b.ctatdebug("Found: ShowHintsMessage");
              x = !1;
              u = [];
              for (w = 0;w < q.length;w++) {
                if (z = q[w], "HintsMessage" == e.getElementName(z)) {
                  for (var z = e.getElementChildren(z), t = 0;t < z.length;t++) {
                    var D = z[t];
                    "value" == e.getElementName(D) && (u.push(e.getNodeTextValue(D)), x = !0);
                  }
                }
              }
              !0 === x ? a.processHintResponse(h, u) : b.ctatdebug("Error: incomplete hint message received");
              commShell.propagateShellEvent("ShowHintsMessage", h);
            }
            "ConfirmDone" == n && (b.ctatdebug("Found: ConfirmDone"), a.processConfirmDone(h), commShell.propagateShellEvent("ConfirmDone", h));
            "VersionInfo" == n && (b.ctatdebug("Found: VersionInfo"), a.processVersionInfo(q), commShell.propagateShellEvent("ConfirmDone", h));
            "TutoringServiceAlert" == n && (b.ctatdebug("Found: TutoringServiceAlert"), a.processTutoringServiceAlert(q), commShell.propagateShellEvent("TutoringServiceAlert", h));
            "TutoringServiceError" == n && (b.ctatdebug("Found: TutoringServiceError"), a.processTutoringServiceError(q), commShell.propagateShellEvent("TutoringServiceError", h));
            "ProblemSummaryResponse" == n && (b.ctatdebug("Found: ProblemSummaryResponse"), a.processProblemSummaryResponse(h), commShell.propagateShellEvent("ProblemSummaryResponse", h));
            if ("StartStateEnd" == n) {
              b.ctatdebug("Found: StartStateEnd");
              CTATShellTools.listComponents();
              null !== a ? a.processStartState() : this.ctatdebug("Error: no message handler object available to process start state");
              try {
                b.processStartStateActions();
              } catch (C) {
                b.ctatdebug("Caught in the act: " + C.message);
              }
              commShell.propagateShellEvent("StartStateEnd", h);
            }
            "ProblemRestoreEnd" == n && (b.ctatdebug("Found: ProblemRestoreEnd"), a.processProblemRestoreEnd(h), commShell.propagateShellEvent("ProblemRestoreEnd", h));
            "InterfaceReboot" == n && (n = "AUTHORING" == CTATTarget ? location.href : null, b.ctatdebug("Found: InterfaceReboot -- href " + n), n && 1 < ++d && location.replace(n));
          }
        }
      }
    }
  };
  this.processStateGraph = function(c) {
    b.ctatdebug("processStateGraph ()");
    if (void 0 === c || null === c) {
      b.ctatdebug("Error: state graph property list is undefined");
    } else {
      if (b.ctatdebug("Processing node: " + c.nodeName), null === e.getElementChildren(c)) {
        b.ctatdebug("Error: state graph property list is undefined");
      } else {
        c = e.getElementChildren(c);
        for (var d = 0;d < c.length;d++) {
          var f = c[d];
          b.ctatdebug("State graph attribute: " + e.getElementName(f));
          "caseInsensitive" == e.getElementName(f) && (caseInsensitive = "false" == e.getNodeTextValue(f) ? !1 : !0);
          "unordered" == e.getElementName(f) && (unordered = "false" == e.getNodeTextValue(f) ? !1 : !0);
          "lockWidget" == e.getElementName(f) && (lockWidget = "false" == e.getNodeTextValue(f) ? !1 : !0);
          "suppressStudentFeedback" == e.getElementName(f) && ("false" == e.getNodeTextValue(f) ? CTATGlobals.suppressStudentFeedback = !1 : CTATGlobals.suppressStudentFeedback = !0);
          "highlightRightSelection" == e.getElementName(f) && (highlightRightSelection = "false" == e.getNodeTextValue(f) ? !1 : !0);
          "confirmDone" == e.getElementName(f) && (b.ctatdebug("Confirm done: " + e.getNodeTextValue(f)), "true" == e.getNodeTextValue(f) ? CTATGlobals.confirmDone = !0 : CTATGlobals.confirmDone = !1);
          "Skills" == e.getElementName(f) && (null === skillSet && (skillSet = new CTATSkillSet), skillSet.parseByValue(f), a.updateSkillWindow());
        }
      }
    }
  };
  this.processStartProblem = function(c) {
    b.ctatdebug("processStartProblem ()");
    a.processStartProblem();
  };
  this.processInterfaceIdentification = function(a) {
  };
  this.processInterfaceDescription = function(a) {
    b.ctatdebug("processInterfaceDescription (" + a.length + ")");
    for (var c = "Unknown", d = "Unknown", f = null, q = 0;q < a.length;q++) {
      var p = a[q];
      b.ctatdebug("Inspecting element: " + e.getElementName(p));
      "WidgetType" == e.getElementName(p) && (b.ctatdebug("Widget type: " + e.getNodeTextValue(p)), c = e.getNodeTextValue(p));
      "CommName" == e.getElementName(p) && (b.ctatdebug("Instance name: " + e.getNodeTextValue(p)), d = e.getNodeTextValue(p));
      if ("serialized" == e.getElementName(p)) {
        b.ctatdebug("Prepareing to de-serialize component ...");
        for (var n = e.getElementChildren(p), x = 0;x < n.length;x++) {
          var u = n[x];
          -1 != e.getElementName(u).indexOf("CTAT") && (f = u);
        }
      }
      "interface" == e.getElementName(p) && (b.ctatdebug("Storing interface for post start-state reconstruction ..."), CTATGlobals.interfaceElement = p);
      "script" == e.getElementName(p) && (b.ctatdebug("Storing and loading main javascript code as defined by the BRD ..."), scriptElement = e.getNodeTextValue(p));
    }
    null !== f ? this.deserializeComponent(c, d, f) : b.ctatdebug("Error: unable to find CTAT serialization point of attachement");
    b.ctatdebug("processInterfaceDescription () done");
  };
  this.deserializeComponent = function(a, c, d) {
    b.ctatdebug("deserializeComponent (" + a + "," + c + ")");
    if (1 == ignoreInterfaceDescriptions) {
      b.ctatdebug("ignoreInterfaceDescriptions==true");
    } else {
      if (null === e.getElementAttr(d, "x")) {
        b.ctatdebug("Warning: this component does not have x,y information. Probably an older component");
      } else {
        var f = e.getElementAttr(d, "x"), q = e.getElementAttr(d, "y"), p = e.getElementAttr(d, "width"), n = e.getElementAttr(d, "height"), x = e.getElementAttr(d, "tabIndex"), u = e.getElementAttr(d, "zIndex");
        null === x && (x = -1);
        null === u && (u = 0);
        var w = new CTATComponentDescription;
        w.type = a;
        w.name = c;
        w.x = Math.floor(f);
        w.y = Math.floor(q);
        w.tabIndex = x;
        w.zIndex = u;
        w.width = Math.floor(p);
        w.height = Math.floor(n);
        CTATShellTools.registerComponentDescription(w);
        d = e.getElementChildren(d);
        for (f = 0;f < d.length;f++) {
          q = d[f];
          e.getElementName(q);
          if ("Parameters" == e.getElementName(q)) {
            for (this.ctatdebug("Processing component parameters ..."), p = e.getElementChildren(q)[0], p = e.getElementChildren(p), n = 0;n < p.length;n++) {
              var z = p[n];
              if ("CTATComponentParameter" == e.getElementName(z)) {
                this.ctatdebug("Processing parameter property (CTATComponentParameter) ...");
                for (var u = x = void 0, z = e.getElementChildren(z), t = 0;t < z.length;t++) {
                  var D = z[t];
                  "name" == e.getElementName(D) && (this.ctatdebug("Found parameter name: " + e.getNodeTextValue(D)), x = e.getNodeTextValue(D));
                  "value" == e.getElementName(D) && (this.ctatdebug("Found parameter value: " + e.getNodeTextValue(D)), u = e.getNodeTextValue(D).trim());
                }
                this.ctatdebug("Parameter name: " + x + ", value: " + u);
                void 0 !== x && (w.params[x] = u, "group" == x && (w.groupName = u));
              }
            }
          }
          if ("Styles" == e.getElementName(q)) {
            for (this.ctatdebug("Processing component styles ..."), q = e.getElementChildren(q)[0], q = e.getElementChildren(q), p = 0;p < q.length;p++) {
              if (u = q[p], "CTATStyleProperty" == e.getElementName(u)) {
                this.ctatdebug("Processing style property (CTATStyleProperty) ...");
                x = n = "";
                u = e.getElementChildren(u);
                for (z = 0;z < u.length;z++) {
                  t = u[z], "name" == e.getElementName(t) && (n = e.getNodeTextValue(t)), "value" == e.getElementName(t) && (x = e.getNodeTextValue(t).trim());
                }
                this.ctatdebug("Style (name: " + n + ", value: " + x + ")");
                "" !== n && (w.styles[n] = x);
              }
            }
          }
        }
        b.ctatdebug("deserializeComponent (" + a + "," + c + ") done");
      }
    }
  };
  this.processStartStateActions = function() {
    b.ctatdebug("processStartStateActions (" + f.length + ")");
    inProcessStartStateActions = !0;
    if (0 == f.length) {
      b.ctatdebug("No start state messages, bump");
    } else {
      if (0 < startStateHandlers.length) {
        for (var c = 0;c < startStateHandlers.length;c++) {
          startStateHandlers[c].processStartStateActions(f);
        }
      } else {
        for (c = 0;c < f.length;c++) {
          var d = f[c];
          b.ctatdebug("Processing startstate message type: " + d.getMessageType() + "(" + inProcessStartStateActions + ")");
          "InterfaceAction" == d.getMessageType() && a.processInterfaceAction(d);
          "CorrectAction" == d.getMessageType() && a.processCorrectAction(d);
          "InCorrectAction" == d.getMessageType() && a.processInCorrectAction(d);
          this.sleep(1E3);
        }
        if ("" != scriptElement) {
          try {
            eval(scriptElement);
          } catch (e) {
            alert("Error executing script from BRD: " + e.message);
          }
        }
      }
    }
    inProcessStartStateActions = !1;
  };
  this.sleep = function(a) {
    b.ctatdebug("sleep (" + a + ")");
  };
};
CTATMessageHandler.prototype = Object.create(CTATBase.prototype);
CTATMessageHandler.prototype.constructor = CTATMessageHandler;
var CTATNameTranslator = function() {
  CTATBase.call(this, "CTATNameTranslator", "translator");
  var a = !1, b = this;
  this.setPassthrough = function(b) {
    a = CTATGlobalFunctions.toBoolean(b);
  };
  this.getPassthrough = function() {
    return a;
  };
  this.manufactorJSON = function(a, e) {
    b.ctatdebug("manufactorJSON (" + a + "," + e + ")");
    var d = a.split(":");
    if (1 == d.length) {
      return b.ctatdebug("No range in aRange, returning basic JSON ..."), "";
    }
    var c = this.getA1Row(d[0]), g = this.getA1Col(d[0]), h = this.getA1Row(d[1]), l = this.getA1Col(d[1]);
    b.ctatdebug("Manufacturing json from: [" + c + "," + g + "] to: [" + h + "," + l + "]");
    d = "[";
    c = parseInt(h) - parseInt(c);
    g = parseInt(l) - parseInt(g);
    c++;
    g++;
    b.ctatdebug("X range: " + c + ", Y range: " + g);
    for (h = 0;h < c;h++) {
      0 < h && (d += ",");
      d += "[";
      for (l = 0;l < g;l++) {
        0 < l && (d += ","), d += '"', d += e, d += '"';
      }
      d += "]";
    }
    return d + "]";
  };
  this.translateFromCTAT = function(f, e) {
    if (!0 === a) {
      return f;
    }
    var d = f.toLowerCase();
    b.ctatdebug("translateFromCTAT (" + d + ")");
    var c;
    if (-1 != d.indexOf(".r")) {
      var g = d.split(".");
      c = g[1].split("r");
      0 >= c.length && (c = g[1].split("c"));
      0 >= c.length ? b.ctatdebug("Info: incoming name does not need translation") : (d = c[1], c = c[0].substr(1), b.ctatdebug("Original row (1st format): " + c + " original col: " + d), d = !0 === e ? colName(d, !1) + c : g[0] + "." + colName(d, !1) + c, b.ctatdebug("Translated: " + d));
    } else {
      if (0 === d.indexOf("r")) {
        var g = d.indexOf("c"), h = parseInt(d.substr(1, g - 1)), l = parseInt(d.substr(g + 1));
        c = h + 1;
        d = l;
        b.ctatdebug("Original row (2nd format) (columnindex: " + g + "): " + h + " -> " + c + ", original col: " + l + " -> " + d);
        d = colName(d, !1) + c;
        b.ctatdebug("Translated: " + d);
        return d;
      }
      b.ctatdebug("Info: incoming name does not need translation");
    }
    return d;
  };
  this.translateToCTAT = function(b) {
    if (!0 === a) {
      return b;
    }
    var e = this.letterToColumn(b.substr(0, 1)) - 1;
    return "R" + (parseInt(b.substr(1)) - 1) + "C" + e;
  };
  this.columnToLetter = function(a) {
    for (var b, d = "";0 < a;) {
      b = (a - 1) % 26, d = String.fromCharCode(b + 65) + d, a = (a - b - 1) / 26;
    }
    return d;
  };
  this.letterToColumn = function(a) {
    for (var b = 0, d = a.length, c = 0;c < d;c++) {
      b += (a.charCodeAt(c) - 64) * Math.pow(26, d - c - 1);
    }
    return b;
  };
  this.getA1Row = function(a) {
    return parseInt(a.substr(1)) - 1;
  };
  this.getA1Col = function(a) {
    return this.letterToColumn(a.substr(0, 1)) - 1;
  };
};
CTATNameTranslator.prototype = Object.create(CTATBase.prototype);
CTATNameTranslator.prototype.constructor = CTATNameTranslator;
var CTATCommShell = function() {
  CTATBase.call(this, "CTATCommShell", "theShell");
  var a = null, b = this, f = null, e = null, d = {}, c = null, g = null, h = null, l = null, m = [], e = "xml" == CTATConfig.parserType ? new CTATXML : new CTATJSON;
  this.init = function(c) {
    this.ctatdebug("init ()");
    var g = flashVars.getRawFlashVars(), d = "http://";
    "https" == g.tutoring_service_communication && (d = "https://");
    g.remoteSocketURL && -1 != g.remoteSocketURL.indexOf("http") && (d = "");
    a = c;
    contextGUID = (new CTATGuid).guid();
    b.ctatdebug("processSkills ()");
    skillSet = new CTATSkillSet;
    c = flashVars.getRawFlashVars();
    null != c.skills && skillSet.fromXMLString(c.skills);
    b.updateSkillWindow(null);
    null == commMessageHandler && (commMessageHandler = new CTATMessageHandler, CTAT.ToolTutor.registerInterface(commMessageHandler));
    commMessageHandler.assignHandler(this);
    commMessageBuilder = new CTATTutoringServiceMessageBuilder;
    g.deliverymode && "review" == g.deliverymode && (g.Logging = "None");
    commLogMessageBuilder = new CTATLogMessageBuilder;
    commLibrary = new CTATCommLibrary;
    commLibrary.setSocketType(flashVars.getRawFlashVars().tutoring_service_communication);
    commLibrary.assignHandler(this);
    commLMSService = new CTATCurriculumService(commLibrary);
    null == commLoggingLibrary && (commLoggingLibrary = new CTATLoggingLibrary(!0));
    commLoggingLibrary.getLoggingCommLibrary().setFixedURL(flashVars.getRawFlashVars().log_service_url);
    flashVars.setTimeZone(null);
    new CTATHTMLManager;
    this.ctatdebug("CTATCommShell.init() FlashVar info: " + g.info);
    null != g.info ? parent.javaScriptInfo && parent.javaScriptInfo(decodeURIComponent(g.info)) : this.ctatdebug("There is no info flash var");
    this.ctatdebug("Connecting to: " + d + g.remoteSocketURL + ":" + g.remoteSocketPort);
    c = commMessageBuilder.createSetPreferencesMessage(version);
    commLibrary.sendXMLURL(c, d + g.remoteSocketURL + ":" + g.remoteSocketPort);
  };
  this.propagateShellEvent = function(a, b) {
    ctatdebug("propagateShellEvent (" + a + ")");
    for (var c = 0;c < m.length;c++) {
      m[c].processCommShellEvent(a, b);
    }
  };
  this.reset = function() {
    b.ctatdebug("reset ()");
    CTATGlobals.interfaceElement = null;
    commMessageHandler.reset();
  };
  this.getMessageHandler = function() {
    return this.commMessageHandler;
  };
  this.addStartStateHandler = function(a) {
    b.ctatdebug("addStartStateHandler ()");
    null == startStateHandlers && (startStateHandlers = []);
    startStateHandlers.push(a);
  };
  this.gradeComponent = function(a) {
    this.ctatdebug("gradeComponent (" + a.getName() + "," + a.getClassName() + ")");
    var c = CTATShellTools.findComponentByClass("CTATDoneButton");
    null != c && c != a ? c.moveHintHighlight(!1, null) : b.ctatdebug("Info: no done button available to reset");
    null != nameTranslator ? nameTranslator.translateFromCTAT(a.getName()) : this.ctatdebug("Info: no name translator provided, using as-is");
    null == a ? this.ctatdebug("Internal error, provided component is null") : (this.ctatdebug("Info: we have a valid component, grading ..."), "Do not tutor" == a.getTutorComponent() ? b.processComponentAction(a.getSAI(), !1) : (this.ctatdebug("Checking for back grading: " + a.getName()), "CTATTextArea" == a.getClassName() || "CTATTextInput" == a.getClassName() || "CTATTextField" == a.getClassName() ? (this.ctatdebug("Backgrading ..."), this.ctatdebug("Grading " + a.getClassName() + " with value: " + 
    a.getValue()), !0 === CTATGlobalFunctions.isBlank(a.getValue()) ? this.ctatdebug("Empty component, nothing to grade") : (a.updateSAI(), a = a.getSAI(), b.processComponentAction(a))) : (a = "CTATTableGoogle" == a.getClassName() ? new CTATSAI(a.getCurrentSelection(), "UpdateTextArea", a.getCurrentValue()) : a.getSAI(), b.processComponentAction(a))));
  };
  this.processMessage = function(a) {
    this.ctatdebug("processMessage ()");
    console.log("processMessage", a);
    commMessageHandler.processMessage(a);
    this.ctatdebug("processMessage () done");
  };
  this.processStartProblem = function() {
    this.ctatdebug("processStartProblem ()");
    "google" == CTATConfig.external && this.showFeedback("The tutor is starting, please wait ...");
    CTATLMS.initLMSConnection();
  };
  this.processStartState = function() {
    this.ctatdebug("processStartState ()");
    inStartState = !0;
    null != a ? (this.ctatdebug("Calling tutor.createInterface () ..."), a.createInterface()) : (this.ctatdebug("Error: no tutor object available, calling createInterface globally ..."), window.hasOwnProperty("createInterface") && window.createInterface());
    this.ctatdebug("Logging start of problem ...");
    null != commLoggingLibrary ? commLoggingLibrary.startProblem() : this.ctatdebug("Info: no logging library available!");
    this.ctatdebug("End of start state, inspecting suppressStudentFeedback ...");
    if (!0 === CTATGlobals.suppressStudentFeedback) {
      this.ctatdebug("Hiding hint button ...");
      var c = CTATShellTools.findComponentByClass("CTATHintButton");
      null != c && c.SetVisible(!1);
    }
    "google" == CTATConfig.external ? (b.ctatdebug("Calling google app script hint request driver ..."), addCall(new RPCObject("resetOnEditQueue", "dummy", "dummy"))) : this.ctatdebug("processStartState () done");
  };
  this.sendStartProblemMessage = function() {
    b.ctatdebug("sendStartProblemMessage()");
  };
  this.sendProblemSummaryRequest = function(a) {
    b.ctatdebug("sendProblemSummaryRequest()");
    h = a;
    a = (new CTATTutoringServiceMessageBuilder).createProblemSummaryRequestMessage();
    commLibrary.sendXML(a);
  };
  this.getAllInterfaceDescriptions = function() {
    b.ctatdebug("getAllInterfaceDescriptions ()");
    b.sendInterfaceDescriptionMessages();
  };
  this.sendInterfaceDescriptionMessages = function() {
    b.ctatdebug("sendInterfaceDescriptionMessages ()");
    for (var a = CTATShellTools.getAllComponents(), c = '<?xml version="1.0" encoding="UTF-8"?><MessageBundle>', g = new CTATTutoringServiceMessageBuilder, d = 0;d < a.length;d++) {
      var e = a[d];
      b.ctatdebug("Getting component interface description message for: " + e.getName());
      c += g.createInterfaceDescriptionMessage(e);
    }
    commLibrary.sendXML(c + "</MessageBundle>");
  };
  this.processSerialization = function() {
    b.ctatdebug("processSerialization()");
    b.setText(this.label);
    this.styles = b.getGrDescription().styles;
    b.ctatdebug("Processing " + this.styles.length + " styles ...");
    for (var a in this.styles) {
      "CorrectColor" == a && (correctColor = styleValue), "IncorrectColor" == a && (incorrectColor = styleValue), "HintColor" == a && (hintColor = styleValue);
    }
  };
  this.processComponentAction = function(a, c, g, d, e, f) {
    b.ctatdebug("processComponentAction(" + a.getName() + " -> " + a.getSelection() + "," + a.getAction() + "," + a.getInput() + ")");
    this.showFeedback("");
    g = (new CTATGuid).guid();
    null != commLoggingLibrary ? 0 == inStartState && (b.ctatdebug("We're not in the start state, logging the action ..."), "scrim" == a.getSelection() ? ctatdebug("Not logging any scrim actions (for now)") : void 0 != e ? commLoggingLibrary.logSemanticEvent(g, a, e, "", "", "", f) : "hint" == a.getSelection() || "null.nextButton" == a.getSelection() || "null.previousButton" == a.getSelection() ? commLoggingLibrary.logSemanticEvent(g, a, "HINT_REQUEST", "", "", "", f) : commLoggingLibrary.logSemanticEvent(g, 
    a, "ATTEMPT", "", "", "", f)) : this.ctatdebug("Info: no logging library available!");
    e = new CTATTutoringServiceMessageBuilder;
    a = !1 !== c ? e.createInterfaceActionMessage(g, a) : e.createUntutoredActionMessage(g, a);
    commLibrary.sendXML(a);
  };
  this.onEditSuccess = function(a) {
    b.ctatdebug("onEditSuccess (" + a + ")");
    null == nameTranslator ? b.ctatdebug("Error: CTAT name translator not available") : -1 != a.indexOf(":") ? (b.ctatdebug("Bump"), b.showFeedback("You're asking for a hint for multiple cells, please select only a single cell.")) : (a = nameTranslator.translateToCTAT(a), b.ctatdebug("Info A1 notiation mapped to (if needed): " + a), a = new CTATSAI("hint", "ButtonPressed", a), b.processComponentAction(a), b.propagateShellEvent("REQUESTHINT", null), b.ctatdebug("onEditSuccess () done"));
  };
  this.onFailure = function(a) {
    b.ctatdebug("onFailure (" + a.message + ")");
  };
  this.onNOPEditSuccess = function(a) {
    b.ctatdebug("onNOPEditSuccess (" + a + ")");
  };
  this.onNOPFailure = function(a) {
    b.ctatdebug("onNOPFailure (" + a.message + ")");
  };
  this.requestHint = function() {
    b.ctatdebug("requestHint(external -> " + CTATConfig.external + ")");
    var a;
    if ("none" == CTATConfig.external) {
      b.ctatdebug("Calling built-in hint request driver ..."), CTATGlobals.Tab.previousFocus ? (a = new CTATSAI("hint", "ButtonPressed", "hint request"), CTATGlobals.Tab.previousFocus instanceof CTAT.Component.Base.SAIHandler ? (a.addSelection(CTATGlobals.Tab.previousFocus.getSAI().getSelection()), a.addAction("PreviousFocus")) : b.ctatdebug("Current focus is not a CTAT component, can't ask for a hint yet")) : (b.ctatdebug("CTATGlobals.Tab.previousFocus===null"), a = new CTATSAI("hint", "ButtonPressed", 
      "hint request")), this.processComponentAction(a), this.propagateShellEvent("RequestHint", null);
    } else {
      if ("google" == CTATConfig.external) {
        b.ctatdebug("Calling google app script hint request driver ...");
        try {
          google.script.run.withSuccessHandler(b.onEditSuccess).withFailureHandler(b.onFailure).getSheetSelectedRange();
        } catch (c) {
          b.ctatdebug("google.script.run: " + c.message);
        }
      } else {
        b.ctatdebug("'external' has configuration that doesn't match anything: " + CTATConfig.external);
      }
    }
  };
  this.processDone = function() {
    b.ctatdebug("processDone()");
    if (!0 === CTATGlobals.confirmDone) {
      CTATScrim.scrim.confirmScrimUp("Are you sure you are done?", this.processDoneContinue, this.processDoneCancel);
    } else {
      var a = new CTATSAI("done", "ButtonPressed", "-1");
      b.processComponentAction(a);
    }
  };
  this.processDoneContinue = function(a) {
    b.ctatdebug("processDoneContinue()");
    CTATScrim.scrim.scrimDown();
    a = new CTATSAI("done", "ButtonPressed", "-1");
    b.processComponentAction(a);
    this.propagateShellEvent("DonePressed", null);
  };
  this.processDoneCancel = function(a) {
    b.ctatdebug("processDoneCancel()");
    CTATScrim.scrim.scrimDown();
    a = (new CTATGuid).guid();
    var c = new CTATSAI("ConfirmDone", "ButtonPressed", "no");
    commLoggingLibrary.logSemanticEvent(a, c, "ATTEMPT", "");
  };
  this.processCorrectAction = function(a) {
    b.ctatdebug("processCorrectAction()");
    a.setGradeResult("correct");
    this.clearFeedbackComponents();
    null != l && (ctatdebug("Calling custom grading processor ..."), l("CORRECT", a));
    var g = a.getSelection();
    if (d[g] && null != c) {
      c("CORRECT", a), this.propagateShellEvent("CORRECT", a);
    } else {
      var e = CTATShellTools.findComponent(g);
      if (null != e) {
        for (ctatdebug("Processing " + e.length + " components ..."), g = 0;g < e.length;g++) {
          ctatdebug("Check " + e[g].getName()), e[g] ? e[g].setCorrect && e[g].setCorrect(a) : b.ctatdebug("Internal error, component pointer is null");
        }
      } else {
        b.ctatdebug("Error: component is null for selection " + g);
      }
    }
  };
  this.processInCorrectAction = function(a) {
    b.ctatdebug("processInCorrectAction()");
    a.setGradeResult("incorrect");
    null != l && (ctatdebug("Calling custom grading processor ..."), l("INCORRECT", a));
    var g = a.getSelection();
    if (d[g] && null != c) {
      c("INCORRECT", a);
    } else {
      var e = CTATShellTools.findComponent(g);
      if (null != e) {
        for (g = 0;g < e.length;g++) {
          ctatdebug("Calling setIncorrect on component (" + e[g].getClassName() + ")..."), e[g].setIncorrect && e[g].setIncorrect(a);
        }
      } else {
        b.ctatdebug("Error: component is null for selection " + g);
      }
    }
  };
  this.processHighlightMsg = function(a) {
    b.ctatdebug("processHighlightMsg()");
    var c = a.getSelection(), g = CTATShellTools.findComponent(c);
    if (null != g) {
      for (c = 0;c < g.length;c++) {
        g[c].setHintHighlight(!0, a);
      }
    } else {
      b.ctatdebug("Error: component is null for selection " + c);
    }
    this.showFeedback(a.getHighlightMsg());
  };
  this.processUnHighlightMsg = function(a) {
    b.ctatdebug("processUnHighlightMsg()");
    var c = a.getSelection(), g = CTATShellTools.findComponent(c);
    if (null != g) {
      for (c = 0;c < g.length;c++) {
        g[c].setHintHighlight(!1, null, a);
      }
    } else {
      b.ctatdebug("Error: component is null for selection " + c);
    }
  };
  this.processAssociatedRules = function(a, c, g) {
    b.ctatdebug("processAssociatedRules()");
    if (0 == commMessageHandler.getInStartState()) {
      logHintSAI = a.getSAI();
      var d = new CTATActionEvaluationData("");
      b.ctatdebug("Found tutor advice: " + g);
      "Hint" == c || "HintWindow" == c ? (ctatdebug("Preparing log message to indicate a hint response", "commShell"), d.setCurrentHintNumber(hintIndex + 1), d.setTotalHintsAvailable(hints.length), d.setEvaluation("HINT"), c = "HINT_MSG", hints[hintIndex] && (g = hints[hintIndex])) : ("Correct" == a.getIndicator() ? d.setEvaluation("CORRECT") : d.setEvaluation("INCORRECT"), c = "RESULT");
      ctatdebug("Adding custom field names ...");
      var e = [], f = [];
      e.push("step_id");
      f.push(a.getProperty("StepID"));
      var h = a.getSkillsObject();
      b.updateSkillWindow(h);
      ctatdebug("Sending log message ...");
      null != commLoggingLibrary ? 0 == inStartState && 0 == inProcessStartStateActions && commLoggingLibrary.logTutorResponse(a.getTransactionID(), logHintSAI, c, "", d, g, h, e, f) : this.ctatdebug("Info: no logging library available!");
      "done" == logHintSAI.getSelection() && "Correct" == a.getIndicator() && (a = commMessageBuilder.createProblemSummaryRequestMessage(), commLibrary.sendXML(a));
    } else {
      b.updateSkillWindow(null);
    }
    b.ctatdebug("processAssociatedRules() done");
  };
  this.processBuggyMessage = function(a) {
    b.ctatdebug("processBuggyMessage()");
    this.showFeedback(a.getBuggyMsg());
  };
  this.processSuccessMessage = function(a) {
    b.ctatdebug("processSuccessMessage()");
    this.showFeedback(a.getSuccessMessage());
  };
  this.processInterfaceAction = function(a) {
    console.log("processInterfaceAction(" + a.getSelection() + "," + a.getAction() + "," + a.getInput() + ")", "commShell");
    console.log("Log the message (" + inStartState + "," + inProcessStartStateActions + ") ...");
    b.ctatdebug("This is not a start state TPA so it should be logged", "commShell");
    null != commLoggingLibrary ? 0 == inStartState && 0 == inProcessStartStateActions ? (console.log("Logging ..."), commLoggingLibrary.logSemanticEvent(a.getTransactionID(), a.getSAI(), "ATTEMPT", "tutor-performed")) : console.log("Logging prohibited in current tutor state") : this.ctatdebug("Info: no logging library available!");
    if ("root" == a.getSelection() || "_root" == a.getSelection()) {
      b.ctatdebug("Info: selection is 'root', we'll call the function straight up ...");
      var c = a.getAction();
      a = a.getInput();
      b.ctatdebug("Calling as: " + c + "(" + a + ")");
      try {
        window[c](a);
      } catch (g) {
        b.ctatdebug("Internal error: unable to execute function: " + g.message);
      }
    } else {
      if (c = CTATShellTools.findComponent(a.getSelection()), null == c) {
        b.ctatdebug("Internal error: unable to find pointer to component object");
      } else {
        if (0 == c.length) {
          b.ctatdebug("Error: no component found to call interface action on");
        } else {
          b.ctatdebug("Call the action on the component(s) -> (" + c.length + ")...");
          for (var d = 0;d < c.length;d++) {
            b.ctatdebug("About to call " + a.getAction() + " (" + a.getInput() + ") on: " + a.getSelection());
            var e = c[d];
            e.executeSAI(a);
            b.ctatdebug("Method executed, continuing with post-processing ...");
            1 == commMessageHandler.getInStartState() && e.setEnabled(!1);
          }
          b.ctatdebug("processInterfaceAction() Done");
        }
      }
    }
  };
  this.processInterfaceIdentification = function(a) {
    b.ctatdebug("processInterfaceIdentification()");
  };
  this.processAuthorModeChange = function(a) {
    b.ctatdebug("processAuthorModeChange()");
  };
  this.processShowHintsMessage = function(a) {
    b.ctatdebug("processShowHintsMessage()");
  };
  this.processConfirmDone = function(a) {
    b.ctatdebug("processConfirmDone()");
  };
  this.processVersionInfo = function(a) {
    b.ctatdebug("processVersionInfo()");
  };
  this.processTutoringServiceAlert = function(a) {
    b.ctatdebug("processTutoringServiceAlert()");
    for (var c = "", g = 0;g < a.length;g++) {
      var d = a[g];
      "ErrorType" == e.getElementName(d) && e.getNodeTextValue(d);
      "Details" == e.getElementName(d) && (c = e.getNodeTextValue(d));
    }
    CTATScrim.scrim.scrimUp(c);
  };
  this.processTutoringServiceError = function(a) {
    b.ctatdebug("processTutoringServiceError()");
    for (var c = "", g = "", d = 0;d < a.length;d++) {
      var f = a[d];
      "ErrorType" == e.getElementName(f) && (c = e.getNodeTextValue(f));
      "Details" == e.getElementName(f) && (g = e.getNodeTextValue(f));
    }
    CTATScrim.scrim.scrimDown();
    CTATScrim.scrim.errorScrimUp(c + " - " + g);
  };
  this.processProblemSummaryResponse = function(a) {
    b.ctatdebug("processProblemSummaryResponse()");
    CTATLMS.processProblemSummary(a.getXMLObject());
    CTATLMS.closeLMSConnection();
    if (null != h) {
      var c = a.getXMLObject(), g = c.getElementsByTagName("ProblemSummary"), d = c.getElementsByTagName("cmi.core.lesson_status"), e = c.getElementsByTagName("cmi.core.score.raw");
      a = c.getElementsByTagName("cmi.core.exit");
      c = c.getElementsByTagName("cmi.core.session_time");
      g = $("<div>").html(g[0].innerHTML).text();
      d = "<cmi.core.lesson_status>" + $("<div>").html(d[0].innerHTML).text() + "</cmi.core.lesson_status>";
      e = "<cmi.core.score.raw>" + $("<div>").html(e[0].innerHTML).text() + "</cmi.core.score.raw>";
      a = "<cmi.core.exit>" + $("<div>").html(a[0].innerHTML).text() + "</cmi.core.exit>";
      c = "<cmi.core.session_time>" + $("<div>").html(c[0].innerHTML).text() + "</cmi.core.session_time>";
      h(g, "<scorm>" + d + e + a + c + "</scorm>");
      h = null;
    } else {
      c = new CTATXML;
      if (null != f) {
        window[f](c.xmlToString(a.getXMLObject()));
      } else {
        commLMSService.sendSummary(a);
      }
      lastMessage = !0;
    }
  };
  this.processProblemRestoreEnd = function(a) {
    b.ctatdebug("processProblemRestoreEnd()");
    inStartState = !1;
    CTATScrim.scrim.scrimDown();
  };
  this.clearFeedbackComponents = function() {
    b.ctatdebug("clearFeedbackComponents ()");
    CTATShellTools.showHints(null);
  };
  this.processHintResponse = function(a, c) {
    b.ctatdebug("processHintResponse()");
    CTATShellTools.showHints(c);
    var g = a.getSAI();
    if (null != g) {
      if (g = g.getSelection(), null != g) {
        if (b.ctatdebug("Highlighting selection for hint: " + g), g = CTATShellTools.findComponent(g), null != g) {
          for (var d = 0;d < g.length;d++) {
            1 == detailedFeedback && (0 === d ? g[d].moveHintHighlight && g[d].moveHintHighlight(!0, a) : g[d].setHintHighlight && g[d].setHintHighlight(!0, a));
          }
        } else {
          b.ctatdebug("Unable to find component name in list: " + g);
        }
      } else {
        b.ctatdebug("Error: no highlight selection present in SAI");
      }
    } else {
      b.ctatdebug("Warning: no SAI found in highlight message");
    }
    detailedFeedback = !0;
    b.ctatdebug("processHintResponse() done");
  };
  this.showHighlightSelection = function(a, c) {
    b.ctatdebug("showHighlightSelection (" + a + ")");
    var g = CTATShellTools.findComponent(a);
    if (null != g) {
      for (var d = 0;d < g.length;d++) {
        1 == detailedFeedback && (0 === d ? g[d].moveHintHightlight && g[d].moveHintHighlight(!0, c) : g[d].setHintHighlight && g[d].setHintHighlight(!0, c));
      }
    } else {
      b.ctatdebug("Unable to find component name in list: " + g);
    }
  };
  this.globalReset = function() {
    b.ctatdebug("globalReset ()");
    scriptElement = "";
  };
  this.nextProblem = function(a) {
    b.ctatdebug("nextProblem ()");
    if (CTATGlobalFunctions.isBlank(a)) {
      b.ctatdebug("Message is blank, requesting next problem ..."), a = flashVars.getRawFlashVars().run_problem_url, commLibrary.send(a);
    } else {
      b.ctatdebug("Message contains html data, writing ...");
      try {
        document.close();
      } catch (c) {
        alert("Error closing document: " + c.message);
      }
      try {
        document.write(a);
      } catch (c) {
        alert("Error writing document: " + c.message);
      }
    }
  };
  this.updateSkillWindow = function(a) {
    b.ctatdebug("updateSkillWindow()");
    skillSet.untouchSkills();
    var c = CTATShellTools.findComponentByClass("CTATSkillWindow");
    null !== c ? null != a ? c.updateSkillSet(a) : c.drawComponent() : b.ctatdebug("Info: no skill window available");
  };
  this.processComponentFocus = function(a) {
    b.ctatdebug("processComponentFocus(" + a.getName() + "," + a.getClassName() + ")");
    "CTATTextInput" == a.getClassName() || "CTATTextField" == a.getClassName() || "CTATTextArea" == a.getClassName() ? (CTATGlobals.selectedTextInput = a, null !== mobileAPI && !0 === mobileAPI.getEnabled() && mobileAPI.processTextFocus(a.getX(), a.getY(), a.getWidth(), a.getHeight())) : CTATGlobals.selectedTextInput = null;
    b.ctatdebug("processComponentFocus() done");
  };
  this.showFeedback = function(a) {
    "" == a ? b.ctatdebug("showFeedback(): False alarm: empty message") : (b.ctatdebug("showFeedback(" + a + ")"), CTATShellTools.showFeedback(a), null != g && g(a));
  };
  this.assignFeedbackHandler = function(a) {
    b.ctatdebug("assignFeedbackHandler()");
    g = a;
  };
  this.gradeSAI = function(a, c, g) {
    b.ctatdebug("gradeSAI()");
    d[a] = g;
    a = new CTATSAI(a, c, g);
    b.processComponentAction(a, !0, !0);
  };
  this.assignGradingHandler = function(a) {
    b.ctatdebug("assignGradingHandler()");
    c = a;
  };
  this.assignAnonymousGradingProcessor = function(a) {
    l = a;
  };
  this.assignDoneProcessor = function(a) {
    f = a;
  };
  this.addEventListener = function(a, b) {
  };
  this.addGlobalEventListener = function(a) {
    b.ctatdebug("addGlobalEventListener()");
    m.push(a);
  };
};
CTATCommShell.prototype = Object.create(CTATBase.prototype);
CTATCommShell.prototype.constructor = CTATCommShell;
var CTATControllerButton = function(a, b, f, e, d) {
  CTATButton.call(this, a, b, f, e, d);
  this.setClassName("CTATControllerButton");
  var c = 1;
  a = function(a) {
    a = Number(a);
    isNaN(a) || (c = a, this.setInput(c));
  };
  this.setParameterHandler("delta", a);
  this.data_ctat_handlers.delta = a;
  this.updateSAI = function() {
    this.setInput(c);
  };
};
CTATControllerButton.prototype = Object.create(CTATButton.prototype);
CTATControllerButton.prototype.constructor = CTATControllerButton;
CTAT.ComponentRegistry.addComponentType("CTATControllerButton", CTATControllerButton);
var CTATDoneButton = function(a, b, f, e, d) {
  CTAT.Component.Base.Clickable.call(this, "done", "CTATDoneButton", a, b, f, e, d);
  this.setName("done");
  this.setClassName("CTATDoneButton");
  this.setText(CTATGlobals.languageManager.getString("DONE"));
  this.setStyleHandler("BackgroundColor", null);
  this.setStyleHandler("TextAlign", null);
  var c = this;
  this.init = function() {
    this.setInitialized(!0);
    var a = document.createElement("button");
    a.classList.add("unselectable");
    a.classList.add("CTAT-done-button");
    this.setComponent(a);
    var b = document.createElement("div");
    b.textContent = "\u2714";
    b.classList.add("CTAT-done-button--icon");
    a.appendChild(b);
    this.getText() && (b = document.createElement("div"), b.classList.add("CTAT-done-button--text"), b.textContent = this.getText(), a.appendChild(b));
    this.getDivWrap().appendChild(a);
    a.addEventListener("mouseenter", function(a) {
      a.target.classList.add("CTAT-done-button--hover");
    });
    a.addEventListener("mouseleave", function(a) {
      a.target.classList.remove("CTAT-done-button--hover");
      a.target.classList.remove("CTAT-done-button--clicked");
    });
    a.addEventListener("mousedown", function(a) {
      a.target.classList.add("CTAT-done-button--clicked");
    });
    a.addEventListener("mouseup", function(a) {
      a.target.classList.remove("CTAT-done-button--clicked");
    });
    a.addEventListener("click", function(a) {
      a.target.classList.remove("CTAT-done-button--clicked");
    });
    a.addEventListener("click", this.processClick);
    a.addEventListener("focus", this.processFocus);
  };
  this.processClick = function(a) {
    c.getEnabled() && commShell && commShell.processDone();
  };
};
CTATDoneButton.prototype = Object.create(CTAT.Component.Base.Clickable.prototype);
CTATDoneButton.prototype.constructor = CTATDoneButton;
CTAT.ComponentRegistry.addComponentType("CTATDoneButton", CTATDoneButton);
var CTATDragNDrop = function() {
  CTAT.Component.Base.Tutorable.call(this, "CTATDragNDrop", "aDnD");
  this.setParameterHandler("groupname", function(a) {
    this.getDivWrap() && $(this.getDivWrap()).attr("name", a);
  });
  this.set_child_limit = function(a) {
    a = parseInt(a);
    isNaN(a) || $(this.component).attr("data-ctat-max-cardinality", a);
  };
  this.setParameterHandler("MaxObjects", this.set_child_limit);
  this.get_child_limit = function() {
    var a = parseInt($(this.component).attr("data-ctat-max-cardinality"));
    return isNaN(a) ? -1 : a;
  };
  var a = function(a) {
    return a.split("").reduce(function(a, b) {
      a = (a << 5) - a + b.charCodeAt(0);
      return a & a;
    }, 0);
  }, b = function(b) {
    var c = $(this).parent().attr("name"), g = $(this).parent().attr("id");
    b.dataTransfer.setData("ctat/group", c);
    b.dataTransfer.setData("ctat/source", g);
    b.dataTransfer.setData("text", this.id);
    var e = a(this.id);
    CTATDragNDrop.dragging[e] = {id:this.id, group:c, source:g};
    b.dataTransfer.setData("ctat/id/" + e, e);
  }, f = function(a) {
    for (var b, g = 0;g < a.dataTransfer.types.length;g++) {
      if (b = /^ctat\/id\/(.+)$/.exec(a.dataTransfer.types[g])) {
        b = b[1], CTATDragNDrop.dragging.hasOwnProperty(b) && delete CTATDragNDrop.dragging[b];
      }
    }
  }, e = null;
  this.init = function() {
    e = this.getDivWrap();
    if (!$(e).attr("name")) {
      var a = CTATDragNDrop.default_groupname;
      this.getComponentGroup() && (a = this.getComponentGroup());
      $(e).attr("name", a);
    }
    this.setComponent(e);
    CTATComponentReference.add(this, e);
    $(e).children().addClass("CTATDragNDrop--item").attr({unselectable:"on", draggable:!0}).each(function() {
      this.id || (this.id = CTATGlobalFunctions.gensym.div_id());
      this.addEventListener("dragstart", b, !1);
      this.addEventListener("dragend", f, !1);
    });
    this.component.addEventListener("dragover", function(a) {
      var b = !1;
      if ($(this).data("CTATComponent").getEnabled()) {
        var c = parseInt($(this).attr("data-ctat-max-cardinality"));
        if ((isNaN(c) || 0 > c || $(this).children().length < c) && (new Set(a.dataTransfer.types)).has("ctat/group")) {
          if (a.dataTransfer.getData("text")) {
            a.dataTransfer.getData("ctat/group") === $(this).attr("name") && a.dataTransfer.getData("ctat/source") !== this.id && (b = !0);
          } else {
            for (var d, c = 0;c < a.dataTransfer.types.length;c++) {
              if (d = /^ctat\/id\/(.+)$/.exec(a.dataTransfer.types[c])) {
                d = d[1], CTATDragNDrop.dragging.hasOwnProperty(d) && CTATDragNDrop.dragging[d].group === $(this).attr("name") && CTATDragNDrop.dragging[d].source !== this.id && (b = !0);
              }
            }
          }
        }
      }
      b && (a.preventDefault(), a.dataTransfer.effectAllowed = "move", a.dataTransfer.dropEffect = "move", this.classList.add("CTATDragNDrop--valid-drop"));
    }, !1);
    var c = this.setEnabled;
    this.setEnabled = function(a) {
      c(a);
      e && $(e).children().attr("draggable", a);
    };
    this.component.addEventListener("drop", function(a) {
      a.preventDefault();
      this.classList.remove("CTATDragNDrop--valid-drop");
      var b = $(this).data("CTATComponent");
      if (b.getEnabled()) {
        var c = a.dataTransfer.getData("text");
        a = a.dataTransfer.getData("ctat/source");
        var d = document.getElementById(c);
        console.log(this, c, d);
        this.appendChild(d);
        b.updateSAI();
        c = $("#" + a).data("CTATComponent");
        c.updateSAI();
        c.processAction();
        b.processAction();
      }
    }, !1);
    this.component.addEventListener("dragleave", function(a) {
      this.classList.remove("CTATDragNDrop--valid-drop");
    }, !1);
  };
  this.Add = function(a) {
    a = $("#" + a);
    0 < a.length && $(a).detatch().appendTo(this.getDivWrap());
    $(a).hasClass("CTATDragNDrop--item") || ($(a).addClass("CTATDragNDrop--item").attr({unselectable:"on", draggable:!0}), a.addEventListener("dragstart", b, !1), a.addEventListener("dragend", f, !1));
  };
  this.SetChildren = function(a) {
    a.split(";").forEach(function(a) {
      this.Add(a);
    });
  };
  this.updateSAI = function() {
    var a = [];
    $(this.component).children().each(function() {
      a.push($(this).attr("id"));
    });
    this.setActionInput("SetChildren", a.sort().join(";"));
  };
};
CTATDragNDrop.dragging = {};
CTATDragNDrop.default_groupname = "DragNDropGroup";
CTATDragNDrop.prototype = Object.create(CTAT.Component.Base.Tutorable.prototype);
CTATDragNDrop.prototype.constructor = CTATDragNDrop;
CTAT.ComponentRegistry.addComponentType("CTATDragNDrop", CTATDragNDrop);
CTAT.Math = {LeastCommonMultiple:function(a, b) {
  return a * b / CTAT.Math.GreatestCommonDivisor(a, b);
}, GreatestCommonDivisor:function(a, b) {
  if (0 > a || 0 > b) {
    return CTAT.Math.GreatestCommonDivisor(Math.abs(a), Math.abs(b));
  }
  if (1 === a || 1 === b) {
    return 1;
  }
  if (0 === a) {
    return b;
  }
  if (0 === b) {
    return a;
  }
  var f = function(a, b) {
    return b ? f(b, a % b) : a;
  };
  return f(a, b);
}, round10:function(a, b) {
  if ("undefined" === typeof b || 0 === Number(b)) {
    return Math.round(a);
  }
  a = Number(a);
  b = Number(b);
  if (isNaN(a) || "number" !== typeof b || 0 !== b % 1) {
    return NaN;
  }
  a = a.toString().split("e");
  a = Math.round(Number(a[0]) + "e" + (a[1] ? Number(a[1]) - b : -b));
  a = a.toString().split("e");
  return Number(a[0] + "e" + (a[1] ? Number(a[1]) + b : b));
}, precision:4, round:function(a) {
  return CTAT.Math.round10(a, -CTAT.Math.precision);
}, rad2deg:function(a) {
  return CTAT.Math.round(180 * a / Math.PI);
}, deg2rad:function(a) {
  return a * Math.PI / 180;
}};
CTAT.Math.Fraction = function(a, b) {
  this._numerator = 0;
  this._denominator = 1;
  this.set(a, b);
};
CTAT.Math.Fraction.prototype = Object.create(CTAT.Math.Fraction.prototype, {numerator:{get:function() {
  return this._numerator;
}, set:function(a) {
  this._numerator = a;
}}, denominator:{get:function() {
  return this._denominator;
}, set:function(a) {
  this._denominator = a;
}}, toString:{value:function() {
  return 1 === this.denominator ? String(this._numerator) : String(this._numerator) + "/" + String(this._denominator);
}}, valueOf:{value:function() {
  return this.numerator / this.denominator;
}}, fromString:{value:function(a) {
  var b = a.match(/(\d*\.?\d*)\s*\/\s*(\d*\.?\d*)/);
  b ? (this._numerator = Number(b[1]), this._denominator = Number(b[2])) : this.fromValue(a);
}}, fromValue:{value:function(a) {
  this._numerator = Number(a.valueOf());
  this._denominator = 1;
}}, toMathML:{value:function() {
  var a = document.createElementNS("http://www.w3.org/1998/Math/MathML", "math"), b = document.createElementNS("http://www.w3.org/1998/Math/MathML", "mn");
  b.textContent = this.numerator;
  if (1 == this.denominator) {
    a.appendChild(b);
  } else {
    var f = document.createElementNS("http://www.w3.org/1998/Math/MathML", "mfrac"), e = document.createElementNS("http://www.w3.org/1998/Math/MathML", "mrow");
    e.appendChild(b);
    f.appendChild(e);
    b = document.createElementNS("http://www.w3.org/1998/Math/MathML", "mrow");
    e = document.createElementNS("http://www.w3.org/1998/Math/MathML", "mn");
    e.textContent = this.denominator;
    b.appendChild(e);
    f.appendChild(b);
    a.appendChild(f);
  }
  return a;
}}, is_proper:{get:function() {
  return Math.abs(this._numerator) < Math.abs(this._denominator);
}}, whole_part:{get:function() {
  return Math.floor(this.valueOf());
}}, remainder_part:{get:function() {
  return new CTAT.Math.Fraction(this._numerator % this._denominator, this._denominator);
}}, set_denominator:{value:function(a) {
  this._numerator = this.numerator * a / this.denominator;
  1E-9 > Math.abs(this.numerator - Math.round(this.numerator)) && (this.numerator = Math.round(this.numerator));
  this._denominator = a;
  return this;
}}, scale:{value:function(a) {
  this._numerator *= a;
  this._denominator = 0 === a ? 1 : Math.abs(this._denominator * a);
}}, set:{value:function(a, b) {
  this._numerator = 0;
  this._denominator = 1;
  "undefined" !== typeof a && b ? (this.numerator = "number" === typeof a ? a : "string" === typeof a ? Number(a) : a ? a.valueOf() : 0, this.denominator = "number" === typeof b ? b : "string" === typeof b ? Number(b) : b.valueOf()) : a && (a instanceof CTAT.Math.Fraction ? (this.numerator = a.numerator, this.denominator = a.denominator) : "number" === typeof a ? (this.numerator = a, this.denominator = 1) : "string" === typeof a ? this.fromString(a) : (this.numerator = a ? a.valueOf() : 0, this.denominator = 
  1));
  isNaN(this._numerator) && (this._numerator = 0);
  isNaN(this._denominator) && (this._denominator = 1);
  return this;
}}, reduce:{value:function() {
  var a = CTAT.Math.GreatestCommonDivisor(this.numerator, this.denominator);
  this._numerator /= a;
  this._denominator /= a;
  return this;
}}, reduced:{value:function() {
  var a = new CTAT.Math.Fraction(this);
  a.reduce();
  return a;
}}, reciprocal:{value:function() {
  return new CTAT.Math.Fraction(this.denominator, this.numerator);
}}, negative:{value:function() {
  return new CTAT.Math.Fraction(-this.numerator, this.denominator);
}}, add:{value:function(a) {
  var b = new CTAT.Math.Fraction;
  a instanceof CTAT.Math.Fraction ? 0 === this.numerator || isNaN(this.numerator) ? b.set(a.numerator, a.denominator) : 0 === a.numerator || isNaN(a.numerator) ? b.set(this.numerator, this.denominator) : this.denominator == a.denominator ? b.set(this.numerator + a.numerator, this.denominator) : (b.set(this.numerator * a.denominator + a.numerator * this.denominator, this.denominator * a.denominator), b.reduce()) : "string" === typeof a ? (a = new CTAT.Math.Fraction(a), b = this.add(a)) : b.set(a.valueOf() * 
  this.denominator + this.numerator, this.denominator);
  return b;
}}, subtract:{value:function(a) {
  return a instanceof CTAT.Math.Fraction ? this.add(a.negative()) : "string" === typeof a ? (a = new CTAT.Math.Fraction(a), this.add(a.negative())) : this.add(-a.valueOf());
}}, multiply:{value:function(a) {
  a instanceof CTAT.Math.Fraction ? (a = new CTAT.Math.Fraction(this.numerator * a.numerator, this.denominator * a.denominator), a.reduce()) : "string" === typeof a ? (a = new CTAT.Math.Fraction(a), a = this.multiply(a)) : (a = new CTAT.Math.Fraction(a.valueOf() * this.numerator, this.denominator), a.reduce());
  return a;
}}, divide:{value:function(a) {
  return a instanceof CTAT.Math.Fraction ? this.multiply(a.reciprocal()) : "string" === typeof a ? (a = new CTAT.Math.Fraction(a), this.multiply(a.reciprocal())) : this.multiply(new CTAT.Math.Fraction(1, a.valueOf()));
}}, equals:{value:function(a) {
  return CTAT.Math.round(this.valueOf()) === CTAT.Math.round(a.valueOf());
}}, deepEquals:{value:function(a) {
  return a instanceof CTAT.Math.Fraction && this.numerator === a.numerator && this.denominator === a.denominator;
}}, clone:{value:function() {
  return new CTAT.Math.Fraction(this.numerator, this.denominator);
}}});
CTAT.Math.Fraction.FromString = function(a) {
  var b = new CTAT.Math.Fraction;
  b.setFromString(String(a));
  return b;
};
CTAT.Math.Fraction.FromNumber = function(a) {
  a = new CTAT.Math.Fraction(a);
  a.reduce();
  return a;
};
CTAT.Math.Fraction.Sum = function() {
  for (var a = new CTAT.Math.Fraction, b = 0;b < arguments.length;b++) {
    a = a.add(arguments[b]);
  }
  return a;
};
CTAT.Math.Fraction.Product = function() {
  for (var a = new CTAT.Math.Fraction(1, 1), b = 0;b < arguments.length;b++) {
    a = a.multiply(arguments[b]);
  }
  return a;
};
CTAT.Component.Base.SVG = function(a, b, f, e, d, c, g) {
  CTAT.Component.Base.Clickable.call(this, a, b, f, e, d, c, g);
  var h = null;
  this.initSVG = function() {
    this.setInitialized(!0);
    var a = CTATGlobals.NameSpace.svg, b = CTATGlobals.NameSpace.xml, c = CTATGlobals.NameSpace.xlink, g = CTATGlobals.NameSpace.ev, d = document.createDocumentFragment();
    h = document.createElementNS(a, "svg");
    d.appendChild(h);
    h.classList.add("CTAT-gen-component");
    h.classList.add("CTAT-svg");
    h.setAttributeNS(b, "xmlns", a);
    h.setAttributeNS(b, "xmlns:xlink", c);
    h.setAttributeNS(b, "xmlns:ev", g);
    a = document.createElementNS(a, "defs");
    h.appendChild(a);
    this.getDivWrap().appendChild(d);
    this.setComponent(h);
  };
  this.genName = function(a) {
    return this.getName() + "_" + a;
  };
  this.getBoundingBox = function() {
    var a = new DOMRect(0, 0, this.getWidth(), this.getHeight()), b = this.getComponent(), c = window.getComputedStyle(b), b = parseInt(c.getPropertyValue("padding-left")), g = parseInt(c.getPropertyValue("padding-right")), d = parseInt(c.getPropertyValue("padding-bottom")), e = parseInt(c.getPropertyValue("padding-right")), f = parseInt(c.getPropertyValue("border-left-width")), h = parseInt(c.getPropertyValue("border-right-width")), z = parseInt(c.getPropertyValue("border-bottom-width")), c = parseInt(c.getPropertyValue("border-right-width"));
    a.width -= b + e + f + c;
    a.height -= g + d + h + z;
    return a;
  };
};
CTAT.Component.Base.SVG.prototype = Object.create(CTAT.Component.Base.Clickable.prototype);
CTAT.Component.Base.SVG.prototype.constructor = CTAT.Component.Base.SVG;
CTAT.Component.Base.UnitDisplay = function(a, b, f, e, d, c, g) {
  CTAT.Component.Base.SVG.call(this, a, b, f, e, d, c, g);
  var h = "1/2+1/4+(0*1/8)";
  this.setActionInput("SetPieces", h);
  var l = "#FF00FF", m = 1, q = "#FF00FF", p = .2, n = "black", x = 1;
  this.getPieceBorderColor = function() {
    return n;
  };
  this.setPieceBorderColor = function(a) {
    n = CTATGlobalFunctions.formatColor(a);
    return this;
  };
  this.getPieceBorderThickness = function() {
    return x;
  };
  this.setPieceBorderThickness = function(a) {
    x = parseInt(a);
    isNaN(x) && (x = 0);
    return this;
  };
  var u = [], w = this;
  this.generateClassname = function() {
    return this.getName() + " UnitPart";
  };
  this.getPieces = function() {
    return u;
  };
  var z = function(a) {
    if (a.hasAttributeNS(null, "data-selected")) {
      return CTATGlobalFunctions.toBoolean(a.getAttributeNS(null, "data-selected"));
    }
    a.setAttributeNS(null, "data-selected", !0);
    return !0;
  };
  this.getPiecesBySelected = function(a) {
    for (var b = this.getPieces(), c = [], g, d = 0;d < b.length;d++) {
      g = b[d], z(g) === a && c.push(g);
    }
    return c;
  };
  this.getSelectedPieces = this.getPiecesBySelected.bind(this, !0);
  this.getDeselectedPieces = this.getPiecesBySelected.bind(this, !1);
  this.getColor = function() {
    return l;
  };
  this.getColorAlpha = function() {
    return m;
  };
  this.getDeselectedColor = function() {
    return q;
  };
  this.getDeselectedColorAlpha = function() {
    return p;
  };
  this.setColor = function(a) {
    l = CTATGlobalFunctions.formatColor(a);
    a = this.getSelectedPieces();
    for (var b = 0;b < a.length;b++) {
      a[b].setAttributeNS(null, "fill", l);
    }
  };
  this.setColorAlpha = function(a) {
    m = Number(a);
    m = isNaN(m) ? 1 : m;
    a = this.getSelectedPieces();
    for (var b = 0;b < a.length;b++) {
    }
  };
  this.setDeselectedColor = function(a) {
    q = CTATGlobalFunctions.formatColor(a);
    a = this.getDeselectedPieces();
    for (var b = 0;b < a.length;b++) {
      a[b].setAttributeNS(null, "fill", q);
    }
  };
  this.setDeselectedColorAlpha = function(a) {
    p = Number(a);
    isNaN(p) && (p = .2);
    a = this.getDeselectedPieces();
    for (var b = 0;b < a.length;b++) {
    }
  };
  this.valueOf = function() {
    return this.evaluate();
  };
  this.getValue = function() {
    return h;
  };
  this.setValue = function(a) {
    h = String(a);
    this.setInput(h);
    this.clear();
    this.drawPieces();
    return h;
  };
  this.setParameterHandler("Value", this.setValue);
  this.data_ctat_handlers.value = function(a) {
    this.setValue(a);
  };
  this.drawPieces = function() {
  };
  this.evaluate = function() {
    return this.parseValue().reduce(function(a, b) {
      return b.selected ? a.add(b) : a;
    }, new CTAT.Math.Fraction);
  };
  this.numActive = function() {
    return this.getSelectedPieces().length;
  };
  this.parseValue = function() {
    var a = [];
    h.split("+").forEach(function(b) {
      var c = !0;
      -1 != b.search(/(\(\s*0\s*\*)|(\*\s*0\s*\))/) && (c = !1, b = b.replace(/(\(\s*0\s*\*)|(\*\s*0\s*\))/, ""), b = b.replace(/[() ]/g, ""));
      b = new CTAT.Math.Fraction(b);
      b.selected = c;
      0 < b && a.push(b);
      return b;
    });
    return a;
  };
  this.updateValue = function() {
    return h = this.getPieces().map(function(a) {
      return C(a.getAttributeNS(null, "data-value"), CTATGlobalFunctions.toBoolean(a.getAttributeNS(null, "data-selected")));
    }).join("+");
  };
  var t = function(a, b) {
    var c = CTATGlobalFunctions.toBoolean(b);
    CTATGlobalFunctions.toBoolean(a.getAttributeNS(null, "data-selected"));
    !0 === c ? a.setAttributeNS(null, "data-selected", !0) : a.setAttributeNS(null, "data-selected", !1);
  };
  this.clickHandler = function(a) {
    !0 === w.getEnabled() && (a = CTATGlobalFunctions.toBoolean(this.getAttributeNS(null, "data-selected")), t(this, !a), w.setActionInput("SetPieces", w.updateValue()), w.processAction());
  };
  this.updateSAI = function() {
    w.setActionInput("SetPieces", w.updateValue());
  };
  this.addPieceElem = function(a, b, c) {
    a.setAttributeNS(null, "data-selected", c);
    a.setAttributeNS(null, "data-value", b.toString());
    a.dataValue = b;
    this.getEnabled() && (a.style.cursor = "pointer");
    a.addEventListener("click", this.clickHandler);
    u.push(a);
  };
  var D = this.setEnabled;
  this.setEnabled = function(a) {
    D(a);
    u.forEach(function(b) {
      b.style.cursor = a ? "pointer" : "default";
    });
  };
  this.clear = function() {
    u = [];
  };
  var C = function(a, b) {
    var c = a.toString();
    !1 === b && (c = "(0*" + c + ")");
    return c;
  };
  this.AddPiece = function(a, b) {
    if (a) {
      var c = new CTAT.Math.Fraction(a);
      if (0 < CTAT.Math.round(c.valueOf())) {
        var g = h.split("+");
        g.push(C(c, b));
        w.setValue(g.join("+"));
      }
    }
  };
  this.AddToValue = function(a, b) {
    if (a) {
      var c = new CTAT.Math.Fraction(a);
      if (0 < CTAT.Math.round(c.valueOf())) {
        var g = h.split("+");
        g.push(C(c, b));
        h = g.join("+");
      }
    }
    return h;
  };
  var H = -1, E = function(a) {
    isNaN(a) && this.get_denominator();
    a = Math.max(a, 1);
    1 < H && (a = Math.min(a, H));
    return a;
  }.bind(this);
  this.set_max_denominator = function(a) {
    a = parseInt(a);
    isNaN(a) || (H = a);
  };
  this.set_denominator = function(a) {
    w.setHintHighlight(!1);
    var b = "string" === typeof a ? parseInt(a) : a;
    if (!isNaN(b) && (b = E(b), this.get_denominator() != a)) {
      var c = w.evaluate();
      w.clear();
      a = [];
      c.set_denominator(b);
      for (var g = new CTAT.Math.Fraction(1, b), d = Math.floor(c.numerator), e = b - d, f = 0;f < d;f++) {
        a.push(C(g, !0));
      }
      b = new CTAT.Math.Fraction(c.numerator - d, b);
      b.equals(0) || (a.push(C(b, !0)), a.push(C(g.subtract(b), !1)), e--);
      for (b = 0;b < e;b++) {
        a.push(C(g, !1));
      }
      this.setValue(a.join("+"));
      w.setActionInput("SetPieces", h);
      w.processAction();
      return h;
    }
  };
  this.get_denominator = function() {
    return u.reduce(function(a, b, c, g) {
      return Math.min(a, b.dataValue.denominator);
    }, Infinity);
  };
  this.change_denominator = function(a) {
    return this.set_denominator(this.get_denominator() + Number(a));
  };
  this.set_number_pieces = function(a) {
    w.setHintHighlight(!1);
    a = "string" === typeof a ? parseInt(a) : a;
    if (!isNaN(a)) {
      a = E(a);
      var b = w.numActive();
      w.clear();
      for (var c = [], g = new CTAT.Math.Fraction(1, a), d = 0;d < a;d++) {
        c.push(C(g, 0 < b)), b--;
      }
      this.setValue(c.join("+"));
      w.setActionInput("SetPieces", h);
      w.processAction();
      return h;
    }
  };
  this.change_number_pieces = function(a) {
    this.set_number_pieces(u.length + a);
  };
  this.SetPieces = function(a) {
    w.setValue(a);
  };
  var A = function(a) {
    if (0 !== Object.keys(y).length) {
      if (a instanceof CTAT.Component.Base.Tutorable) {
        if (a != w) {
          if (y.hasOwnProperty(a.getName())) {
            return y[a.getName()];
          }
          if (y.hasOwnProperty(a.getComponentGroup())) {
            return y[a.getComponentGroup()];
          }
        }
      } else {
        if (a instanceof CTATSAI) {
          if (a.getSelection() != w.getName() && y.hasOwnProperty(a.getSelection())) {
            return y[a.getSelection()];
          }
        } else {
          if (a instanceof String) {
            if (a != w.getName() && y.hasOwnProperty(a)) {
              return y[a];
            }
          } else {
            if (a instanceof Element && a != w.getComponent() && y.hasOwnProperty(a.id)) {
              return y[a.id];
            }
          }
        }
      }
    }
    return null;
  };
  document.addEventListener(CTAT.Component.Base.Tutorable.EventType.action, function(a) {
    var b = a.detail.sai;
    a = A(a.detail.component);
    b && null !== a && a(b);
  }, !1);
  var y = {};
  this.set_numerator = function(a) {
    return this.change_numerator(a - this.getSelectedPieces().length);
  };
  this.change_numerator = function(a) {
    0 !== a && (0 < a ? u.every(function(b) {
      !1 === z(b) && (t(b, !0), a--);
      return 0 < a;
    }) : (u.reverse(), u.every(function(b) {
      !0 === z(b) && (t(b, !1), a++);
      return 0 > a;
    }), u.reverse()));
  };
  a = function(a, b, c) {
    var g = parseInt(c.getInput());
    if (!isNaN(g)) {
      switch(c.getAction()) {
        case "ButtonPressed":
          a.call(this, g);
          break;
        case "Update":
        ;
        case "UpdateTextField":
        ;
        case "UpdateTextArea":
          b.call(this, g);
      }
    }
  };
  var r = {numerator:{items:[], callback:a.bind(this, this.change_numerator, this.set_numerator)}, denominator:{items:[], callback:a.bind(this, this.change_denominator, this.set_denominator)}, partition:{items:[], callback:a.bind(this, this.change_number_pieces, this.set_number_pieces)}, value:{items:[], callback:function(a) {
    switch(a.getAction()) {
      case "SetPieces":
      ;
      case "UpdateTextField":
      ;
      case "UpdateTextArea":
        w.setValue(a.getInput());
    }
  }}}, G = function() {
    y = {};
    var a, b = function(a, b) {
      b = b.trim();
      0 < b.length && (y[b] = a);
    }, c;
    for (c in r) {
      a = r[c], a.items.forEach(b.bind(this, a.callback));
    }
  };
  this.setNumeratorControllers = function(a) {
    r.numerator.items = a.split(/\s*;\s*/);
    G();
    return this;
  };
  this.setParameterHandler("NumeratorControllers", this.setNumeratorControllers);
  this.data_ctat_handlers["ctrl-numerator"] = this.setNumeratorControllers;
  this.setDenominatorControllers = function(a) {
    r.denominator.items = a.split(/\s*;\s*/);
    G();
    return this;
  };
  this.setParameterHandler("DenominatorControllers", this.setDenominatorControllers);
  this.data_ctat_handlers["ctrl-denominator"] = this.setDenominatorControllers;
  this.setPartitionControllers = function(a) {
    r.partition.items = a.split(/\s*;\s*/);
    G();
    return this;
  };
  this.setParameterHandler("PartitionControllers", this.setPartitionControllers);
  this.data_ctat_handlers["ctrl-partition"] = this.setPartitionControllers;
};
CTAT.Component.Base.UnitDisplay.prototype = Object.create(CTAT.Component.Base.SVG.prototype);
CTAT.Component.Base.UnitDisplay.prototype.constructor = CTAT.Component.Base.UnitDisplay;
var CTATFractionBar = function(a, b, f, e, d) {
  CTAT.Component.Base.UnitDisplay.call(this, "CTATFractionBar", "aFractionBar", a, b, f, e, d);
  var c = CTATGlobals.NameSpace.svg;
  this.init = function() {
    this.initSVG();
    this.baseGroup = document.createElementNS(c, "g");
    this.getComponent().appendChild(this.baseGroup);
    this.getComponent().classList.add("CTAT-fraction-bar");
    this.drawPieces();
    this.addComponentReference(this, this.getDivWrap());
    this.component.addEventListener("focus", this.processFocus);
  };
  this.drawPieces = function() {
    if (this.baseGroup) {
      for (var a = this.parseValue(), b = 0, d = document.createDocumentFragment(), e = 0;e < a.length;e++) {
        var f = a[e], p = 100 * f, n = document.createElementNS(c, "rect");
        n.classList.add("CTAT-fraction-bar--piece");
        n.setAttributeNS(null, "height", "100%");
        n.setAttributeNS(null, "width", p + "%");
        n.setAttributeNS(null, "y", 0);
        n.setAttributeNS(null, "x", b + "%");
        this.addPieceElem(n, f, f.selected);
        b += p;
        d.appendChild(n);
      }
      this.baseGroup.innerHTML = "";
      this.baseGroup.appendChild(d);
      var x = this.baseGroup.getBBox().width - 1;
      Array.prototype.slice.call(this.baseGroup.childNodes).forEach(function(a) {
        if ("rect" == a.nodeName) {
          var b = window.getComputedStyle(a), c = parseFloat(b.getPropertyValue("padding-left")), g = parseFloat(b.getPropertyValue("stroke-width")), b = a.getBBox();
          a.setAttributeNS(null, "y", b.y + g / 2);
          a.setAttributeNS(null, "height", b.height - g);
          var d = b.x + g / 2, g = b.width - g;
          1 > b.x ? g -= c / 2 : (d += c / 2, g = b.x + b.width >= x ? g - c / 2 : g - c);
          a.setAttributeNS(null, "x", d);
          a.setAttributeNS(null, "width", g);
        }
      });
    }
  };
  this.setShowFractionLabel = function(a) {
    CTATGlobalFunctions.toBoolean(a);
  };
  this.setStyleHandler("showFractionLabel", this.setShowFractionLabel);
};
CTATFractionBar.prototype = Object.create(CTAT.Component.Base.UnitDisplay.prototype);
CTATFractionBar.prototype.constructor = CTATFractionBar;
CTAT.ComponentRegistry.addComponentType("CTATFractionBar", CTATFractionBar);
var CTATGroupingComponent = function(a, b, f, e, d) {
  CTAT.Component.Base.Tutorable.call(this, "CTATGroupingComponent", "__undefined__", a, b, f, e, d);
  var c = this;
  c.isTabIndexable = !1;
  var g = null;
  this.init = function() {
    c.ctatdebug("init (" + c.getName() + ")");
    c.addCSSAttribute("z-index", CTATGlobalFunctions.gensym.z_index());
    c.setInitialized(!0);
  };
  this.postProcess = function() {
    c.ctatdebug("postProcess ()");
    var a = this.getGrDescription().parameters, b;
    for (b in a) {
      var d = a[b];
      c.ctatdebug("Checking parameter name: " + b);
      "TargetMovieClip" == b && (c.ctatdebug("Loading sub element: " + d.trim() + " ..."), d = findMovieClip(d), null !== d && (c.ctatdebug("Found target movieclip, storing for future reference ..."), g = d));
    }
  };
  this.setTempLock = function(a) {
    c.ctatdebug("setTemplock (" + a + ")");
    null === g && c.ctatdebug("Error: no target MovieClip assigned to this grouping component");
    return !0;
  };
  this.move = function(a, b) {
    c.ctatdebug("move (" + a + "," + b + ")");
    null !== g ? (g.getDivWrapper().style.left = a, g.getDivWrapper().style.top = b) : c.ctatdebug("Error: no target MovieClip assigned to this grouping component");
  };
  this.size = function(a, b) {
    this.setSize(a, b);
  };
  this.setSize = function(a, b) {
    c.ctatdebug("setSize (" + a + "," + b + ")");
    null !== g ? (g.getDivWrapper().style.width = a + "px", g.getDivWrapper().style.height = b + "px") : c.ctatdebug("Error: no target MovieClip assigned to this grouping component");
  };
  this.SetVisible = function(a) {
    a = CTATGlobalFunctions.toBoolean(a);
    c.ctatdebug("SetVisible (" + a + ")", "graphics");
    null !== g ? !0 === a ? g.getDivWrapper().style.display = "block" : g.getDivWrapper().style.display = "none" : c.ctatdebug("Error: no target MovieClip assigned to this grouping component");
    c.ctatdebug("SetVisible () Done");
  };
  this.setVisible = function(a) {
    var b = CTATGlobalFunctions.toBoolean(a);
    c.ctatdebug("setVisible (" + a + ")", "graphics");
    null !== g ? !0 === b ? g.getDivWrapper().style.display = "block" : g.getDivWrapper().style.display = "none" : c.ctatdebug("Error: no target MovieClip assigned to this grouping component");
  };
  this.configFromDescription();
};
CTATGroupingComponent.prototype = Object.create(CTAT.Component.Base.Tutorable.prototype);
CTATGroupingComponent.prototype.constructor = CTATGroupingComponent;
CTAT.ComponentRegistry.addComponentType("CTATComponentContainerReference", CTATGroupingComponent);
var CTATHintButton = function(a, b, f, e, d) {
  CTAT.Component.Base.Clickable.call(this, "hint", "CTATHintButton", a, b, f, e, d);
  this.setName("hint");
  this.setClassName("CTATHintButton");
  this.isTabIndexable = !1;
  this.setText(CTATGlobals.languageManager.getString("HINT"));
  this.setStyleHandler("BackgroundColor", null);
  this.setStyleHandler("TextAlign", null);
  this.setStyleHandler("BorderColor", null);
  this.setStyleHandler("FontFace", null);
  this.setStyleHandler("TextColor", null);
  this.init = function() {
    this.setInitialized(!0);
    var a = document.createElement("button");
    this.setComponent(a);
    a.classList.add("unselectable");
    a.classList.add("CTAT-hint-button");
    var b = document.createElement("div");
    b.classList.add("CTAT-hint-button--icon");
    b.textContent = "?";
    a.appendChild(b);
    this.getText() && (b = document.createElement("div"), b.textContent = this.getText(), a.appendChild(b));
    this.getDivWrap().appendChild(a);
    a.addEventListener("mouseenter", function(a) {
      a.target.classList.add("CTAT-hint-button--hover");
    });
    a.addEventListener("mouseleave", function(a) {
      a.target.classList.remove("CTAT-hint-button--hover");
      a.target.classList.remove("CTAT-hint-button--clicked");
    });
    a.addEventListener("mousedown", function(a) {
      a.target.classList.add("CTAT-hint-button--clicked");
    });
    a.addEventListener("mouseup", function(a) {
      a.target.classList.remove("CTAT-hint-button--clicked");
    });
    a.addEventListener("click", function(a) {
      a.target.classList.remove("CTAT-hint-button--clicked");
    });
    a.addEventListener("click", this.processClick);
  };
  var c = this;
  this.processClick = function(a) {
    c.getEnabled() && commShell && commShell.requestHint();
  };
};
CTATHintButton.prototype = Object.create(CTAT.Component.Base.Clickable.prototype);
CTATHintButton.prototype.constructor = CTATHintButton;
CTAT.ComponentRegistry.addComponentType("CTATHintButton", CTATHintButton);
var CTATHintWindow = function(a, b, f, e, d) {
  CTAT.Component.Base.Graphical.call(this, "CTATHintWindow", "__undefined__", a, b, f, e, d);
  this.setDefaultWidth(240);
  this.setDefaultHeight(140);
  var c = this;
  c.isTabIndexable = !1;
  var g = null, h = null, l = null, m = null, q = CTATGlobals.languageManager.getString("NEXT"), p = CTATGlobals.languageManager.getString("PREVIOUS"), n = null;
  this.data_ctat_handlers["next-content"] = function(a) {
    n = a;
    l && (l.innerHTML = a);
  };
  var x = null;
  this.data_ctat_handlers["previous-content"] = function(a) {
    x = a;
    h && (h.innerHTML = a);
  };
  var u = !1;
  this.data_ctat_handlers["use-svg"] = function(a) {
    u = CTATGlobalFunctions.stringToBoolean(a);
  };
  this.getCurrentHint = function() {
    return g.innerHTML;
  };
  this.init = function() {
    c.ctatdebug("init (" + c.getName() + ")");
    c.setInitialized(!0);
    c.setIsAbstractComponent(!0);
    m = this.getDivWrap();
    m.id || m.setAttribute("id", CTATGlobalFunctions.gensym.div_id());
    m.setAttribute("onkeypress", "return noenter(event)");
    c.setComponent(m);
    m.classList.add("CTAT-gen-component");
    c.addComponentReference(c, m);
    g = document.createElement("div");
    m.appendChild(g);
    g.classList.add("CTATHintWindow--hint-content");
    g.setAttribute("pointer-events", "none");
    var a = document.createElement("div");
    a.classList.add("CTATHintWindow--hint-button-area");
    m.appendChild(a);
    if (x) {
      h = document.createElement("button"), h.classList.add("CTATHintWindow--previous"), h.innerHTML = x;
    } else {
      if (u) {
        h = document.createElementNS(CTATGlobals.NameSpace.svg, "svg");
        h.classList.add("CTATHintWindow--previous");
        h.setAttributeNS(null, "viewBox", "0 0 82 20");
        var b = document.createElementNS(CTATGlobals.NameSpace.svg, "path");
        b.style.fill = "none";
        b.style.strokeWidth = "3px";
        b.style.strokeLinecap = "round";
        b.setAttributeNS(null, "d", "M7 10 h12 M7 10 m4 -4 l-4 4 4 4");
        b.setAttributeNS(null, "pointer-events", "none");
        h.appendChild(b);
        p && (b = document.createElementNS(CTATGlobals.NameSpace.svg, "text"), b.setAttributeNS(null, "pointer-events", "none"), b.textContent = p, b.setAttributeNS(null, "text-anchor", "middle"), b.setAttributeNS(null, "x", "50px"), b.setAttributeNS(null, "dominant-baseline", "middle"), b.setAttributeNS(null, "y", "50%"), h.appendChild(b));
      } else {
        h = document.createElement("button"), h.classList.add("CTATHintWindow--previous"), b = document.createElement("span"), b.classList.add("CTATHintWindow--button-icon"), b.textContent = "\u25c0", h.appendChild(b), p && (b.style.cssFloat = "left", h.appendChild(document.createTextNode(p)));
      }
    }
    h.addEventListener("click", function(a) {
      CTATShellTools.showPrevHint();
    }, !1);
    a.appendChild(h);
    n ? (l = document.createElement("button"), l.classList.add("CTATHintWindow--next"), l.innerHTML = n) : u ? (l = document.createElementNS(CTATGlobals.NameSpace.svg, "svg"), l.classList.add("CTATHintWindow--next"), l.setAttributeNS(null, "viewBox", "0 0 82 20"), b = document.createElementNS(CTATGlobals.NameSpace.svg, "path"), b.style.fill = "none", b.style.strokeWidth = "3px", b.style.strokeLinecap = "round", b.setAttributeNS(null, "d", "M75 10 h-12 M75 10 m-4 -4 l4 4 -4 4"), b.setAttributeNS(null, 
    "pointer-events", "none"), l.appendChild(b), q && (b = document.createElementNS(CTATGlobals.NameSpace.svg, "text"), b.setAttributeNS(null, "pointer-events", "none"), b.textContent = q, b.setAttributeNS(null, "text-anchor", "middle"), b.setAttributeNS(null, "x", "34px"), b.setAttributeNS(null, "dominant-baseline", "middle"), b.setAttributeNS(null, "y", "50%"), l.appendChild(b))) : (l = document.createElement("button"), l.classList.add("CTATHintWindow--next"), b = document.createElement("span"), 
    b.classList.add("CTATHintWindow--button-icon"), b.textContent = "\u25b6", q && (b.style.cssFloat = "right", l.appendChild(document.createTextNode(q))), l.appendChild(b));
    l.addEventListener("click", function(a) {
      CTATShellTools.showNextHint();
    }, !1);
    a.appendChild(l);
    var d = function(a) {
      "svg" === this.tagName.toLowerCase() ? a ? this.classList.remove("CTAT-svg-button--disabled") : this.classList.add("CTAT-svg-button--disabled") : (this.disabled = !a, a || (this.classList.remove("CTAT-hint-button--hover"), this.classList.remove("CTAT-hint-button--clicked")));
    };
    [h, l].forEach(function(a) {
      a.setEnabled = d.bind(a);
      a.classList.add("CTATHintWindow--button");
      a.classList.add("CTAT-hint-button");
      a.addEventListener("mouseenter", function(a) {
        a.target.classList.add("CTAT-hint-button--hover");
      });
      a.addEventListener("mouseleave", function(a) {
        a.target.classList.remove("CTAT-hint-button--hover");
        a.target.classList.remove("CTAT-hint-button--clicked");
      });
      a.addEventListener("mousedown", function(a) {
        a.target.classList.add("CTAT-hint-button--clicked");
      });
      a.addEventListener("mouseup", function(a) {
        a.target.classList.remove("CTAT-hint-button--clicked");
      });
      a.addEventListener("click", function(a) {
        a.target.classList.remove("CTAT-hint-button--clicked");
      });
    });
    CTATShellTools.registerFeedbackComponent(this, this.goNext, this.goPrevious, this.showHint, this.showFeedback);
    c.ctatdebug("Disabling previous and next ...");
    h.setEnabled(!1);
    l.setEnabled(!1);
  };
  this.setStyleHandler("OuterBorderColor", this.setBorderColor);
  this.SetText = this.showFeedback = function(a) {
    c.ctatdebug("showFeedback (" + a + ")");
    g && (g.innerHTML = CTATGlobals.languageManager.filterString(a));
    h.setEnabled(!1);
    l.setEnabled(!1);
  };
  this.showHint = function(a) {
    c.ctatdebug("showHint ()");
    null === a ? (hints = a, hintIndex = 0, g.innerHTML = "", h.setEnabled(!1), l.setEnabled(!1)) : (hints = a, hintIndex = 0, this.setEnabled(!0), h.setEnabled(!1), l.setEnabled(!1), hints ? "" === hints[hintIndex] ? c.ctatdebug("Empty hint in list, bump") : (g.innerHTML = CTATGlobals.languageManager.filterString(hints[hintIndex]), 1 < hints.length ? (c.ctatdebug("We have more than one hint, enabling next button"), l.setEnabled(!0)) : c.ctatdebug("We only have one hint, leaving next button disabled")) : 
    c.ctatdebug("Null hint in list, bump"));
  };
  this.setEnabled = function(a) {
    c.assignEnabled(a);
    null === c.getComponent() ? c.ctatdebug("Error pointer.getComponent()==null") : c.getComponent().disabled = !a;
  };
  this.goPrevious = function() {
    c.ctatdebug("goPrevious ()");
    hintIndex--;
    l.setEnabled(!0);
    0 >= hintIndex ? (hintIndex = 0, h.setEnabled(!1)) : h.setEnabled(!0);
    g.innerHTML = CTATGlobals.languageManager.filterString(hints[hintIndex]);
    var a = new CTATGuid, b = new CTATTutoringServiceMessageBuilder, a = a.guid(), d = new CTATSAI("previousButton", "ButtonPressed", "-1");
    b.createUntutoredActionMessage(a, d);
    var d = new CTATSAI("previousButton", "ButtonPressed", "hint request");
    commLoggingLibrary.logSemanticEvent(a, d, "HINT_REQUEST", "");
    b = c.getCurrentHint();
    d = new CTATMessage;
    d.setMessageType("AssociatedRules");
    d.assignSAI(logHintSAI);
    d.setTransactionID(a);
    commShell.processAssociatedRules(d, "HintWindow", b);
    commShell.propagateShellEvent("PreviousPressed", null);
  };
  this.goNext = function() {
    c.ctatdebug("goNext ()");
    hintIndex++;
    h.setEnabled(!0);
    hintIndex > hints.length - 1 && (hintIndex = hints.length - 1);
    hintIndex > hints.length - 2 ? l.setEnabled(!1) : l.setEnabled(!0);
    g.innerHTML = CTATGlobals.languageManager.filterString(hints[hintIndex]);
    var a = new CTATGuid, b = new CTATTutoringServiceMessageBuilder, a = a.guid(), d = new CTATSAI("nextButton", "ButtonPressed", "-1");
    b.createUntutoredActionMessage(a, d);
    var d = new CTATSAI("nextButton", "ButtonPressed", "hint request");
    commLoggingLibrary.logSemanticEvent(a, d, "HINT_REQUEST", "");
    b = c.getCurrentHint();
    d = new CTATMessage;
    d.setMessageType("AssociatedRules");
    d.assignSAI(logHintSAI);
    d.setTransactionID(a);
    commShell.processAssociatedRules(d, "HintWindow", b);
    commShell.propagateShellEvent("NextPressed", null);
  };
};
CTATHintWindow.prototype = Object.create(CTAT.Component.Base.Graphical.prototype);
CTATHintWindow.prototype.constructor = CTATHintWindow;
CTAT.ComponentRegistry.addComponentType("CTATHintWindow", CTATHintWindow);
var CTATImageButton = function(a, b, f, e, d) {
  CTATButtonBasedComponent.call(this, "CTATImageButton", "__undefined__", a, b, f, e, d);
  var c = this;
  this.init = function() {
    c.setInitialized(!0);
    c.setComponent(c.getDivWrap());
    c.addComponentReference(c, c.getDivWrap());
    c.setImage(c.getDivWrap().getAttribute("data-ctat-image-default"));
    var a = c.component;
    a.setAttribute("role", "button");
    a.classList.add("CTAT-button");
    a.addEventListener("click", c.processClick);
    a.addEventListener("focus", c.processFocus);
    a.addEventListener("mousedown", c.processBaseMousedown);
    a.addEventListener("mouseup", c.processBaseMouseup);
    a.addEventListener("mouseover", c.processBaseMouseover);
    a.addEventListener("mouseout", c.processBaseMouseout);
  };
  var g = this.setEnabled;
  this.setEnabled = function(a) {
    g(a);
    c.getEnabled() ? c.setImage(c.getDivWrap().getAttribute("data-ctat-image-default")) : c.setImage(c.getDivWrap().getAttribute("data-ctat-image-disabled"));
  };
};
CTATImageButton.prototype = Object.create(CTATButtonBasedComponent.prototype);
CTATImageButton.prototype.constructor = CTATImageButton;
CTAT.ComponentRegistry.addComponentType("CTATImageButton", CTATImageButton);
var CTATJumble = function(a, b, f, e, d) {
  CTAT.Component.Base.Tutorable.call(this, "CTATJumble", "aJumble", a, b, f, e, d);
  var c = this;
  this.setActionInput("SetOrder", "");
  var g = null;
  this.init = function() {
    this.setInitialized(!0);
    g = this.getDivWrap();
    this.setComponent(g);
    this.addComponentReference(this, g);
    $(g).children().addClass("CTATJumble--item").attr({unselectable:"on", draggable:!0}).each(function() {
      this.addEventListener("dragstart", l, !1);
      this.addEventListener("dragenter", q, !1);
      this.addEventListener("dragover", m, !1);
      this.addEventListener("dragleave", p, !1);
      this.addEventListener("drop", n, !1);
      this.addEventListener("dragend", x, !1);
    });
    this.component.addEventListener("focus", this.processFocus);
  };
  var h = null, l = function(a) {
    a.target.style.opacity = "0.4";
    h = a.target;
    a.dataTransfer.effectAllowed = "move";
    a.dataTransfer.setData("text/html", a.target.innerHTML);
  }, m = function(a) {
    a.preventDefault && a.preventDefault();
    a.dataTransfer.dropEffect = "move";
    return !1;
  }, q = function(a) {
    this.classList.add("CTATJumble--item--over");
  }, p = function(a) {
    this.classList.remove("CTATJumble--item--over");
  }, n = function(a) {
    a.stopPropagation && a.stopPropagation();
    $(g).children().removeClass("CTATJumble--item--over");
    if (h != this) {
      h.innerHTML = this.innerHTML;
      var b = h.id;
      h.id = this.id;
      this.innerHTML = a.dataTransfer.getData("text/html");
      this.id = b;
      c.setInput(c.getOrder());
      c.processAction();
    }
    return !1;
  }, x = function(a) {
    this.style.opacity = null;
    $(g).children().removeClass("CTATJumble--item--over");
  }, u = this.setEnabled;
  this.setEnabled = function(a) {
    u(a);
    g && $(g).children().attr("draggable", a);
  };
  this.init_items = function(a) {
    if (g) {
      var b = document.createDocumentFragment();
      a = a.split(";");
      for (var c = a.length, d = 0;d < c;d++) {
        var e = document.createElement("div");
        e.textContent = a[d];
        e.id = this.getName() + d;
        e.setAttribute("unselectable", "on");
        e.setAttribute("draggable", !0);
        e.classList.add("CTATJumble--item");
        e.addEventListener("dragstart", l, !1);
        e.addEventListener("dragenter", q, !1);
        e.addEventListener("dragover", m, !1);
        e.addEventListener("dragleave", p, !1);
        e.addEventListener("drop", n, !1);
        e.addEventListener("dragend", x, !1);
        b.appendChild(e);
      }
      g.innerHTML = "";
      g.appendChild(b);
    }
  };
  this.setParameterHandler("textItems", this.init_items);
  this.SetOrder = function(a) {
    a.split(";").forEach(function(a) {
      $(g).append($("#" + a));
    });
  };
  this.getOrder = function() {
    var a = [];
    $(g).children().each(function() {
      this.draggable && (this.id ? a.push(this.id) : console.log("ERROR: The CTATJumble " + c.getName() + " has a child with no id attribute: " + this + "!!!"));
    });
    return a.join(";");
  };
  this.updateSAI = function() {
    c.setInput(c.getOrder());
  };
};
CTATJumble.prototype = Object.create(CTAT.Component.Base.Tutorable.prototype);
CTATJumble.prototype.constructor = CTATJumble;
CTAT.ComponentRegistry.addComponentType("CTATJumble", CTATJumble);
var CTATMobileTutorHandler = function(a, b) {
  CTATBase.call(this, "CTATMobileTutorHandler", "mobiletutorhandler");
  this.ctatdebug("CTATMobileTutorHandler ()");
  var f = "", e = b ? b : "disabled", d = !1;
  /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) && (d = !0);
  this.error = function(a) {
    this.ctatdebug(a);
    alert(a);
  };
  this.processOrientationChange = function(a) {
    this.ctatdebug("processOrientationChange (" + a + ")");
  };
  this.getEnabled = function() {
    return "disabled" == e || "auto" == e && 0 == d ? !1 : !0;
  };
  this.processTextFocus = function(a, b, h, l, m) {
    this.ctatdebug("processTextFocus (" + a + "," + b + "," + h + "," + l + "," + m + ")");
    "disabled" == e || "auto" == e && 0 == d || (f = "", this.manipulateKeyboard());
  };
  this.processEnter = function() {
    this.ctatdebug("processEnter ()");
    if ("disabled" != e && ("auto" != e || 0 != d)) {
      var b = getSafeElementById(a);
      if (null != b) {
        try {
          b.processExternalEnter(), this.ctatdebug("Successfully called AS3 method");
        } catch (g) {
          this.ctatdebug("Error description: " + g.message);
        }
      } else {
        this.ctatdebug("Error: unable to obtain reference to swf object");
      }
    }
  };
  this.setText = function(b) {
    this.ctatdebug("setText (" + b + ")");
    if ("disabled" != e && ("auto" != e || 0 != d)) {
      if (null != CTATGlobals.selectedTextInput) {
        this.ctatdebug("Attempting to call HTML5 method on text object ...");
        var g = CTATGlobals.selectedTextInput.getText();
        CTATGlobals.selectedTextInput.setText(g + b);
      } else {
        if (this.ctatdebug("Attempting to call AS3 method ..."), g = getSafeElementById(a), null != g) {
          try {
            f += b, this.ctatdebug(f), g.processExternalKeyboard(f), this.ctatdebug("Successfully called AS3 method");
          } catch (h) {
            this.ctatdebug("Error description: " + h.message);
          }
        } else {
          this.ctatdebug("Error: unable to obtain reference to swf object");
        }
      }
    }
  };
  this.manipulateKeyboard = function() {
    this.ctatdebug("manipulateKeyboard()");
    if ("disabled" != e && ("auto" != e || 0 != d)) {
      this.hideKeyboard();
      var a = getSafeElementById("keyboardUI");
      a && (a.style.visibility = "visible");
    }
  };
  this.hideKeyboard = function() {
    document.activeElement.blur();
    var a = getSafeElementById("input");
    a && a.blur();
  };
  this.hideCustomKeyboard = function() {
    getSafeElementById("keyboardUI").style.visibility = "visible";
  };
};
CTATMobileTutorHandler.prototype = Object.create(CTATBase.prototype);
CTATMobileTutorHandler.prototype.constructor = CTATMobileTutorHandler;
function processTextFocus(a, b, f, e, d) {
  mobileAPI.processTextFocus(a, b, f, e, d);
}
function processFocusOut() {
  closeK();
}
;var CTATMovieClip = function(a, b, f, e, d) {
  CTATBase.call(this, "CTATMovieClip", a);
  var c = CTATGlobalFunctions.gensym.z_index(), g = CTATGlobalFunctions.gensym.div_id(), h = CTATGlobalFunctions.gensym.z_index();
  CTATGlobalFunctions.gensym.div_id();
  var l = [], m = this, q = null;
  this.wrapComponent = function(a) {
    q = document.createElement("div");
    q.setAttribute("id", g);
    q.setAttribute("name", this.getName());
    q.setAttribute("style", "z-index: " + c);
    q.setAttribute("width", e + "px");
    q.setAttribute("height", d + "px");
    q.setAttribute("style", "border: 0px; position: absolute; left:" + b + "px; top:" + f + "px; z-index:" + h + ";");
    a.appendChild(q);
    return q;
  };
  this.getDivWrapper = function() {
    return q;
  };
  this.addComponent = function(a) {
    m.ctatdebug("addComponent (" + a + ")");
    l.push(a);
  };
  this.isRegistered = function(a) {
    for (var b = 0;b < l.length;b++) {
      if (l[b] == a) {
        return !0;
      }
    }
    return !1;
  };
};
CTATMovieClip.prototype = Object.create(CTATBase.prototype);
CTATMovieClip.prototype.constructor = CTATMovieClip;
CTAT.Geom = {};
CTAT.Geom.Point = {};
try {
  new DOMPoint;
} catch (a) {
  if (console.log("WARNING: new DOMPoint():", a, typeof a), a instanceof ReferenceError || a instanceof TypeError) {
    console.log("   Using shim!"), DOMPoint = function(b, f, e, d) {
      this.z = this.y = this.x = 0;
      this.w = 1;
      if (b instanceof DOMPoint) {
        for (var c in b) {
          this[c] = b[c];
        }
      } else {
        this.x = b || 0, this.y = f || 0, this.z = e || 0, this.w = d || 1;
      }
    };
  }
}
CTAT.Geom.Point.useDOMMatrix = !0;
try {
  new DOMMatrix;
} catch (a) {
  a instanceof ReferenceError && (CTAT.Geom.Point.useDOMMatrix = !1);
}
CTAT.Geom.Point.add = function() {
  if (CTAT.Geom.Point.useDOMMatrix) {
    for (var a = new DOMMatrix, b, f = 0;f < arguments.length;f++) {
      b = arguments[f], a.translateSelf(b.x / b.w, b.y / b.w, b.z / b.w);
    }
    return a.transformPoint(new DOMPoint);
  }
  return Array.prototype.reduce.call(arguments, function(a, b) {
    for (var c in a) {
      "w" != c && 0 !== b[c] && (a[c] += b[c] / b.w);
    }
    return a;
  }, new DOMPoint);
};
Object.defineProperty(DOMPoint.prototype, "add", {enumerable:!1, value:function(a) {
  return CTAT.Geom.Point.useDOMMatrix ? (new DOMMatrix).translate(a.x / a.w, a.y / a.w, a.z / a.w).transformPoint(this) : CTAT.Geom.Point.add(this, a);
}});
CTAT.Geom.Point.angle = function(a, b) {
  return Math.acos(DOMPoint.dot(a, b) / (a.magnitude * b.magnitude));
};
CTAT.Geom.Point.angle_degrees = function(a, b) {
  return CTAT.Math.rad2deg(CTAT.Geom.Point.angle(a, b));
};
CTAT.Geom.Point.angle_between_2d = function(a, b) {
  return CTAT.Math.rad2deg(Math.atan2(b.y, b.x) - Math.atan2(a.y, a.x));
};
Object.defineProperty(DOMPoint.prototype, "clone", {value:function() {
  return new DOMPoint(this);
}});
CTAT.Geom.Point.distance = function(a, b) {
  var f = CTAT.Geom.Point.add(a, CTAT.Geom.Point.scale(b, -1));
  return Math.sqrt(CTAT.Geom.Point.dot(f, f));
};
Object.defineProperty(DOMPoint.prototype, "distance", {value:function(a) {
  return CTAT.Geom.Point.distance(this, a);
}});
CTAT.Geom.Point.dot = function(a, b) {
  return (a.x * b.x + a.y * b.y + a.z * b.z) / (a.w * b.w);
};
CTAT.Geom.Point.equals = function(a, b) {
  var f = !0, e;
  for (e in a) {
    if (e in b ? "w" != e && (f &= a[e] / a.w == b[e] / b.w) : f = !1, !f) {
      break;
    }
  }
  return f;
};
CTAT.Geom.Point.interpolate = function(a, b, f) {
  return CTAT.Geom.Point.add(a.scale(f), b.scale(1 - f));
};
Object.defineProperty(DOMPoint.prototype, "magnitude", {enumerable:!1, get:function() {
  return CTAT.Math.round(Math.sqrt(CTAT.Geom.Point.dot(this, this)));
}});
Object.defineProperty(DOMPoint.prototype, "normalize", {value:function(a) {
  return this.scale((a ? a : 1) / this.magnitude);
}});
CTAT.Geom.Point.scale = function(a, b) {
  if (CTAT.Geom.Point.useDOMMatrix) {
    return (new DOMMatrix).scale(b).transformPoint(a);
  }
  var f = new DOMPoint(a), e;
  for (e in f) {
    "w" != e && (f[e] = CTAT.Math.round(a[e] * b));
  }
  return f;
};
Object.defineProperty(DOMPoint.prototype, "scale", {value:function(a) {
  return CTAT.Geom.Point.scale(this, a);
}});
CTAT.Geom.Point.polar = function(a, b) {
  return new DOMPoint(CTAT.Math.round(a * Math.cos(b)), CTAT.Math.round(a * Math.sin(b)));
};
CTAT.Geom.Point.is_on_line = function(a, b, f) {
  return 1E-4 > Math.abs(a.distance(f) + b.distance(f) - a.distance(b));
};
CTAT.Geom.Point.circle_intersection = function(a, b, f, e) {
  b = b.add(a.scale(-1)).normalize();
  var d = CTAT.Geom.Point.dot(b, f.add(a.scale(-1))), c = a.add(b.scale(d));
  f = CTAT.Geom.Point.distance(f, c);
  return f < e ? (e = Math.sqrt(e * e - f * f), [a.add(b.scale(d - e)), a.add(b.scale(d + e))]) : f == e ? [c] : [];
};
CTAT.Geom.Point.to2DString = function(a, b) {
  var f = [a.x / a.w, a.y / a.w].join();
  b && (f = "(" + f + ")");
  return f;
};
CTAT.Geom.Rectangle = {};
try {
  new DOMRect;
} catch (a) {
  if (console.log("WARNING: new DOMRect():", a, typeof a), a instanceof ReferenceError || a instanceof TypeError) {
    console.log("    Using shim!"), DOMRect = function(b, f, e, d) {
      this.x = b || 0;
      this.y = f || 0;
      this.width = e || 0;
      this.height = d || 0;
      return this;
    };
  }
}
"left" in DOMRect.prototype || Object.defineProperty(DOMRect.prototype, "left", {get:function() {
  return Math.min(this.x, this.x + this.width);
}});
"right" in DOMRect.prototype || Object.defineProperty(DOMRect.prototype, "right", {get:function() {
  return Math.max(this.x, this.x + this.width);
}});
"top" in DOMRect.prototype || Object.defineProperty(DOMRect.prototype, "top", {get:function() {
  return Math.min(this.y, this.y + this.height);
}});
"bottom" in DOMRect.prototype || Object.defineProperty(DOMRect.prototype, "bottom", {get:function() {
  return Math.max(this.y, this.y + this.height);
}});
CTAT.Geom.Rectangle.contains = function(a, b, f) {
  var e = CTAT.Geom.Rectangle.contains;
  if (b instanceof DOMRect) {
    return e(a, b.left, b.top) & e(a, b.right, b.bottom);
  }
  if (b instanceof DOMPoint) {
    var d = !0;
    if (f instanceof DOMPoint) {
      d = e(a, f.x / f.w, f.y / f.w);
    } else {
      if ("number" == typeof f) {
        return e(a, b.x - f, b.y - f) & e(a, b.x + f, b.y + f);
      }
    }
    return d & e(a, b.x, b.y);
  }
  return a.left <= b & a.right >= b & a.top <= f & a.bottom >= f;
};
Object.defineProperty(DOMRect.prototype, "contains", {value:function(a, b) {
  return CTAT.Geom.Rectangle.contains(this, a, b);
}});
Object.defineProperty(DOMRect.prototype, "clone", {value:function() {
  return new DOMRect(this.x, this.y, this.width, this.height);
}});
Object.defineProperty(DOMRect.prototype, "copyFrom", {value:function(a) {
  this.x = a.x;
  this.y = a.y;
  this.width = a.width;
  this.height = a.height;
  return this;
}});
CTAT.Geom.Rectangle.equals = function(a, b) {
  return a.left == b.left && a.top == b.top && a.right == b.right && a.bottom == b.bottom;
};
CTAT.Geom.Rectangle.inflate = function(a, b, f) {
  b = b ? b : 0;
  f = f ? f : 0;
  b instanceof DOMPoint && (f = b.y, b = b.x);
  a = a.clone();
  a.x -= b;
  a.y -= f;
  a.width += 2 * b;
  a.height += 2 * f;
  return a;
};
CTAT.Geom.Rectangle.isEmpty = function(a) {
  return 0 === a.width || 0 === a.height;
};
CTAT.Geom.Rectangle.setEmpty = function(a) {
  a.x = 0;
  a.y = 0;
  a.width = 0;
  a.height = 0;
  return a;
};
CTAT.Geom.Rectangle.setTo = function(a, b, f, e, d) {
  a.x = b;
  a.y = f;
  a.width = e;
  a.height = d;
  return a;
};
CTAT.Geom.Rectangle.offset = function(a, b, f) {
  b = b ? b : 0;
  f = f ? f : 0;
  b instanceof DOMPoint && (f = b.y, b = b.x);
  a = a.clone();
  a.x += b;
  a.y += f;
  return a;
};
CTAT.Geom.Rectangle.union = function(a, b) {
  var f = new DOMRect;
  f.x = Math.min(a.x, b.x);
  f.y = Math.min(a.y, b.y);
  f.width = Math.max(a.right, b.right) - f.x;
  f.height = Math.max(a.bottom, b.bottom) - f.y;
  return f;
};
var CTATNumberLine = function(a, b, f, e, d) {
  CTAT.Component.Base.SVG.call(this, "CTATNumberLine", "aNumberLine", a, b, f, e, d);
  var c = CTAT.Math.Fraction, g = CTATGlobals.NameSpace.svg;
  a = function(a, b, d, e, f) {
    this.numberline = a;
    this.step = new c(b);
    this.size = d;
    this.origin = new c(0);
    e = e ? e : null;
    f = f ? f : null;
    this.g = null;
    this.setStep = function(a) {
      this.step = new c(a);
    };
    this.setSize = function(a) {
      a = Number(a);
      isNaN(a) && (a = d);
      this.size = a;
    };
    this.setOrigin = function(a) {
      this.origin = new c(a);
    };
    this.generate = function() {
      if (this.numberline) {
        var a = new c, b = document.createDocumentFragment(), d = document.createElementNS(g, "g");
        d.setAttributeNS(null, "data-step-size", this.step.toString());
        d.setAttributeNS(null, "pointer-events", "none");
        e && d.classList.add(e);
        b.appendChild(d);
        if (0 < this.step) {
          for (a.set(this.origin).reduce();a <= this.numberline.Maximum;) {
            a >= this.numberline.Minimum && d.appendChild(this.numberline.genTickmark(a, null, this.size)), a = a.add(this.step);
          }
          a.set(this.origin).reduce();
          for (a = a.subtract(this.step);a >= this.numberline.Minimum;) {
            a <= this.numberline.Maximum && d.appendChild(this.numberline.genTickmark(a, null, this.size)), a = a.subtract(this.step);
          }
        }
        f && $(d).find("text.CTAT-number-line--tickmark-label").each(function() {
          this.classList.add(f);
        });
        return b;
      }
    };
  };
  var h = new a(this, new c(1), 30, "CTAT-number-line--large-tickmark", "CTAT-number-line--large-tickmark-label");
  this.setLargeTickSize = function(a) {
    h.setSize(s);
    this.render();
    return this;
  };
  this.setParameterHandler("LargeTickmarkSize", this.setLargeTickSize);
  this.setParameterHandler("LargeTickmarkStep", function(a) {
    h.setStep(a);
    this.render();
    return this;
  });
  this.data_ctat_handlers["large-tick-step"] = function(a) {
    h.setStep(a);
    this.render();
  };
  var l = new a(this, new c(1, 2), 20, "CTAT-number-line--small-tickmark", "CTAT-number-line--small-tickmark-label");
  this.setSmallTickSize = function(a) {
    l.setSize(s);
    this.render();
    return this;
  };
  this.setParameterHandler("SmallTickmarkSize", this.setSmallTickSize);
  this.setParameterHandler("SmallTickmarkStep", function(a) {
    l.setStep(a);
    this.render();
    return this;
  });
  this.data_ctat_handlers["small-tick-step"] = function(a) {
    l.setStep(a);
    this.render();
  };
  var m = new a(this, new c(0), 25, "CTAT-number-line--denominator-tickmark", "CTAT-number-line--denominator-tickmark-label");
  this.setParameterHandler("DenominatorTickmarkSize", function(a) {
    m.setSize(a);
    this.render();
    return this;
  });
  this.setParameterHandler("DenominatorTickmarkStep", function(a) {
    m.setStep((new c(a)).reciprocal());
  });
  this.data_ctat_handlers.denominator = function(a) {
    a = new c(a);
    m.setStep(a.reciprocal());
  };
  this.X_Axis = new function(a, b, c, g) {
    var d = {};
    this.svg_group = null;
    var e = a;
    Object.defineProperty(this, "start", {get:function() {
      return e;
    }, set:function(a) {
      d = {};
      e = a;
    }});
    Object.defineProperty(this, "min_loc", {get:function() {
      if (!d.hasOwnProperty("min_loc")) {
        var a = this.start.clone(), b = CTAT.Geom.Point.polar(20, this.angle()), a = a.add(b);
        a.x = CTAT.Math.round(a.x);
        a.y = CTAT.Math.round(a.y);
        d.min_loc = a;
      }
      return d.min_loc;
    }});
    var f = b;
    Object.defineProperty(this, "end", {get:function() {
      return f;
    }, set:function(a) {
      d = {};
      f = a;
    }});
    Object.defineProperty(this, "max_loc", {get:function() {
      if (!d.hasOwnProperty("max_loc")) {
        var a = this.end.clone(), b = CTAT.Geom.Point.polar(20, this.angle()), a = a.add(b.scale(-1));
        a.x = CTAT.Math.round(a.x);
        a.y = CTAT.Math.round(a.y);
        d.max_loc = a;
      }
      return d.max_loc;
    }});
    var h = c;
    Object.defineProperty(this, "min", {get:function() {
      return h;
    }, set:function(a) {
      d = {};
      h = a;
    }});
    var l = g;
    Object.defineProperty(this, "max", {get:function() {
      return l;
    }, set:function(a) {
      d = {};
      l = a;
    }});
    Object.defineProperty(this, "length", {get:function() {
      d.hasOwnProperty("length") || (d.length = CTAT.Math.round(this.min_loc.distance(this.max_loc)));
      return d.length;
    }});
    this.isHorizontal = function() {
      return this.start.y === this.end.y;
    };
    this.isVertical = function() {
      return this.start.x === this.end.x;
    };
    Object.defineProperty(this, "range", {get:function() {
      return this.max.subtract(this.min);
    }});
    Object.defineProperty(this, "step_size", {get:function() {
      return CTAT.Geom.Point.equals(this.min_loc, this.max_loc) ? this.length : CTAT.Math.round(this.length / this.range);
    }});
    this.s_vec = function() {
      return this.max_loc.add(this.min_loc.scale(-1));
    };
    this.slope = function() {
      var a = this.s_vec();
      return a.y / a.x;
    };
    this.step = function() {
      d.hasOwnProperty("step") || (d.step = this.s_vec().normalize(this.step_size));
      return d.step;
    };
    this.scalar = function() {
      d.hasOwnProperty("scalar") || (d.scalar = this.range / this.length);
      return d.scalar;
    };
    this.zero = function() {
      d.hasOwnProperty("zero") || (d.zero = this.min_loc.add(this.step().scale(-this.min)), d.zero.x = CTAT.Math.round(d.zero.x), d.zero.y = CTAT.Math.round(d.zero.y));
      return d.zero;
    };
    this.angle = function() {
      if (!d.hasOwnProperty("angle")) {
        var a = this.end.add(this.start.scale(-1));
        d.angle = Math.atan2(a.y, a.x);
      }
      return d.angle;
    };
    this.angle_deg = function() {
      return CTAT.Math.rad2deg(this.angle());
    };
    this.getPosition = function(a) {
      a = this.zero().add(this.step().scale(1 * a));
      a.x = CTAT.Math.round(a.x);
      a.y = CTAT.Math.round(a.y);
      return a;
    };
    this.projected_point = function(a) {
      var b = this.s_vec(), c = a.add(this.min_loc.scale(-1)), c = 0 + (b.y * c.x - b.x * c.y) / (b.y * b.y + b.x * b.x);
      return a.add(new DOMPoint(-c * b.y, c * b.x));
    };
    this.getProjectedPoint = function(a) {
      a = this.projected_point(a);
      return a.distance(this.max_loc) > this.length ? this.min_loc : a.distance(this.min_loc) > this.length ? this.max_loc : a;
    };
    this.getAxisValue = function(a) {
      return CTAT.Math.round(h + this.scalar() * this.min_loc.distance(this.getProjectedPoint(a)));
    };
  }(new DOMPoint(0, 0), new DOMPoint(0, 0), new c(0), new c(3));
  Object.defineProperty(this, "Maximum", {get:function() {
    return this.X_Axis.max;
  }, set:function(a) {
    this.X_Axis.max = new c(a);
    $(this.getDivWrap()).attr("data-ctat-maximum", this.X_Axis.max.toString());
  }});
  this.setMaximum = function(a) {
    this.Maximum = a;
  };
  this.setParameterHandler("Maximum", this.setMaximum);
  this.data_ctat_handlers.maximum = this.setMaximum;
  Object.defineProperty(this, "Minimum", {get:function() {
    return this.X_Axis.min;
  }, set:function(a) {
    this.X_Axis.min = new c(a);
  }});
  this.setMinimum = function(a) {
    this.Minimum = a;
  };
  this.setParameterHandler("Minimum", this.setMinimum);
  this.data_ctat_handlers.minimum = this.setMinimum;
  var q = 1;
  Object.defineProperty(this, "Max_Points", {get:function() {
    return q;
  }, set:function(a) {
    a = parseInt(a);
    isNaN(a) || (q = a);
  }});
  this.setMaxPoints = function(a) {
    this.Max_Points = a;
  };
  this.setParameterHandler("Max_Points", this.setMaxPoints);
  this.data_ctat_handlers["max-points"] = this.setMaxPoints;
  var p = 7;
  this.setPointSize = function(a) {
    p = Number(a);
    w && (w.setAttributeNS(null, "r", p), $(this._point_group).find("circle").each(function() {
      $(this).attr("r", p);
    }));
  };
  this.setStyleHandler("PointSize", this.setPointSize);
  this.data_ctat_handlers["point-size"] = this.setPointSize;
  var n = !1;
  this.setSnapToTickMark = function(a) {
    n = CTATGlobalFunctions.toBoolean(a);
  };
  this.setParameterHandler("SnapToTickmark", this.setSnapToTickMark);
  this.data_ctat_handlers.snap = this.setSnapToTickMark;
  this.theta = 0;
  Object.defineProperty(this, "Orientation", {get:function() {
    return 180 * this.theta / Math.PI;
  }, set:function(a) {
    a = Number(a);
    isNaN(a) && (a = 0);
    this.theta = Math.PI * a / 180;
  }});
  this.setOrientation = function(a) {
    this.Orientation = a;
    this.render();
  };
  this.setParameterHandler("Orientation", this.setOrientation);
  this.data_ctat_handlers.rotation = this.setOrientation;
  this._tickmarks = [];
  this.genTickmark = function(a, b, c) {
    var d = document.createDocumentFragment();
    if (!this._tickmarks.some(function(b) {
      return b.data.equals(a);
    })) {
      var e = document.createElementNS(g, "line"), f = this.X_Axis.getPosition(a), h = CTAT.Geom.Point.polar(c / 2, this.theta + Math.PI / 2).add(f);
      c = CTAT.Geom.Point.polar(-c / 2, this.theta + Math.PI / 2).add(f);
      e.setAttributeNS(null, "x1", h.x);
      e.setAttributeNS(null, "y1", h.y);
      e.setAttributeNS(null, "x2", c.x);
      e.setAttributeNS(null, "y2", c.y);
      e.setAttributeNS(null, "data-value", a.toString());
      e.data = a;
      e.location = f;
      e.label = null;
      this._tickmarks.push(e);
      d.appendChild(e);
      if ("" !== b) {
        f = document.createElementNS(g, "text");
        f.classList.add("CTAT-number-line--tickmark-label");
        f.setAttributeNS(null, "text-anchor", "middle");
        d.appendChild(f);
        if (null === b || void 0 === b) {
          if (1 == a.denominator) {
            f.appendChild(document.createTextNode(String(a.numerator))), f.setAttributeNS(null, "x", c.x), f.setAttributeNS(null, "y", c.y);
          } else {
            b = "" + String(a.numerator);
            h = "" + String(a.denominator);
            f.style.fontSize = "0.6em";
            f.setAttributeNS(null, "text-align", "center");
            var l = document.createElementNS(g, "tspan"), m = document.createElementNS(g, "tspan");
            l.appendChild(document.createTextNode(b));
            m.appendChild(document.createTextNode(h));
            f.appendChild(l);
            f.appendChild(m);
            l.setAttributeNS(null, "text-anchor", "middle");
            l.setAttributeNS(null, "x", c.x);
            l.setAttributeNS(null, "y", c.y);
            l.setAttributeNS(null, "dy", "-1em");
            m.setAttributeNS(null, "text-anchor", "middle");
            m.setAttributeNS(null, "x", c.x);
            m.setAttributeNS(null, "y", c.y);
            b.length > h.length ? l.style.textDecoration = "underline" : m.style.textDecoration = "overline";
          }
        } else {
          f.appendChild(document.createTextNode(b.toString())), d.appendChild(tlabel), f.setAttributeNS(null, "x", c.x), f.setAttributeNS(null, "y", c.y);
        }
        e.label = f;
        console.log($(f).width(), $(f).height());
      }
    }
    return d;
  };
  var x = function() {
    if (null !== this.X_Axis && null !== this.X_Axis.svg_group) {
      var a = this.getBoundingBox(), b = window.getComputedStyle(this._axis_line_group), b = parseInt(b.getPropertyValue("stroke-width")), a = CTAT.Geom.Rectangle.inflate(a, -b, -b), c = new DOMPoint(a.width / 2, a.height / 2), d = c.add(CTAT.Geom.Point.polar(Math.min(40, a.height, a.width) / 4, this.theta)), e = Math.sin(this.theta), f = -Math.cos(this.theta), n = e * c.x + f * c.y, x = -a.height * f, q = -e * a.width, b = new DOMPoint(a.left, c.y), c = new DOMPoint(a.right, c.y);
      if (0 < Math.abs(CTAT.Math.round(x))) {
        var x = new DOMPoint(a.left, (n - e * a.left) / f), u = new DOMPoint(a.right, (n - e * a.right) / f);
        if (a.contains(x) || a.contains(u)) {
          d.distance(x) < d.distance(u) ? (b = u, c = x) : (b = x, c = u);
        }
      }
      0 < Math.abs(CTAT.Math.round(q)) && (q = new DOMPoint((n - f * a.top) / e, a.top), e = new DOMPoint((n - f * a.bottom) / e, a.bottom), a.contains(q) || a.contains(e)) && (d.distance(q) < d.distance(e) ? (b = e, c = q) : (b = q, c = e));
      if (this.X_Axis.start.x != b.x || this.X_Axis.start.y != b.y || this.X_Axis.end.x != c.x || this.X_Axis.end.y != c.y) {
        this.X_Axis.start = b, this.X_Axis.end = c, this.X_Axis.svg_group.innerHTML = "", a = document.createDocumentFragment(), d = document.createElementNS(g, "line"), d.setAttributeNS(null, "x1", b.x), d.setAttributeNS(null, "y1", b.y), d.setAttributeNS(null, "x2", c.x), d.setAttributeNS(null, "y2", c.y), a.appendChild(d), d = document.createElementNS(g, "path"), d.setAttributeNS(null, "d", "M 10,6 L 0,0 L 10,-6"), d.setAttributeNS(null, "transform", "translate(" + CTAT.Geom.Point.to2DString(b) + 
        ") rotate(" + this.Orientation + ")"), a.appendChild(d), b = document.createElementNS(g, "path"), b.setAttributeNS(null, "d", "M -10,6 L 0,0 L -10,-6"), b.setAttributeNS(null, "transform", "translate(" + CTAT.Geom.Point.to2DString(c) + ") rotate(" + this.Orientation + ")"), a.appendChild(b), this.X_Axis.svg_group.appendChild(a);
      }
      this._tickmarks = [];
      b = document.createDocumentFragment();
      b.appendChild(h.generate());
      b.appendChild(l.generate());
      b.appendChild(m.generate());
      this._tick_mark_group.innerHTML = "";
      this._tick_mark_group.appendChild(b);
      b = this._point_group.children;
      for (c = 0;c < b.length;c++) {
        a = b[c], d = this.X_Axis.getPosition(a.value), e = new DOMPoint(a.cx.baseVal.value, a.cy.baseVal.value), 1 < d.distance(e) && (a.cx.baseVal.value = d.x, a.cy.baseVal.value = d.y);
      }
    }
  }.bind(this), u = 0, w = null, z = new DOMPoint(-30, -30), t = !1, D = function(a) {
    z.x = a.clientX;
    z.y = a.clientY;
  }, C = function(a) {
    cancelAnimationFrame(u);
    w.style.visibility = "hidden";
    t = !1;
  }, H = function(a) {
    if (!0 === this.getEnabled() && 0 < q) {
      this.setHintHighlight(!1);
      var b;
      n ? (a = r(a.clientX, a.clientY), b = a.location, a = a.data) : (a = A(a.clientX, a.clientY), b = this.X_Axis.getProjectedPoint(a), a = this.X_Axis.getAxisValue(a));
      var c = document.createElementNS(g, "circle");
      c.classList.add("CTAT-number-line--point");
      c.setAttributeNS(null, "cx", b.x);
      c.setAttributeNS(null, "cy", b.y);
      c.setAttributeNS(null, "r", p);
      c.value = a;
      if (this._point_group.children.length >= this.Max_Points) {
        b = [].slice.call(this._point_group.children);
        var d = b.filter(function(a, b, c) {
          return a.classList.contains("CTAT--incorrect");
        });
        0 < d.length ? this._point_group.removeChild(d[0]) : (b = b.filter(function(a, b, c) {
          return !a.classList.contains("CTAT--correct");
        }), 0 < b.length && this._point_group.removeChild(b[0]));
      }
      this._point_group.appendChild(c);
      this.setActionInput("AddPoint", a.toString());
      this.processAction();
    }
  }.bind(this);
  this.init = function() {
    this.initSVG();
    this.component.classList.add("CTAT-number-line");
    this._axis_line_group = document.createElementNS(g, "g");
    this._axis_line_group.classList.add("CTAT-number-line--axis");
    this._tick_mark_group = document.createElementNS(g, "g");
    this._tick_mark_group.classList.add("CTAT-number-line--tickmark");
    this._point_group = document.createElementNS(g, "g");
    w = document.createElementNS(g, "circle");
    w.setAttributeNS(null, "r", p);
    w.classList.add("CTAT-number-line--cursor");
    w.setAttributeNS(null, "transform", "translate(-30,-30)");
    this.component.appendChild(this._axis_line_group);
    this.component.appendChild(this._tick_mark_group);
    this.component.appendChild(this._point_group);
    this.component.appendChild(w);
    this.X_Axis.svg_group = this._axis_line_group;
    x();
    this.addComponentReference(this, this.getDivWrap());
    this.component.addEventListener("mousemove", D);
    this.component.addEventListener("mouseleave", C);
    var a = this.getEnabled;
    this.component.addEventListener("mouseenter", function() {
      !0 === a() && 0 < q && (t = !0, w.style.visibility = null, u = requestAnimationFrame(G));
    });
    this.component.addEventListener("click", H);
    this.component.addEventListener("focus", this.processFocus);
  };
  var E = -1 < navigator.userAgent.toLowerCase().indexOf("firefox"), A = function(a, b) {
    this.svgPoint = this.svgPoint ? this.svgPoint : this.component.createSVGPoint();
    this.svgPoint.x = a;
    this.svgPoint.y = b;
    var c = this._axis_line_group.getScreenCTM().inverse();
    this.svgPoint = this.svgPoint.matrixTransform(c);
    c = new DOMPoint(this.svgPoint.x, this.svgPoint.y);
    if (E) {
      var g = $(this.component), d = parseInt(g.css("borderLeftWidth")) + parseInt(g.css("paddingLeft")) + parseInt(g.css("marginLeft")), g = parseInt(g.css("borderTopWidth")) + parseInt(g.css("paddingTop")) + parseInt(g.css("marginTop"));
      c.x -= d;
      c.y -= g;
    }
    return c;
  }.bind(this), y = function(a, b) {
    return this.getProjectedPoint(A(a, b));
  }.bind(this.X_Axis), r = function(a, b) {
    for (var c = y(a, b), g = null, d = Number.POSITIVE_INFINITY, e, f, h = 0;h < this._tickmarks.length;h++) {
      e = this._tickmarks[h], f = c.distance(e.location), f < d && (g = e, d = f);
    }
    return g;
  }.bind(this), G = function() {
    if (t && !0 === this.getEnabled()) {
      if (n) {
        var a = r(z.x, z.y);
        w.setAttributeNS(null, "transform", "translate" + CTAT.Geom.Point.to2DString(a.location, !0));
      } else {
        w.setAttributeNS(null, "transform", "translate" + CTAT.Geom.Point.to2DString(y(z.x, z.y), !0));
      }
      u = requestAnimationFrame(G);
    }
  }.bind(this);
  this.render = function() {
    x();
  };
  this.calcXCoordinate = function(a) {
    a = new c(a);
    var b = this.getWidth() - 30, b = Math.abs(b - 30), g = max.subtract(min);
    return 30 + a.subtract(min).divide(g) / b;
  };
  this.calcNum = function(a) {
    var b = this.getWidth() - 30, b = Math.abs(b - 30);
    a = max.subtract(min).multiply((a - 30) / b);
    return min.add(a);
  };
  this.showCorrect = function(a) {
    a.getInput();
    a = a.getAction();
    switch(a) {
      case "AddPoint":
        if (0 < this._point_group.children.length) {
          a = [].slice.call(this._point_group.children);
          var b = a[a.length - 1];
          b.classList.remove("CTAT--incorrect");
          b.classList.remove("CTAT--hint");
          b.classList.add("CTAT--correct");
          this.getDisableOnCorrect() && (a.length >= this.Max_Points && a.every(function(a) {
            return a.classList.contains("CTAT--correct");
          }) ? this.setEnabled(!1) : this.setEnabled(!0));
        }
        break;
      case "Points":
        a = this._point_group.children;
        for (b = 0;b < a.length;b++) {
          var c = a[b];
          c.classList.remove("CTAT--incorrect");
          c.classList.remove("CTAT--hint");
          c.classList.add("CTAT--correct");
        }
        break;
      default:
        console.log("Unhandled Action in", this.getName(), a);
    }
  };
  this.showInCorrect = function(a) {
    a.getInput();
    a = a.getAction();
    switch(a) {
      case "AddPoint":
        0 < this._point_group.children.length && (a = [].slice.call(this._point_group.children), a = a[a.length - 1], a.classList.remove("CTAT--correct"), a.classList.remove("CTAT--hint"), a.classList.add("CTAT--incorrect"));
        break;
      case "Points":
        a = this._point_group.children;
        for (var b = 0;b < a.length;b++) {
          var c = a[b];
          c.classList.remove("CTAT--correct");
          c.classList.remove("CTAT--hint");
          c.classList.add("CTAT--incorrect");
        }
        break;
      default:
        console.log("Unhandled Action in", this.getName(), a);
    }
  };
  this.set_minimum = function(a) {
    this.Minimum = a;
    this.render();
  };
  this.change_minimum = function(a) {
    a = new c(a);
    0 !== a.valueOf() && (this.Minimum = this.Minimum.add(a), this.render());
  };
  this.set_maximum = function(a) {
    this.Maximum = a;
    this.render();
  };
  this.change_maximum = function(a) {
    a = new c(a);
    0 !== a.valueOf() && (this.Maximum = this.Maximum.add(a), this.render());
  };
  this.set_max_user_entries = function(a) {
    this.setMaxPoints(parseInt(a));
    this.setDisableOnCorrect(!1);
  };
  a = function(a, b) {
    a.setStep(b);
    this.render();
  };
  this.set_large_step = a.bind(this, h);
  this.set_small_step = a.bind(this, l);
  this.set_denominator = function(a) {
    0 === parseInt(a) ? m.setStep(0) : m.setStep((new c(a)).reciprocal());
    this.render();
  };
  a = function(a, b) {
    if (0 !== (new c(b)).valueOf()) {
      var g = a.step.add(b);
      0 > g.valueOf() && g.set(0, 1);
      a.setStep(g);
      this.render();
    }
  };
  this.change_large_step = a.bind(this, h);
  this.change_small_step = a.bind(this, l);
  this.change_denominator = function(a) {
    a = new c(a);
    0 !== a.valueOf() && (a = a.add(m.step.denominator), m.setStep(a.reciprocal()));
  };
  this.set_precision = function(a) {
    this.setPrecision(parseInt(a));
    this.render();
  };
  this.AddPoint = function(a, b) {
  };
  this.Points = function(a, b) {
    for (var c in a.split(";")) {
      this.AddPoint(c, b);
    }
  };
  var F = function(a, b, c) {
    switch(c.getAction()) {
      case "ButtonPressed":
        a.call(this, c.getInput());
        break;
      case "Update":
      ;
      case "UpdateTextField":
      ;
      case "UpdateTextArea":
        b.call(this, c.getInput());
    }
  }, B = function(a, b) {
    var c = a.attr(b);
    return c ? c.split(/\s*;\s*/) : [];
  }, I = function() {
    if (!this.getDivWrap()) {
      return {};
    }
    var a = $(this.getDivWrap()), a = B.bind(null, a), b = {};
    a("data-ctat-ctrl-max").forEach(function(a) {
      b[a] = F.bind(this, this.change_maximum, this.set_maximum);
    }, this);
    a("data-ctat-ctrl-min").forEach(function(a) {
      b[a] = F.bind(this, this.change_minimum, this.set_minimum);
    }, this);
    a("data-ctat-ctrl-large-tick").forEach(function(a) {
      b[a] = F.bind(this, this.change_large_step, this.set_large_step);
    }, this);
    a("data-ctat-ctrl-small-tick").forEach(function(a) {
      b[a] = F.bind(this, this.change_small_step, this.set_small_step);
    }, this);
    a("data-ctat-ctrl-denominator").forEach(function(a) {
      b[a] = F.bind(this, this.change_denominator, this.set_denominator);
    }, this);
    return b;
  }.bind(this), K = function(a) {
    var b = I();
    if (0 !== Object.keys(b).length) {
      if (a instanceof CTAT.Component.Base.Tutorable) {
        if (a != this) {
          if (b.hasOwnProperty(a.getName())) {
            return b[a.getName()];
          }
          if (b.hasOwnProperty(a.getComponentGroup())) {
            return b[a.getComponentGroup()];
          }
        }
      } else {
        if (a instanceof CTATSAI) {
          if (a.getSelection() != pointer.getName() && b.hasOwnProperty(a.getSelection())) {
            return b[a.getSelection()];
          }
        } else {
          if (a instanceof String) {
            if (a != pointer.getName() && b.hasOwnProperty(a)) {
              return b[a];
            }
          } else {
            if (a instanceof Element && a != pointer.getComponent() && b.hasOwnProperty(a.id)) {
              return b[a.id];
            }
          }
        }
      }
    }
    return null;
  }.bind(this);
  document.addEventListener(CTAT.Component.Base.Tutorable.EventType.action, function(a) {
    var b = a.detail.sai;
    a = K(a.detail.component);
    b && null !== a && a(b);
  }, !1);
  this.setMaxControllers = function(a) {
    $(this.getDivWrap()).attr("data-ctat-ctrl-max", a);
  };
  this.setParameterHandler("MaxValueControllers", this.setMaxControllers);
  this.setMinControllers = function(a) {
    $(this.getDivWrap()).attr("data-ctat-ctrl-min", a);
  };
  this.setParameterHandler("MinValueControllers", this.setMinControllers);
  this.setLargeTickControllers = function(a) {
    $(this.getDivWrap()).attr("data-ctat-ctrl-large-tick", a);
  };
  this.setParameterHandler("LargeTickmarkControllers", this.setLargeTickControllers);
  this.setSmallTickControllers = function(a) {
    $(this.getDivWrap()).attr("data-ctat-ctrl-small-tick", a);
  };
  this.setParameterHandler("SmallTickmarkControllers", this.setSmallTickControllers);
  this.setDenominatorControllers = function(a) {
    $(this.getDivWrap()).attr("data-ctat-ctrl-denominator", a);
  };
  this.setParameterHandler("DenominatorTickmarkControllers", this.setDenominatorControllers);
  this.updateSAI = function() {
    for (var a = this._point_group.children, b = [], c = 0;c < a.length;c++) {
      b.push(a[c].value);
    }
    this.setActionInput("Points", b.join(";"));
  };
};
CTATNumberLine.prototype = Object.create(CTAT.Component.Base.SVG.prototype);
CTATNumberLine.prototype.constructor = CTATNumberLine;
CTAT.ComponentRegistry.addComponentType("CTATNumberLine", CTATNumberLine);
var CTATNumericStepper = function(a, b, f, e, d) {
  CTAT.Component.Base.Tutorable.call(this, "CTATNumericStepper", "__undefined__", a, b, f, e, d);
  this.setAction("Update");
  var c = document.createElement("input");
  c.type = "number";
  this.set_maximum = function(a) {
    a = Number(a);
    isNaN(a) || (c.max = a);
  };
  this.setParameterHandler("maximum", this.set_maximum);
  this.set_minimum = function(a) {
    a = Number(a);
    isNaN(a) || (c.min = a);
  };
  this.setParameterHandler("minimum", this.set_minimum);
  this.set_step = function(a) {
    a = Number(a);
    isNaN(a) || (c.step = a);
  };
  this.setParameterHandler("stepSize", this.set_step);
  this.update_value = function(a) {
    a = Number(a);
    isNaN(a) || (c.value = a, this.setInput(a));
  };
  this.setParameterHandler("value", this.update_value);
  this.updateSAI = function() {
    this.setInput(c.value);
  };
  this.Update = this.update_value;
  this.handle_change = function(a) {
    this.updateSAI();
    this.processAction();
  }.bind(this);
  this.init = function() {
    c.id = this.getName() + "_spinner";
    c.addEventListener("change", this.handle_change);
    c.classList.add("CTAT-numeric-stepper");
    this.setComponent(c);
    this.setInitialized(!0);
    var a = $(this.getDivWrap()), b = $(c);
    "autofocus value max min readOnly step".split(" ").forEach(function(c) {
      var d = a.attr(c);
      d && b.attr(c, d);
    });
    this.getDivWrap().innerHTML = "";
    this.getDivWrap().appendChild(c);
    this.component.addEventListener("focus", this.processFocus);
  };
};
CTATNumericStepper.prototype = Object.create(CTAT.Component.Base.Tutorable.prototype);
CTATNumericStepper.prototype.constructor = CTATNumericStepper;
CTAT.ComponentRegistry.addComponentType("CTATNumericStepper", CTATNumericStepper);
var CTATPieChart = function(a, b, f, e, d) {
  CTAT.Component.Base.UnitDisplay.call(this, "CTATPieChart", "aPieChart", a, b, f, e, d);
  var c = 3, g = 3, h = this, l, m, q, p = null, n = CTATGlobals.NameSpace.svg;
  this.init = function() {
    this.initSVG();
    this.baseGroup = document.createElementNS(n, "g");
    this.getComponent().appendChild(this.baseGroup);
    this.getComponent().classList.add("CTAT-pie-chart");
    l = document.createElementNS(n, "filter");
    l.id = this.genName("Shadow");
    m = "#" + l.id;
    q = "url(" + m + ")";
    l.setAttributeNS(null, "width", "200%");
    l.setAttributeNS(null, "height", "200%");
    p = document.createElementNS(n, "feOffset");
    p.setAttributeNS(null, "in", "SourceAlpha");
    p.setAttributeNS(null, "result", "offOut");
    p.setAttributeNS(null, "dx", g);
    p.setAttributeNS(null, "dy", g);
    l.appendChild(p);
    var a = document.createElementNS(n, "feGaussianBlur");
    a.setAttributeNS(null, "in", "offOut");
    a.setAttributeNS(null, "result", "blurOut");
    a.setAttributeNS(null, "stdDeviation", 4);
    l.appendChild(a);
    a = document.createElementNS(n, "feBlend");
    a.setAttributeNS(null, "in", "SourceGraphic");
    a.setAttributeNS(null, "in2", "blurOut");
    a.setAttributeNS(null, "mode", "normal");
    l.appendChild(a);
    this.getComponent().getElementsByTagName("defs")[0].appendChild(l);
    0 < g && this.baseGroup.setAttributeNS(null, "filter", q);
    this.drawPieces();
    this.addComponentReference(this, this.getDivWrap());
    this.component.addEventListener("focus", this.processFocus);
  };
  this.drawPieces = function() {
    if (this.baseGroup) {
      var a = window.getComputedStyle(this.getComponent()), a = parseFloat(a.getPropertyValue("stroke-width")), b = this.getBoundingBox(), d = Math.min(b.width / 2, b.height / 2) - (a + g + 4), e = new DOMPoint(b.width / 2, b.height / 2), a = this.parseValue(), f = document.createDocumentFragment();
      a.reduce(function(a, b, g, l) {
        if (1 <= b.valueOf()) {
          g = document.createElementNS(n, "circle"), g.classList.add("CTAT-pie-chart--piece"), g.cx.baseVal.value = e.x, g.cy.baseVal.value = e.y, g.r.baseVal.value = d, this.addPieceElem(g, b, b.selected), f.appendChild(g);
        } else {
          g = document.createElementNS(n, "path");
          g.classList.add("CTAT-pie-chart--piece");
          f.appendChild(g);
          window.getComputedStyle(g);
          var m = 2 * Math.PI * a.valueOf();
          l = e.add(CTAT.Geom.Point.polar(d, m));
          b.reduce();
          var x = e.add(CTAT.Geom.Point.polar(d, 2 * Math.PI * b.valueOf() + m)), q = e.clone();
          if (0 < c && c < d) {
            m = CTAT.Geom.Point.polar(c, m + Math.PI * b.valueOf());
            q = q.add(m);
            l = l.add(m);
            var u = function(a, b, c) {
              return a.distance(b) < a.distance(c) ? b : c;
            };
            l = CTAT.Geom.Point.circle_intersection(q, l, e, d).reduce(u.bind(this, l));
            x = x.add(m);
            x = CTAT.Geom.Point.circle_intersection(q, x, e, d).reduce(u.bind(this, x));
          }
          m = CTAT.Geom.Point.to2DString;
          q = "M " + m(q);
          u = new DOMPoint(d, d);
          q += " L " + m(l);
          q += " A " + m(u) + " 0 " + (.5 < b.valueOf() ? 1 : 0) + ",1 " + m(x);
          g.setAttributeNS(null, "d", q + " Z");
          h.addPieceElem(g, b, b.selected);
        }
        return a.add(b);
      }, new CTAT.Math.Fraction);
      this.baseGroup.innerHTML = "";
      this.baseGroup.appendChild(f);
    }
  };
  this.getExplode = function() {
    return c;
  };
  this.getDropShadowDistance = function() {
    return g;
  };
  this.setExplode = function(a) {
    a = Number(a);
    if (!isNaN(a)) {
      var b = a !== c;
      c = a;
      b && this.drawPieces();
    }
    return this;
  };
  this.setStyleHandler("explode", this.setExplode);
  this.data_ctat_handlers.explode = function(a) {
    this.setExplode(a);
  };
  this.setDropShadowDistance = function(a) {
    g = parseInt(a);
    g = isNaN(g) ? 0 : g;
    p && (p.setAttributeNS(null, "dx", g), p.setAttributeNS(null, "dy", g), 0 >= g && this.baseGroup ? this.baseGroup.removeAttributeNS(null, "filter") : this.baseGroup.hasAttributeNS(null, "filter") || this.baseGroup.setAttributeNS(null, "filter", q));
  };
  this.data_ctat_handlers["shadow-distance"] = function(a) {
    this.setDropShadowDistance(a);
  };
};
CTATPieChart.prototype = Object.create(CTAT.Component.Base.UnitDisplay.prototype);
CTATPieChart.prototype.constructor = CTATPieChart;
CTAT.ComponentRegistry.addComponentType("CTATPieChart", CTATPieChart);
var CTATPlayButton = function() {
  function a() {
    c.setFillColor("black");
    c.drawTriangleFilled();
    d.setFillColor("rgb(36, 85, 00)");
    d.drawCircleFilled();
  }
  function b() {
    c.setFillColor("white");
    c.drawTriangleFilled();
    d.setFillColor("green");
    d.drawCircleFilled();
  }
  function f() {
    e.removeComponent();
    getSafeElementById(ctatcontainer).removeChild(h);
    initTutor();
  }
  CTATBase.call(this, "CTATPlayButton", "__undefined__");
  var e = null, d = null, c = null, g = null, h = null;
  (function() {
    var a = getSafeElementById(ctatcontainer);
    h = document.createElement("div");
    h.id = "ctatdivPlayTutor";
    h.width = a.width;
    h.height = a.height;
    h.setAttribute("style", "width: " + a.width + "px; height: " + a.height + "px; left: 0px; top: 0px; position:absolute");
    getSafeElementById("container").appendChild(h);
  })();
  (function() {
    e = new CTATCanvasComponent;
    var l = h.height / 3;
    g = new CTATShape("PlayTutor", "play background", 0, 0, h.width + 1, h.height + 1);
    g.addPoint(0, 0);
    g.setFillColor("rgb(66, 0, 66)");
    g.drawRectangleFilled();
    d = new CTATShape("PlayTutor", "play circle", h.width / 2 - l, h.height / 2 - l, 2 * l, 2 * l);
    d.addPoint(0, 0);
    d.setFillColor("green");
    d.setRadius(l);
    d.drawCircleFilled();
    c = new CTATShape("PlayTutor", "play triangle", d.getXOffset() + .25 * d.getWidth() - 5, d.getYOffset() + .25 * d.getHeight() - 5, d.getWidth() - .25 * d.getWidth(), .6 * d.getHeight());
    c.addPoint(0, 0);
    c.addPoint(0, c.getHeight());
    c.addPoint(c.getWidth(), c.getHeight() / 2);
    c.setFillColor("white");
    c.drawTriangleFilled();
    e.addShape(g);
    e.addShape(d);
    e.addShape(c);
    d.addEventListener("mouseover", a);
    d.addEventListener("mouseout", b);
    c.addEventListener("mouseover", a);
    c.addEventListener("mouseout", b);
    c.addEventListener("click", f);
    d.addEventListener("click", f);
  })();
};
CTATPlayButton.prototype = Object.create(CTATBase.prototype);
CTATPlayButton.prototype.constructor = CTATPlayButton;
var CTATRadioButton = function(a, b, f, e, d) {
  CTAT.Component.Base.Clickable.call(this, "CTATRadioButton", "__undefined__", a, b, f, e, d);
  this.setDefaultWidth(100);
  this.setDefaultHeight(22);
  var c = this, g = null, h = null, l = null, m = CTATRadioButton.Options.Placement.right;
  this.setSelection(this.getComponentGroup());
  this.setAction("UpdateRadioButton");
  this.setStyleHandler("BackgroundColor", null);
  this.init = function() {
    c.setInitialized(!0);
    g = document.createElement("div");
    g.classList.add("CTAT-radiobutton");
    h = document.createElement("input");
    h.type = "radio";
    h.id = CTATGlobalFunctions.gensym.div_id();
    h.value = c.getName();
    this.getComponentGroup() ? h.name = c.getComponentGroup() : this.getDivWrap() && $(this.getDivWrap()).attr("name") ? h.name = $(this.getDivWrap()).attr("name") : h.name = "radioButtonGroup";
    c.assignEnabled(!0);
    !0 === c.getEnabled() ? h.disabled = !1 : h.disabled = !0;
    c.ctatdebug("Final location: " + c.getX() + "," + c.getY() + " with text: " + c.getText());
    c.addComponentReference(c, g);
    var a = this.getDivWrap().innerHTML;
    this.getDivWrap().innerHTML = "";
    c.getDivWrap().appendChild(g);
    l = document.createElement("label");
    l.htmlFor = h.id;
    this.getText() ? l.textContent = c.getText() : a && (l.innerHTML = a);
    c.setComponent(g);
    c.setLabel(l);
    g.appendChild(h);
    g.appendChild(l);
    c.render();
    h.addEventListener("click", function(a) {
      c.updateSAI();
      c.processAction();
    });
    h.addEventListener("focus", this.processFocus);
    h.onfocus = this.processOnFocus;
    this.setSelection(this.getComponentGroup());
    this.component.addEventListener("focus", this.processFocus);
  };
  var q = this.setText;
  this.setText = function(a) {
    q(a);
    null !== g && (l.textContent = this.getText());
  };
  this.setStyleHandler("buttonLabel", this.setText);
  var p = this.setEnabled;
  this.setEnabled = function(a) {
    p(a);
    null !== h && (h.disabled = !this.getEnabled());
  };
  this.setChecked = function(a) {
    null !== h && (h.checked = a);
  };
  this.getChecked = function() {
    return h.checked;
  };
  this.getRadioInput = function() {
    return h.checked ? h.value + ": " + l.textContent : "";
  };
  this.getLabelPlacement = function() {
    return m;
  };
  this.setLabelPlacement = function(a) {
    m = String(a);
    if (l && h) {
      switch(a = CTATRadioButton.Options.Placement, m.toLowerCase()) {
        case a.left:
          h.style.width = null;
          h.style["float"] = "left";
          break;
        case a.bottom:
          h.style.width = "100%";
          break;
        case a.top:
          g.appendChild(h);
          h.style.width = "100%";
          break;
        default:
          h.style.width = null, h.style["float"] = null;
      }
    }
  };
  this.setStyleHandler("labelPlacement", this.setLabelPlacement);
  this.reset = function() {
    c.ctatdebug(" reset ( " + c.getName() + ")");
    h.checked = !1;
    c.setEnabled(!0);
  };
  this.UpdateRadioButton = function(a) {
    0 <= a.indexOf(h.value) && c.setChecked(!0);
    c.ctatdebug("UpdateRadioButton ()");
  };
  this.updateSAI = function() {
    var a = $('div[data-ctat-component]:has(input[type="radio"][name="' + h.name + '"]:checked)'), b = "";
    1 === a.length && (b = $(a[0]).data("CTATComponent").getRadioInput());
    c.setSelection(h.name);
    c.setInput(b);
  };
  var n = function(a) {
    l.classList.add(a);
    h.classList.add(a);
  }, x = function(a) {
    l.classList.remove(a);
    h.classList.remove(a);
  };
  this.showCorrect = function(a) {
    x("CTAT--hint");
    x("CTAT--incorrect");
    (a ? 0 === a.getInput().indexOf(h.value) : 1) ? n("CTAT--correct") : x("CTAT-correct");
  };
  this.removeCorrect = function() {
    x("CTAT--correct");
  };
  this.showInCorrect = function(a) {
    x("CTAT--hint");
    x("CTAT--correct");
    (a ? 0 === a.getInput().indexOf(h.value) : 1) ? n("CTAT--incorrect") : x("CTAT-incorrect");
  };
  this.removeInCorrect = x.bind(this, "CTAT--incorrect");
  this.showHintHighlight = function(a) {
    this.removeCorrect();
    this.removeInCorrect();
    a ? n("CTAT--hint") : x("CTAT--hint");
  };
};
CTATRadioButton.prototype = Object.create(CTAT.Component.Base.Clickable.prototype);
CTATRadioButton.prototype.constructor = CTATRadioButton;
CTATRadioButton.Options = {Placement:{left:"left", right:"right", top:"top", bottom:"bottom"}};
CTAT.ComponentRegistry.addComponentType("CTATRadioButton", CTATRadioButton);
var CTATLinkData = {};
var CTATScrollPaneComponent = function(a, b, f, e, d) {
  CTAT.Component.Base.Tutorable.call(this, "CTATScrollPaneComponent", "__undefined__", a, b, f, e, d);
  var c = 0, g = this;
  g.isTabIndexable = !1;
  this.getAlpha = function() {
    return c;
  };
  this.setAlpha = function(a) {
    c = a;
  };
  this.init = function() {
    g.ctatdebug("init (" + g.getName() + ")");
    g.ctatdebug("Final location: " + g.getX() + "," + g.getY() + " with text: " + g.getText());
    g.setInitialized(!0);
  };
  this.processCommShellEvent = function(a, b) {
    g.ctatdebug("processCommShellEvent (" + a + ")");
  };
  this.processSerialization = function() {
    g.ctatdebug("processSerialization()");
  };
  this.postProcess = function() {
    g.ctatdebug("postProcess ()");
    for (var a in this.parameters) {
      var b = this.parameters[a];
      g.ctatdebug("Checking style name: " + a);
      if ("TargetMovieClip" == a) {
        g.ctatdebug("Loading sub element: [" + b.trim() + "] ...");
        var c = findMovieClip(b.trim());
        if (null !== c) {
          if (g.ctatdebug("Found target movieclip, temporarily removing ..."), null !== c.getDivWrapper().parentNode) {
            try {
              c.getDivWrapper().parentNode.removeChild(c.getDivWrapper());
            } catch (d) {
              CTATScrim.scrim.errorScrimUp(d.message);
              return;
            }
            g.getDivWrap().setAttribute("id", "scrollsubdiv");
            g.getDivWrap().style.zIndex = CTATGlobalFunctions.gensym.z_index();
            g.ctatdebug("Adding ...");
            g.getDivWrap().appendChild(c.getDivWrapper());
            b = CTATGlobalFunctions.gensym.z_index();
            b++;
            var e = c.getDivWrapper().style.left, f = c.getDivWrapper().style.top;
            c.getDivWrapper().style.left = "0px";
            c.getDivWrapper().style.top = "0px";
            g.ctatdebug("Moving canvas from: " + e + "," + f + " to: 0,0");
            c = c.getDivWrapper().childNodes;
            for (e = 0;e < c.length;e++) {
              b++;
            }
          }
        } else {
          g.ctatdebug("Unable to find the target movieclip to reparent the content from");
        }
      }
    }
    g.ctatdebug("Final location: " + g.getX() + "," + g.getY() + " with text: " + g.getText());
    null == commShell || void 0 == commShell ? g.ctatdebug("Error: can't add event listener to commshell, pointer is invalid") : commShell.addGlobalEventListener(this);
  };
  this.configFromDescription();
};
CTATScrollPaneComponent.prototype = Object.create(CTAT.Component.Base.Tutorable.prototype);
CTATScrollPaneComponent.prototype.constructor = CTATScrollPaneComponent;
CTAT.ComponentRegistry.addComponentType("CTATScrollPaneComponent", CTATScrollPaneComponent);
var CTATSkillWindow = function(a, b, f, e, d) {
  CTAT.Component.Base.Graphical.call(this, "CTATSkillWindow", "__undefined__", a, b, f, e, d);
  var c = this;
  c.isTabIndexable = !1;
  this.setStyleHandler("SkillBarWidth", null);
  this.setStyleHandler("inspSkillBarWidth", null);
  this.getThreshold = function() {
    var a = parseFloat($(this.getDivWrap()).attr("data-ctat-threshold"));
    return isNaN(a) ? .95 : a;
  };
  this.setThreshold = function(a) {
  };
  this.setSkillBarBorderColor = function(a) {
    CTATGlobalFunctions.formatColor(a);
  };
  this.setStyleHandler("SkillBarBorderColor", this.setSkillBarBorderColor);
  this.setStyleHandler("inspSkillBarBorderColor", this.setSkillBarBorderColor);
  this.setSkillBarColor = function(a) {
    CTATGlobalFunctions.formatColor(a);
  };
  this.setStyleHandler("SkillBarColor", this.setSkillBarColor);
  this.setStyleHandler("inspSkillBarColor", this.setSkillBarColor);
  this.setSkillBarThresholdColor = function(a) {
    CTATGlobalFunctions.formatColor(a);
  };
  this.setStyleHandler("SkillMasteryColor", this.setSkillBarThresholdColor);
  this.setStyleHandler("inspSkillBarThresholdColor", this.setSkillBarThresholdColor);
  this.setBorderColor("#408080");
  this.setStyleHandler("OuterBorderColor", this.setBorderColor);
  var g = null;
  this.ctatdebug(this.getClassName() + " (" + this.getX() + "," + this.getY() + "," + this.getWidth() + "," + this.getHeight() + ")");
  this.getAlpha = function() {
    return alpha;
  };
  this.setAlpha = function(a) {
    alpha = a;
  };
  this.init = function() {
    c.ctatdebug("init (" + c.getName() + ")");
    c.setIsAbstractComponent(!0);
    c.setInitialized(!0);
    g = this.getDivWrap();
    this.setComponent(g);
    this.drawComponent();
    this.component.addEventListener("focus", this.processFocus);
  };
  this.assignSkillSet = function(a) {
    skillSet = a;
    this.drawComponent();
  };
  this.updateSkillSet = function(a) {
    if (skillSet) {
      c.ctatdebug("updateSkillSet (" + a.getSkillSet().length + ")");
      a = a.getSkillSet();
      for (var b = 0;b < a.length;b++) {
        var g = a[b];
        c.ctatdebug("Updating skill " + g.getSkillName() + " to level: " + g.getLevel() + " ...");
        skillSet.setSkillLevel(g.getSkillName(), g.getLevel(), 1);
      }
      this.drawComponent();
    } else {
      c.ctatdebug("Error: updateSkillSet () no initial skill set given, can't update");
    }
  };
  this.drawComponent = function() {
    c.ctatdebug("drawComponent ()");
    if (null === skillSet) {
      ctatdebug("Info: no skillSet object available, bumping out");
    } else {
      var a = skillSet.getSkillSet();
      if (null === a) {
        c.ctatdebug("Error: list of skills is null in skills object");
      } else {
        if (0 >= a.length) {
          c.ctatdebug("Error: list of skills is 0 length");
        } else {
          for (var b = document.createDocumentFragment(), d = this.getThreshold(), e = 0;e < a.length;e++) {
            var f = a[e];
            c.ctatdebug("Drawing skill " + e + " " + f.getDisplayName() + " level: " + f.getLevel() + " ...");
            var n = document.createElement("div");
            n.classList.add("CTATSkillWindow--skill");
            var x = document.createElement("div");
            x.classList.add("CTATSkillWindow--bar");
            var u = document.createElement("div"), w = f.getLevel();
            w < d ? u.classList.add("CTATSkillWindow--bar--nonmastered") : u.classList.add("CTATSkillWindow--bar--mastery");
            u.style.width = w > d ? "100%" : 100 * w + "%";
            x.appendChild(u);
            n.appendChild(x);
            b.appendChild(n);
            x = document.createElement("div");
            x.textContent = f.getDisplayName() || "no-name";
            x.classList.add("CTATSkillWindow--label");
            n.appendChild(x);
          }
          g.innerHTML = "";
          g.appendChild(b);
        }
      }
    }
  };
};
CTATSkillWindow.prototype = Object.create(CTAT.Component.Base.Graphical.prototype);
CTATSkillWindow.prototype.constructor = CTATSkillWindow;
CTAT.ComponentRegistry.addComponentType("CTATSkillWindow", CTATSkillWindow);
var CTATSubmitButton = function(a, b, f, e, d) {
  CTATButton.call(this, a, b, f, e, d);
  this.setClassName("CTATSubmitButton");
  var c = this, g = {};
  this.setParameterHandler("target_components", function(a) {
    a = String(a).split(/\s*;\s*/);
    g = {};
    a.forEach(function(a) {
      g[a] = 1;
    });
    return this;
  });
  this.data_ctat_handlers.target = function(a) {
    g = {};
    String(a).split(/\s*[;,]\s*/).forEach(function(a) {
      g[a] = 1;
    });
  };
  var h = this.init;
  this.init = function() {
    h();
    this.setParameter("tutorComponent", CTAT.Component.Base.Tutorable.Options.DO_NOT_TUTOR);
    this.component.addEventListener("focus", this.processFocus);
  };
  var l = function(a) {
    return 0 === Object.keys(g).length ? !1 : a === c ? !1 : a instanceof CTAT.Component.Base.Tutorable ? g.hasOwnProperty(a.getName()) || g.hasOwnProperty(a.getComponentGroup()) : a instanceof CTATSAI ? a.getSelection() != c.getName() && g.hasOwnProperty(a.getSelection()) : a instanceof String ? a != c.getName() && g.hasOwnProperty(a) : a instanceof Element ? a != c.getComponent() && (g.hasOwnProperty(a.id) || g.hasOwnProperty(a.getAttribute("name"))) : !1;
  };
  a = CTAT.Component.Base.Tutorable.EventType;
  document.addEventListener(a.correct, function(a) {
    a.detail.sai && l(a.detail.component) && c.isNotGraded() && c.setCorrect();
  }, !1);
  document.addEventListener(a.incorrect, function(a) {
    a.detail.sai && l(a.detail.component) && (c.setIncorrect(), c.setEnabled(!0));
  }, !1);
  document.addEventListener(a.ungrade, function(a) {
    (a = a.detail.component) && l(a) && c.setNotGraded();
  }, !1);
  document.addEventListener(a.highlight, function(a) {
    var b = a.detail.component;
    b && l(b) && c.setHintHighlight(a.detail.isHighlighted);
  }, !1);
  this.processClick = function(a) {
    if (!0 === c.getEnabled()) {
      for (var b in g) {
        a = CTATShellTools.findComponent(b), null !== a && 0 < a.length && (a = a[0], a instanceof CTAT.Component.Base.Tutorable ? a.getEnabled() && a.grade(this) : this.ctatdebug("Invalid target component: " + a));
      }
    }
  };
};
CTATSubmitButton.prototype = Object.create(CTATButtonBasedComponent.prototype);
CTATSubmitButton.prototype.constructor = CTATSubmitButton;
CTAT.ComponentRegistry.addComponentType("CTATSubmitButton", CTATSubmitButton);
var CTATTextBasedComponent = function(a, b, f, e, d, c, g) {
  CTAT.Component.Base.Tutorable.call(this, a, b, f, e, d, c, g);
  var h = this, l = "", m = !0, q = 255, p = !0;
  this.setAction("UpdateTextField");
  this.backgrade = !0;
  this.assignText = function(a) {
    l = a;
    this.setInput(a);
  };
  this.UpdateTextArea = this.UpdateTextField = function(a) {
    this.setText(a);
  };
  this.setTabOnEnter = function(a) {
    m = CTATGlobalFunctions.toBoolean(a);
  };
  this.setStyleHandler("TabOnEnter", this.setTabOnEnter);
  this.data_ctat_handlers["tab-on-enter"] = this.setTabOnEnter;
  this.assignEditable = function(a) {
    p = a;
  };
  this.setMaxCharacters = function(a) {
    q = a;
  };
  this.setStyleHandler("MaxCharacters", this.setMaxCharacters);
  this.getText = function() {
    return l;
  };
  this.getEditable = function() {
    return p;
  };
  this.getTabOnEnter = function() {
    return m;
  };
  this.getMaxCharacters = function() {
    return q;
  };
  this.setEditable = function(a) {
    h.assignEditable(CTATGlobalFunctions.toBoolean(a));
    null !== h.getComponent() && (!0 === h.getEditable() ? h.getComponent().contentEditable = "true" : h.getComponent().contentEditable = "false");
  };
  this.setStyleHandler("Enabled", this.setEditable);
  this.setEnabled = function(a) {
    h.assignEnabled(a);
    null !== h.getComponent() && (h.getComponent().disabled = !a, this.setEditable(a));
  };
  var n = this.processAction.bind(this);
  this.processAction = function(a, b) {
    this.updateSAI();
    CTATGlobalFunctions.isBlank(this.getValue()) || n(a, b);
  };
  this.processKeypress = function(a) {
    h.ctatdebug("processKeypress ()");
    var b = a.target.getAttribute("id");
    h.ctatdebug(b);
    var c = h.getComponentFromID(b);
    if (null === c) {
      h.ctatdebug("Error: component reference is null");
    } else {
      switch(h.ctatdebug(c.getName() + " keydown (" + ("google" == CTATConfig.platform ? 0 : window.event ? window.event.keyCode : a.which) + " -> " + a.eventPhase + ") ID: " + b), a.which) {
        case 37:
          h.ctatdebug("left arrow key pressed!");
          break;
        case 39:
          h.ctatdebug("right arrow key pressed!");
          break;
        case 13:
          return m ? (h.component.blur(), CTATGlobals.Tab.Focus = null, h.processAction(), !1) : !0;
        case 0:
          h.component.blur();
          CTATGlobals.Tab.Focus = null;
          h.processAction();
          break;
        default:
          h.ctatdebug('Key pressed! "' + a.which + '"');
      }
    }
  };
  this.updateSAI = function() {
    this.setInput(this.getValue());
  };
};
CTATTextBasedComponent.prototype = Object.create(CTAT.Component.Base.Tutorable.prototype);
CTATTextBasedComponent.prototype.constructor = CTATTextBasedComponent;
var CTATTextArea = function(a, b, f, e, d) {
  CTATTextBasedComponent.call(this, "CTATTextArea", "__undefined__", a, b, f, e, d);
  this.setDefaultWidth(100);
  this.setDefaultHeight(44);
  var c = this, g = null, h = null;
  this.setAction("UpdateTextArea");
  this.ctatdebug(this.getClassName() + " (" + this.getX() + "," + this.getY() + "," + this.getWidth() + "," + this.getHeight() + ")");
  this.init = function() {
    g = document.createElement("textarea");
    a && (g.name = a.name);
    g.setAttribute("id", CTATGlobalFunctions.gensym.div_id());
    g.classList.add("CTAT-text");
    this.getDivWrap() && $(this.getDivWrap()).attr("maxlength") && (g.maxlength = $(this.getDivWrap()).attr("maxlength"));
    this.getDivWrap() && $(this.getDivWrap()).attr("rows") && (g.rows = $(this.getDivWrap()).attr("rows"));
    this.getDivWrap() && $(this.getDivWrap()).attr("cols") && (g.cols = $(this.getDivWrap()).attr("cols"));
    c.setComponent(g);
    this.ctatdebug("Final location: " + c.getX() + "," + c.getY() + " with text: " + c.getText());
    g.value = this.getText();
    c.setInitialized(!0);
    c.addComponentReference(c, g);
    c.getDivWrap().appendChild(g);
    $(g).keypress(c.processKeypress);
    g.addEventListener("focus", c.processFocus);
    $(g).on("input", function(a) {
      c.setNotGraded();
    });
  };
  this.processBlur = function(a) {
    c.processAction();
  };
  this.setCellContainer = function(a) {
    h = a;
  };
  this.getCellContainer = function() {
    return h;
  };
  this.setText = function(a) {
    c.ctatdebug("setText (" + a + ")");
    c.assignText(a);
    g.value = a;
  };
  this.reset = function() {
    c.configFromDescription();
    c.processSerialization();
    g.value = "";
  };
  this.setStyleHandler("DrawBorder", function(a) {
    c.setShowBorder(a);
    c.addCSSAttribute("border-width", c.getShowBorder() ? 1 : 0);
  });
  this.setStyleHandler("inspBackgroundColor", this.setBackgroundColor);
  this.setStyleHandler("showBorder", this.setShowBorder);
};
CTATTextArea.prototype = Object.create(CTATTextBasedComponent.prototype);
CTATTextArea.prototype.constructor = CTATTextArea;
CTAT.ComponentRegistry.addComponentType("CTATTextArea", CTATTextArea);
var CTATTable = function(a, b, f, e, d) {
  function c() {
    var a = $(l).width(), b = $(l.parentNode).height();
    D = Math.floor(a / n);
    C = m && 0 < u ? Math.floor((b - u) / (p - 1)) : Math.floor(b / p);
    h.ctatdebug("tableWidth: " + a);
    h.ctatdebug("tableHeight: " + b);
    h.ctatdebug("Determined cell size to be: " + D + "x" + C);
  }
  function g(a, b, c, g, d) {
    h.ctatdebug("addInputToCell");
    var e = document.createElement("div");
    e.classList.add("CTATTextInput");
    e.setAttribute("id", h.getName() + ".R" + a + "C" + b);
    e.style.width = "100%";
    e.style.height = "100%";
    d.appendChild(e);
    b = new CTAT.ComponentRegistry.CTATTextInput;
    console.log("Attaching CTAT tutoring to " + $(e).attr("id") + " inside table init");
    b.setName($(e).attr("id"));
    b.setDivWrapper(e);
    b.processAttributes();
    b.init();
    b.processTabOrder();
    b.setSize(c - 2, g - 2);
    0 == b.isFeedbackComponent() && (c = new CTATComponentDescription, c.type = b.getClassName(), c.name = b.getName(), c.setComponentPointer(b), CTATShellTools.registerComponentDescription(c));
    c = h.getGrDescription();
    c.name = $(e).attr("id");
    b.setCellContainer(h);
    b.setGrDescription(c);
    $(e).data("CTATComponent", b);
    m && w != z && 0 == a ? b.setBackgroundColor(w) : b.setBackgroundColor(z);
    b.setBorderColor(t);
    $(b.component).css("text-align", "center");
    e = Math.floor(C / H);
    e > u && 0 == a && m && (e = u - 6);
    $(b.component).css("font-size", e + "px");
  }
  CTAT.Component.Base.Tutorable.call(this, "CTATTable", "__undefined__", a, b, f, e, d);
  var h = this;
  h.isTabIndexable = !1;
  var l = null, m = !1, q = function(a) {
    m = "boolean" === typeof a ? a : "string" === typeof a ? CTATGlobalFunctions.stringToBoolean(a) : !1;
  };
  this.setParameterHandler("FirstRowIsHeader", q);
  this.setParameterHandler("PasteSingleSAI", function(a) {
    CTATGlobalFunctions.stringToBoolean(a);
  });
  this.setParameterHandler("SpreadSheetMode", function(a) {
    CTATGlobalFunctions.stringToBoolean(a);
  });
  var p = 2;
  this.set_row_count = function(a) {
    p = parseInt(a);
  };
  this.setStyleHandler("data-ctat-num-rows", this.set_row_count);
  this.data_ctat_handlers["data-ctat-num-rows"] = this.set_row_count;
  var n = 2;
  this.set_col_count = function(a) {
    n = parseInt(a);
  };
  this.setStyleHandler("data-ctat-num-cols", this.set_col_count);
  this.data_ctat_handlers["data-ctat-num-cols"] = this.set_col_count;
  var x = "", u = 25;
  this.setHeaderHeight = function(a) {
    u = parseInt(a);
  };
  this.setStyleHandler("HeaderHeight", this.setHeaderHeight);
  this.setStyleHandler("inspBackgroundColor", this.setBackgroundColor);
  var w = "#FFFFFF";
  this.setHeaderBackground = function(a) {
    w = a;
  };
  this.setStyleHandler("HeaderBackground", this.setHeaderBackground);
  var z = "#FFFFFF", t = "#000000", D, C, H = 3;
  this.setFontSize = function(a) {
    a = a.toLowerCase();
    "small" == a ? H = 5 : "large" == a && (H = 2);
  };
  var E = !1;
  this.setExpandable = function(a) {
    E = "boolean" === typeof a ? a : "string" === typeof a ? CTATGlobalFunctions.stringToBoolean(a) : !1;
  };
  this.init = function() {
    h.ctatdebug("init (" + h.getName() + ")");
    x = CTATGlobalFunctions.gensym.div_id();
    l = document.createElement("table");
    l.style.width = $(h.getDivWrap()).width() - 2 + "px";
    l.style.height = $(h.getDivWrap()).height() - 2 + "px";
    l.setAttribute("id", x);
    $(l).css("table-layout", "fixed");
    l.style.zIndex = CTATGlobalFunctions.gensym.z_index();
    h.setComponent(l);
    h.ctatdebug("Final location: " + h.getX() + "," + h.getY() + " with text: " + h.getText());
    h.setInitialized(!0);
    h.addComponentReference(h, l);
    h.getDivWrap().appendChild(l);
    h.render();
    var a = h.getDivWrap();
    this.set_row_count($(a).attr("data-ctat-num-rows"));
    this.set_col_count($(a).attr("data-ctat-num-cols"));
    q($(a).attr("data-ctat-has-header"));
    var b = $(a).attr("data-ctat-header-height");
    b && this.setHeaderHeight(b);
    this.setExpandable($(a).attr("data-ctat-can-expand"));
    c();
    $(a).attr("data-ctat-font-size") && this.setFontSize($(a).attr("data-ctat-font-size"));
    $(a).attr("data-ctat-cell-color") && (z = $(a).attr("data-ctat-cell-color"));
    $(a).attr("data-ctat-border-color") && (t = $(a).attr("data-ctat-border-color"));
    $(a).attr("data-ctat-header-color") && (w = $(a).attr("data-ctat-header-color"));
    if (m) {
      h.ctatdebug("begin header creation");
      a = l.createTHead();
      a.style.height = u - 2 + "px";
      $(a).css("background-color", w);
      a = a.insertRow(0);
      a.style.height = u - 2 + "px";
      for (b = 0;b < n;b++) {
        var d = document.createElement("th");
        d.classList.add("CTAT-gen-component");
        d.style.height = u - 2 + "px";
        $(d).css("border-width", "0px");
        a.appendChild(d);
        g(0, b, D, u, d);
      }
      header_row = 1;
    } else {
      header_row = 0;
    }
    this.adjustTableContents();
  };
  this.addRow = function() {
    h.ctatdebug("addRow(), expandable = " + E);
    p++;
    if (!E) {
      c();
      var a;
      $(h.getDivWrap()).find("> table > tbody > tr").each(function() {
        a = $(this).find("> td");
        this.style.height = C - 2 + "px";
        a.each(function() {
          this.style.height = C - 2 + "px";
        });
      });
    }
    var b = $(h.getDivWrap()).find("> table > tbody")[0].insertRow();
    b.style.height = C - 2 + "px";
    for (var d = 0;d < n;d++) {
      td = b.insertCell(), td.classList.add("CTAT-gen-component"), td.style.height = C - 2 + "px", $(td).css("border-width", "0px"), g(p - 1, d, D, C, td);
    }
  };
  this.addColumn = function() {
    h.ctatdebug("addCol(), expandable = " + E);
    n++;
    var a = h.getDivWrap();
    if (E) {
      $(a).css("width", $(a).width() + D + "px");
      var b = $(a).find("table")[0];
      $(b).css("width", $(b).width() + D + "px");
    } else {
      c();
    }
    var d = 0;
    $(a).find("tr").each(function() {
      var a;
      console.log("parent node name = " + this.parentNode.tagName);
      "THEAD" === this.parentNode.tagName ? (a = document.createElement("th"), a.style.height = u - 2 + "px") : (a = document.createElement("td"), a.style.height = C - 2 + "px");
      a.classList.add("CTAT-gen-component");
      $(td).css("border-width", "0px");
      this.appendChild(a);
      g(d++, n - 1, D, C, a);
    });
  };
  this.adjustTableContents = function() {
    h.ctatdebug("adjustTableContents()");
    h.ctatdebug("has header = " + m);
    var a, b, c;
    a = l.createTBody();
    for (var d = header_row;d < p;d++) {
      b = a.insertRow();
      b.style.height = C - 2 + "px";
      for (var e = 0;e < n;e++) {
        c = b.insertCell();
        c.classList.add("CTAT-gen-component");
        c.style.height = C - 2 + "px";
        $(c).css("border-width", "0px");
        var f = h.getName() + ".R" + d + "C" + e, q = CTATShellTools.findComponent(f);
        null == q && console.log("comp null");
        null == q || 0 == q.length || q[0].getName() !== f ? g(d, e, D, C, c) : c.appendChild(q[0].getDivWrap());
      }
    }
  };
};
CTATTable.prototype = Object.create(CTAT.Component.Base.Graphical.prototype);
CTATTable.prototype.constructor = CTATTable;
CTAT.ComponentRegistry.addComponentType("CTATTable", CTATTable);
var CTATTextField = function(a, b, f, e, d) {
  CTATTextBasedComponent.call(this, "CTATTextBasedComponent", "__undefined__", a, b, f, e, d);
  this.setDefaultWidth(100);
  this.setDefaultHeight(22);
  var c = this, g = null;
  this.setAction("UpdateTextArea");
  this.ctatdebug(this.getClassName() + " (" + this.getX() + "," + this.getY() + "," + this.getWidth() + "," + this.getHeight() + ")");
  this.init = function() {
    c.ctatdebug("init (" + c.getName() + ")");
    g = this.getDivWrap();
    g.classList.add("CTAT-text");
    c.setComponent(g);
    this.getText() && (g.innerHTML = c.getText());
    c.setInitialized(!0);
    c.addComponentReference(c, g);
    c.setEditable(!1);
    c.render();
    c.addSafeEventListener("focus", c.processFocus, g);
  };
  this.setText = function(a) {
    c.ctatdebug("setText (" + a + ")");
    c.assignText(a);
    null !== g && (g.innerHTML = a);
  };
  this.setStyleHandler("ShowScrollbars", function(a) {
    !0 === CTATGlobalFunctions.toBoolean(a) ? c.modifyCSSAttribute("overflow", "scroll") : c.modifyCSSAttribute("overflow", "hidden");
  });
};
CTATTextField.prototype = Object.create(CTATTextBasedComponent.prototype);
CTATTextField.prototype.constructor = CTATTextField;
CTAT.ComponentRegistry.addComponentType("CTATTextField", CTATTextField);
var CTATTextInput = function(a, b, f, e, d) {
  CTATTextBasedComponent.call(this, "CTATTextInput", "__undefined__", a, b, f, e, d);
  this.setDefaultWidth(100);
  this.setDefaultHeight(22);
  var c = this, g = null, h = null;
  this.ctatdebug(this.getClassName() + " (" + this.getX() + "," + this.getY() + "," + this.getWidth() + "," + this.getHeight() + ")");
  this.configFromDescription();
  this.init = function() {
    this.ctatdebug("init (" + c.getName() + ")");
    g = document.createElement("input");
    g.type = "text";
    a && (g.name = a.name);
    g.setAttribute("maxlength", c.getMaxCharacters());
    g.setAttribute("id", CTATGlobalFunctions.gensym.div_id());
    g.classList.add("CTAT-text");
    c.setComponent(g);
    this.ctatdebug("Final location: " + c.getX() + "," + c.getY() + " with text: " + c.getText());
    var b = $(this.getDivWrap());
    b.attr("value") && this.setText(b.attr("value"));
    var d = $(g);
    ["autofocus", "maxLength", "readOnly"].forEach(function(a) {
      var c = b.attr(a);
      c && d.attr(a, c);
    });
    c.setInitialized(!0);
    c.addComponentReference(c, g);
    c.getDivWrap().appendChild(g);
    c.render();
    c.addSafeEventListener("keypress", c.processKeypress, g);
    c.addSafeEventListener("focus", c.processFocus, g);
    $(g).on("input", function(a) {
      c.setNotGraded();
    });
  };
  this.setCellContainer = function(a) {
    h = a;
  };
  this.getCellContainer = function() {
    return h;
  };
  this.setText = function(a) {
    c.ctatdebug("setText (" + a + ")");
    console.trace(this.getName(), "setText", a);
    c.assignText(a);
    g.value = a;
  };
  this.reset = function() {
    c.configFromDescription();
    c.processSerialization();
    g.value = "";
  };
  this.setStyleHandler("DrawBorder", function(a) {
    c.setShowBorder(a);
    c.addCSSAttribute("border-width", c.getShowBorder() ? 1 : 0);
  });
};
CTATTextInput.prototype = Object.create(CTATTextBasedComponent.prototype);
CTATTextInput.prototype.constructor = CTATTextInput;
CTAT.ComponentRegistry.addComponentType("CTATTextInput", CTATTextInput);
var CTATTools = {};
function s4() {
  return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1);
}
function guid() {
  return s4() + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + s4() + s4();
}
function htmlEscape(a) {
  return String(a).replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&#39;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
function htmlUnescape(a) {
  return String(a).replace(/&quot;/g, '"').replace(/&#39;/g, "'").replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&");
}
function tableCreate() {
  var a = document.body, b = document.createElement("table");
  b.style.width = "100%";
  b.style.border = "1px solid black";
  for (var f = 0;3 > f;f++) {
    for (var e = b.insertRow(), d = 0;2 > d && (2 != f || 1 != d);d++) {
      var c = e.insertCell();
      c.appendChild(document.createTextNode(" "));
      1 == f && 1 == d && c.setAttribute("rowSpan", "2");
    }
  }
  a.appendChild(b);
  return b;
}
;var CTATVideo = function(a, b, f, e, d) {
  CTAT.Component.Base.Tutorable.call(this, "CTATVideo", "__undefined__", a, b, f, e, d);
  var c = 0, g = this, h = null;
  this.getAlpha = function() {
    return c;
  };
  this.setAlpha = function(a) {
    c = a;
  };
  this.ctatdebug(this.getClassName() + " (" + this.getX() + "," + this.getY() + "," + this.getWidth() + "," + this.getHeight() + ")");
  this.configFromDescription();
  this.init = function() {
    g.ctatdebug("init (" + g.getName() + ")");
    g.addCSSAttribute("z-index", CTATGlobalFunctions.gensym.z_index());
    h = document.createElement("video");
    this.getDivWrap() && $(this.getDivWrap()).attr("src") ? h.src = $(this.getDivWrap()).attr("src") : h.src = "http://augustus.pslc.cs.cmu.edu/ProportionalDistanceExercise.mp4";
    this.getDivWrap() && $(g.getDivWrap()).attr("data-ctat-controls") ? h.controls = CTATGlobalFunctions.toBoolean($(this.getDivWrap()).attr("data-ctat-controls")) : h.controls = !0;
    h.autocontrols = !1;
    g.ctatdebug("Auto play: " + $(g.getDivWrap()).attr("data-ctat-autoplay"));
    this.getDivWrap() && $(g.getDivWrap()).attr("data-ctat-autoplay") ? h.autoplay = CTATGlobalFunctions.toBoolean($(this.getDivWrap()).attr("data-ctat-autoplay")) : h.autoplay = !0;
    g.ctatdebug("Auto play: " + h.autoplay);
    h.name = g.getName();
    h.setAttribute("id", CTATGlobalFunctions.gensym.div_id());
    h.setAttribute("onkeypress", "return noenter(event)");
    g.addComponentReference(g, h);
    g.ctatdebug("Final location: " + g.getX() + "," + g.getY() + " with text: " + g.getText());
    g.setInitialized(!0);
    g.getDivWrap().appendChild(h);
    g.ctatdebug("Resizing component to: " + $(g.getDivWrap()).width() + "," + $(g.getDivWrap()).height());
    h.addEventListener("focus", this.processFocus);
    h.setAttribute("width", $(g.getDivWrap()).width());
    h.setAttribute("height", $(g.getDivWrap()).height());
  };
  this.PlayMedia = function(a) {
    h.src = a;
  };
  this.showControls = function(a) {
    h.controls = a;
  };
  this.play = function(a) {
    var b = "0";
    a && (b = "number" === typeof a ? String(a) : "string" === typeof a ? a : "0");
    h.currentTime = b;
    h.play();
  };
  this.stop = this.pause = function(a) {
    h.pause();
    var b = "0";
    a && (b = "number" === typeof a ? String(a) : "string" === typeof a ? a : "0");
    h.currentTime = b;
  };
};
CTATVideo.prototype = Object.create(CTAT.Component.Base.Tutorable.prototype);
CTATVideo.prototype.constructor = CTATVideo;
CTAT.ComponentRegistry.addComponentType("CTATVideo", CTATVideo);
var CTATProblem = function() {
  CTATBase.call(this, "CTATProblem", "problem");
  var a = "", b = "", f = "tutor", e = "", d = "", c = "notstarted";
  this.setState = function(a) {
    c = a;
  };
  this.getState = function() {
    return c;
  };
  this.setLabel = function(b) {
    a = b;
  };
  this.getLabel = function() {
    return a;
  };
  this.setDescription = function(a) {
    b = a;
  };
  this.getDescription = function() {
    return b;
  };
  this.setTutorFlag = function(a) {
    f = a;
  };
  this.getTutorFlag = function() {
    return f;
  };
  this.setProblemFile = function(a) {
    e = a;
  };
  this.getProblemFile = function() {
    return e;
  };
  this.setStudentInterface = function(a) {
    d = a;
  };
  this.getStudentInterface = function() {
    return d;
  };
};
CTATProblem.prototype = Object.create(CTATBase.prototype);
CTATProblem.prototype.constructor = CTATProblem;
var CTATProblemSet = function() {
  CTATBase.call(this, "CTATProblemSet", "problemset");
};
CTATProblemSet.prototype = Object.create(CTATBase.prototype);
CTATProblemSet.prototype.constructor = CTATProblemSet;
var CTATPackage = function() {
  CTATBase.call(this, "CTATPackage", "packagemanager");
  var a = this, b = new CTATXML, f = [], e = [];
  this.init = function(d) {
    a.ctatdebug("init ()");
    if (null == d) {
      a.ctatdebug("Error: document root to be parsed is null.");
    } else {
      a.ctatdebug("Root name: " + b.getElementName(d));
      d = b.getElementChildren(d);
      for (var c = 0;c < d.length;c++) {
        var g = d[c], e = b.getElementName(g);
        a.ctatdebug("Examining element: " + b.getElementName(g));
        if ("Problems" == e) {
          a.ctatdebug("Processing Problems ...");
          for (var g = b.getElementChildren(g), l = 0;l < g.length;l++) {
            var m = g[l];
            a.ctatdebug("Problem [" + l + "] desc: " + b.getElementAttr(m, "description") + ", interface: " + b.getElementAttr(m, "student_interface") + ", brd: " + b.getElementAttr(m, "problem_file"));
            var q = new CTATProblem;
            q.setName(b.getElementAttr(m, "name"));
            q.setLabel(b.getElementAttr(m, "label"));
            q.setDescription(b.getElementAttr(m, "description"));
            q.setTutorFlag(b.getElementAttr(m, "tutor_flag"));
            q.setProblemFile(b.getElementAttr(m, "problem_file"));
            q.setStudentInterface(b.getElementAttr(m, "student_interface"));
            a.ctatdebug("Adding problem ...");
            f.push(q);
          }
        }
        "ProblemSets" == e && a.ctatdebug("Processing ProblemSets ...");
        "Assets" == e && a.ctatdebug("Processing Assets ...");
      }
    }
  };
  this.getProblems = function() {
    return f;
  };
  this.getProblemSets = function() {
    return e;
  };
};
CTATPackage.prototype = Object.create(CTATBase.prototype);
CTATPackage.prototype.constructor = CTATPackage;
var CTATSequencer = function() {
  CTATBase.call(this, "CTATSequencer", "sequencer");
  var a = this, b = new CTATPackage, f = new CTATXML, e = null, d = "sequential", c = null;
  this.setAlgorithm = function(a) {
    d = a;
  };
  this.getAlgorithm = function() {
    return d;
  };
  this.handlePackageRetrieval = function(d) {
    a.ctatdebug("handlePackageRetrieval ()");
    b.init(d);
    null != c && c();
  };
  this.processXML = function(d) {
    a.ctatdebug("parseXML ()");
    b.init(d);
    null != c && c();
  };
  this.init = function(b, d) {
    a.ctatdebug("init ()");
    c = d;
    e = new CTATCommLibrary(null, !1);
    e.retrieveXMLFile(b, f, this);
  };
  this.getFirstProblem = function() {
    a.ctatdebug("getFirstProblem ()");
    if (0 == b.getProblemSets().length) {
      return a.ctatdebug("Error: no problem sets available, trying list of problems directly ..."), b.getProblems()[0];
    }
  };
  this.getNextProblem = function(b) {
    a.ctatdebug("getNextProblem ()");
  };
};
CTATSequencer.prototype = Object.create(CTATBase.prototype);
CTATSequencer.prototype.constructor = CTATSequencer;
var CTATAssistments = {}, assistmentsTimerVar, assistmentsJSONpreface = '{ "version" : "AS.1", "action" : ';
function iframeToParent(a) {
  window.parent.postMessage(a, "https://test1.assistments.org");
}
function iframeLoaded() {
  iframeToParent(assistmentsJSONpreface + '"loaded" }');
  assistmentsTimerVar = window.setInterval("iframeHeartbeat()", 1E4);
}
function iframeHeartbeat() {
  iframeToParent(assistmentsJSONpreface + '"heartbeat"}');
}
function iframeCompleted() {
  var a = document.getElementById("MyScore").value;
  iframeToParent(assistmentsJSONpreface + '"completed", "answer" : "<b>Student worked hard on this problem.</b>","score" : ' + a + " }");
  window.clearTimeout(assistmentsTimerVar);
}
;var CTATTutor = {drawing:!1, onMobile:!1, tutorInitialized:!1};
Object.defineProperty(CTATTutor, "parser", {get:function() {
  this._parser || (CTATConfig.parserType_is_XML() ? (ctatdebug("Creating XML parser ..."), this._parser = new CTATXML) : CTATConfig.parserType_is_JSON() && (this._parser = new CTATJSON));
  return this._parser;
}});
CTATTutor.initializeHTMLComponents = function() {
  ctatdebug("initializeHTMLComponents ()");
  for (var a in CTAT.ComponentRegistry) {
    var b = CTAT.ComponentRegistry[a];
    $("." + a).each(function() {
      var a = new b;
      console.log("Attaching CTAT tutoring to " + $(this).attr("id"));
      $(this).attr("id") ? a.setName($(this).attr("id")) : (this.id = CTATGlobalFunctions.gensym.div_id(), a.setName(this.id));
      a.setDivWrapper(this);
      a.processAttributes();
      a.init();
      a.processTabOrder();
      if (0 == a.isFeedbackComponent()) {
        var e = new CTATComponentDescription;
        e.type = a.getClassName();
        e.name = a.getName();
        e.setComponentPointer(a);
        CTATShellTools.registerComponentDescription(e);
      }
      $(this).data("CTATComponent", a);
    });
  }
  CTATShellTools.listComponents();
  ctatdebug("initializeHTMLComponents () done");
};
function assignNameTranslator(a) {
  nameTranslator = a;
}
CTATTutor.drawTutor = function() {
  if (!0 !== this.drawing) {
    this.drawing = !0;
    for (var a in CTATShellTools.component_descriptions) {
      var b = CTATShellTools.component_descriptions[a].getComponentPointer();
      null !== b && b.drawComponent();
    }
    this.drawing = !1;
  }
};
CTATTutor.initialize = function() {
  var a = navigator.userAgent.toLowerCase();
  0 < a.search("iphone") ? CTATTutor.onMobile = !0 : 0 < a.search("ipod") ? CTATTutor.onMobile = !0 : 0 < a.search("android") && (CTATTutor.onMobile = !0);
  a = getSafeElementById("pageor");
  null !== a && !1 === CTATTutor.onMobile && (a.style.display = "none");
  ctatdebug("initialize ()");
  this.initializeHTMLComponents();
  var a = flashVars.getRawFlashVars(), b = !0;
  a && a.previewMode && 0 == a.previewMode && (b = !1);
  1 == b && (commShell = new CTATCommShell, commShell.init(CTATTutor));
};
CTATTutor.createInterface = function() {
  ctatdebug("createInterface (" + Object.keys(CTATShellTools.component_descriptions).length + ")");
  if (1 == ignoreInterfaceDescriptions) {
    ctatdebug("No need to process interface description messages, the interface should already be ready."), this.postProcess(), this.drawTutor();
  } else {
    if (CTATGlobals.interfaceElement) {
      ctatdebug("Re-creating interface ...");
      var a = CTATTutor.parser.getElementChildren(CTATGlobals.interfaceElement);
      CTATTutor.createStaticInterface(null, a, null);
    }
    for (var b in CTATShellTools.component_descriptions) {
      a = CTATShellTools.component_descriptions[b];
      if (!a) {
        alert("Internal error parsing component at index " + b);
        return;
      }
      if (!a.name) {
        alert("Internal error parsing component at index " + b + " (no name attribute available)");
        return;
      }
      if (-1 == a.name.indexOf("null.")) {
        if (ctatdebug("Component: " + a.name + ", type: " + a.type), "CTATCommShell" == a.type) {
          if (commShell && commShell.setName(a.name), "CTATCommShell" == a.type) {
            ctatdebug("Tutor dimensions: " + a.width + "x" + a.height);
            var f = getSafeElementById(ctatcontainer);
            null !== f ? (ctatdebug("Setting canvas dimensions from: " + f.width + "px, " + f.height + "px, to: " + a.width + "px, " + a.height + "px"), f.width = a.width, f.height = a.height, f.style.width = a.width, f.style.height = a.height, ctatdebug("Canvas dimensions now: " + f.width + "px, " + f.height + "px")) : ctatdebug("Error: tutor canvas is null, can't adjust size");
            f = getSafeElementById(ctatcontainer);
            null !== f ? (f.style.width = a.width + "px", f.style.height = a.height + "px") : ctatdebug("Error: tutor container is null, can't adjust size");
          }
        } else {
          CTAT.ComponentRegistry.hasOwnProperty(a.type) ? (ctatdebug("Creating (" + a.type + ") :" + a.name), f = new CTAT.ComponentRegistry[a.type](a, a.x, a.y, a.width, a.height), f.setName(a.name), "CTATTextInput" != a.type && "CTATTextArea" != a.type || f.setEnabled(!0), f.setTabIndex(a.tabIndex), a.setComponentPointer(f), f.initialize(), "CTATRadioButton" != a.type && "CTATCheckBox" != a.type || f.setLabelPlacement(f.getLabelPlacement()), ctatdebug(f.getDivWrap())) : ctatdebug("ERROR: Unrecognized component type " + 
          a.type + " for " + a.name);
        }
      }
    }
    this.postProcess();
    this.drawTutor();
    ctatdebug("Tutor has been intialized from BRD, recalculating canvas position and size ...");
  }
  CTATScrim.scrim ? CTATScrim.scrim.scrimDown() : ctatdebug("CRITICAL: CTATScrim.scrim is null!");
};
CTATTutor.postProcess = function() {
  ctatdebug("postProcess ()");
  for (var a in CTATShellTools.component_descriptions) {
    var b = CTATShellTools.component_descriptions[a].getComponentPointer();
    null !== b ? (b.getClassName(), "CTATScrollPaneComponent" != b.getClassName() && "CTATComponentContainerReference" != b.getClassName() && "CTATGroupingComponent" != b.getClassName() || b.postProcess()) : ctatdebug("Error: component pointer " + a + " is null");
  }
};
CTATTutor.createStaticInterface = function(a, b, f) {
  ctatdebug("createStaticInterface ()");
  var e = getSafeElementById(ctatcontainer);
  null !== a && (e = a);
  for (a = 0;a < b.length;a++) {
    var d = b[a];
    ctatdebug(this.parser.getElementName(d));
    if ("timeline" == this.parser.getElementName(d)) {
      ctatdebug("Timeline node found, obtaining visual elements ...");
      b = this.parser.getElementChildren(d);
      this.createStaticInterface(null, b, null);
      break;
    }
    if ("ctatcomponent" == this.parser.getElementName(d)) {
      var c = this.parser.getElementAttr("instance");
      f && (ctatdebug("Registering existence of CTAT component on MovieClip container: " + c), f.addComponent(c));
    }
    var g, h, l, m;
    "shape" == this.parser.getElementName(d) && (g = this.parser.getElementAttr(d, "x"), h = this.parser.getElementAttr(d, "y"), l = this.parser.getElementAttr(d, "width"), m = this.parser.getElementAttr(d, "height"), c = this.parser.getElementAttr(d, "instance"), ctatdebug("Creating shape: " + c + " at: " + g + "," + h + "," + l + "," + m), l = "data:image/png;base64, " + this.parser.getNodeTextValue(d), m = new Image, m.setAttribute("style", "position: absolute; top: " + h + "px; left:" + g + "px; z-index:" + 
    CTATGlobalFunctions.gensym.z_index() + ";"), m.setAttribute("id", c), m.setAttribute("src", l), e.appendChild(m));
    "statictext" == this.parser.getElementName(d) && (g = this.parser.getElementAttr(d, "x"), h = this.parser.getElementAttr(d, "y"), l = this.parser.getElementAttr(d, "width"), m = this.parser.getElementAttr(d, "height"), c = this.parser.getElementAttr(d, "instance"), ctatdebug("Creating static text: " + c + " at: " + g + "," + h + "," + l + "," + m), l = "data:image/png;base64, " + this.parser.getNodeTextValue(d), m = new Image, m.setAttribute("style", "position: absolute; top: " + h + "px; left:" + 
    g + "px; z-index:" + CTATGlobalFunctions.gensym.z_index() + ";"), m.setAttribute("id", c), m.setAttribute("src", l), e.appendChild(m));
    "statictext" == this.parser.getElementName(d) && (c = this.parser.getElementAttr("instance"), ctatdebug("Creating movieclip: " + c), g = this.parser.getElementAttr(d, "x"), h = this.parser.getElementAttr(d, "y"), l = this.parser.getElementAttr(d, "width"), m = this.parser.getElementAttr(d, "height"), g = new CTATMovieClip(c, g, h, l, m), h = g.wrapComponent(e), ctatdebug("Created movieclip: " + c + " at: " + g.x + "," + g.y + "," + g.width + "," + g.height), movieclips.push(g), d = this.parser.getElementChildren(d), 
    this.createStaticInterface(h, d, g));
  }
};
CTATTutor.runTutor = function(a) {
  ctatdebug("runTutor ()");
  !0 === CTATGlobals.tutorRunning ? ctatdebug("The tutor is already running") : (null == skillSet && (skillSet = new CTATSkillSet), window.onerror = function(a, f, e) {
    var d = new CTATHTMLManager;
    ctatdebug(d.htmlEncode(a) + " in " + f + ", line " + e);
  }, centerTutorContainer(), CTATTutor.initialize(), CTATGlobals.tutorRunning = !0, ctatdebug("runTutor () ... all set"));
};
CTATTutor.initTutor = function(a, b, f, e) {
  console.trace("initTutor() #aFlashVars " + (a ? a.length : null) + ", usingFlash " + e);
  ctatdebug("initTutor() #aFlashVars " + (a ? a.length : null) + ", usingFlash " + e);
  1 == CTATTutor.tutorInitialized ? console.log("Tutor already initialized, probably in author mode") : (CTATConfiguration.generateDefaultConfigurationObject(), CTATConfiguration.setParams(a), null == e && (e = CTATConfiguration.getSingleParameterValues(["student_interface", "swf_name"]).some(function(a) {
    return 0 <= a.search(/[.]swf$/i);
  })), e && CTATScrim.scrim.scrimDown(), CTATCommLibrary.setAuthenticityToken(CTATConfiguration.get("authenticity_token")), b && (ctatcontainer = b), (a = document.getElementById(ctatcontainer)) && a.classList.add("CTATTutorContainer"), a = getSafeElementById("debugtraces"), null !== a && (useDebugging = !0 === a.checked ? !0 : !1), a = CTATConfiguration.getRawFlashVars(), ctatdebug("initTutor() tempFlashVars[swf_name] " + a.swf_name + ", window.sendToTutor " + window.sendToTutor), a.swf_name && 
  !window.sendToTutor && (window.sendToTutor = function(a) {
    ctatdebug("window.sendToTutor(" + a + ") CTAT.ToolTutor.tutor " + CTAT.ToolTutor.tutor);
    return CTAT.ToolTutor.tutor ? CTAT.ToolTutor.tutor.receiveFromInterface(a) : CTAT.ToolTutor.tutorMessages.push(a);
  }, window.registerInterface = function(a) {
    console.log("window.registerInterface(" + a + ") CTAT.ToolTutor.tutor " + CTAT.ToolTutor.tutor);
    CTAT.ToolTutor.registerInterfaceMessageHandler(a);
  }), "javascript" == String(a.tutoring_service_communication).toLowerCase() && ("undefined" != typeof CTATExampleTracer && CTATExampleTracer ? CTAT.ToolTutor.registerTutor(new CTATExampleTracer) : CTATScrim.scrim.warningScrimUp('Tutoring service communication parameter is "JavaScript" but class\nCTATExampleTracer is missing. Use a different ctat-*.js script.')), ctatdebug("initTutor ()"), "applet" == a.tutoring_service_communication && deployJava.runApplet({id:"TSApplet", width:150, height:10}, 
  {jnlp_href:"/ctat_applet/TSApplet.jnlp"}, "1.6"), e || CTATTutor.runTutor(a), CTATTutor.tutorInitialized = !0);
};
window.hasOwnProperty("initTutor") || (window.initTutor = CTATTutor.initTutor);
function receiveFromTutor() {
  ctatdebug("receiveFromTutor ()");
}
function saveAndQuit() {
  ctatdebug("saveAndQuit ()");
}
function prepTutorArea() {
  console.log("prepTutorArea ()");
  initTutor();
}
window.prepTutorArea = prepTutorArea;
function assignAnonymousGradingProcessor(a) {
  commShell.assignAnonymousGradingProcessor(a);
}
function gradeAnonymousComponent(a, b, f) {
  ctatdebug("gradeAnonymousComponent ()");
  a = new CTATSAI(a, b, f);
  commShell.processComponentAction(a);
}
function testTutor(a) {
  ctatdebug("testTutor ()");
  window.onerror = function(a, f, e) {
    var d = new CTATHTMLManager;
    ctatdebug(d.htmlEncode(a) + " in " + f + ", line " + e);
  };
  null == skillSet && (skillSet = new CTATSkillSet);
  (new CTATCommLibrary).send("http://augustus.pslc.cs.cmu.edu/crossdomain.xml");
}
function centerTutorContainer() {
  ctatdebug("centerTutorContainer ()");
  var a = getSafeElementById(ctatcontainer);
  if (null == a) {
    ctatdebug("Tutor container not found, bump");
  } else {
    var b;
    if (flashVars) {
      b = flashVars.getRawFlashVars();
      var f, e;
      f = a.offsetWidth;
      e = a.offsetHeight;
      b && b.width && b.height && (ctatdebug("We have raw width and height variables in our flashvars: " + b.width + "," + b.height), f = b.width, e = b.height);
      b.centerTutor ? 1 == b.centerTutor && (ctatdebug("Moving tutor over by: " + ("-" + Number(f / 2) + "px 0 0 -" + Number(e / 2) + "px;")), a.style.position = "absolute", a.style.top = "0", a.style.left = "0", a.style.right = "0", a.style.bottom = "0", a.style.margin = "auto") : ctatdebug("The tutor is not configured to center the container, bump");
    } else {
      ctatdebug("No flashvars yet, bump");
    }
  }
}
function checkTutorCanvas() {
  ctatdebug("checkTutorCanvas ()");
  var a = getSafeElementById(ctatcontainer), b = getSafeElementById("main-canvas"), f = flashVars.getRawFlashVars(), e = "550", d = "450";
  a && (ctatdebug("Recording the actual CSS width and height: " + a.offsetWidth + " , " + a.offsetHeight), e = a.offsetWidth, d = a.offsetHeight);
  f && f.width && f.height && (ctatdebug("We have tutor size flashvars, using those instead: " + f.width + " , " + f.height), e = f.width, d = f.height);
  null === b ? (ctatdebug("No canvas available, creating ..."), b = document.createElement("canvas"), b.id = "main-canvas", b.innerHTML = "Your browser does not support CTAT. Please update or use another browser.", ctatdebug("Setting canvas to: 0,0," + e + " , " + d), getSafeElementById(ctatcontainer).appendChild(b)) : (ctatdebug("Setting canvas to: 0 , 0, " + e + " , " + d), b.style.top = "0", b.style.left = "0");
  b.style.width = e + "px";
  b.style.height = d + "px";
  return b;
}
;function init() {
  console.log("IncludeTutor.init()");
  CTATConfig.external = "none";
  CTATConfig.parserType = "xml";
  commMessageHandler = new CTATMessageHandler;
  CTAT.ToolTutor.registerInterface(commMessageHandler);
  initTutor();
}
;Number.EPSILON || (Number.EPSILON = 2.220446049250313E-16);
Number.MAX_SAFE_INTEGER || (Number.MAX_SAFE_INTEGER = 9007199254740991);
Number.MIN_SAFE_INTEGER || (Number.MIN_SAFE_INTEGER = -9007199254740991);
Number.isFinite || (Number.isFinite = function(a) {
  return "number" !== typeof a || a !== a || Infinity === a || -Infinity === a ? !1 : !0;
});
Number.isInteger || (Number.isInteger = function(a) {
  return "number" === typeof a && isFinite(a) && -9007199254740992 < a && 9007199254740992 > a && Math.floor(a) === a;
});
Math.cbrt || (Math.cbrt = function(a) {
  var b = Math.pow(Math.abs(a), 1 / 3);
  return 0 > a ? -b : b;
});
Math.clz32 || (Math.clz32 = function(a) {
  return (a = Number(a) >>> 0) ? 32 - a.toString(2).length : 32;
});
Math.expm1 || (Math.expm1 = function(a) {
  return Math.exp(a) - 1;
});
Math.fround || (Math.fround = function(a) {
  var b = new Float32Array(1);
  return b[0] = a, b[0];
});
Math.hypot || (Math.hypot = function() {
  for (var a = 0, b = arguments.length, f = 0;f < b;f++) {
    if (Infinity === arguments[f] || -Infinity === arguments[f]) {
      return Infinity;
    }
    a += arguments[f] * arguments[f];
  }
  return Math.sqrt(a);
});
Math.imul || (Math.imul = function(a, b) {
  var f = a & 65535, e = b & 65535;
  return f * e + ((a >>> 16 & 65535) * e + f * (b >>> 16 & 65535) << 16 >>> 0) | 0;
});
Math.log10 || (Math.log10 = function(a) {
  return Math.log(a) / Math.LN10;
});
Math.log1p || (Math.log1p = function(a) {
  return Math.log(1 + a);
});
Math.log2 || (Math.log2 = function(a) {
  return Math.log(a) / Math.LN2;
});
Math.sign || (Math.sign = function(a) {
  return isNaN(a) ? NaN : 0 === a ? a : 0 < a ? 1 : -1;
});
Math.trunc || (Math.trunc = function(a) {
  return 0 > a ? Math.ceil(a) : Math.floor(a);
});
Math.sinh || (Math.sinh = function(a) {
  a = Math.exp(a);
  return (a - 1 / a) / 2;
});
Math.cosh || (Math.cosh = function(a) {
  a = Math.exp(a);
  return (a + 1 / a) / 2;
});
Math.tanh || (Math.tanh = function(a) {
  if (Infinity === a) {
    return 1;
  }
  if (-Infinity === a) {
    return -1;
  }
  a = Math.exp(2 * a);
  return (a - 1) / (a + 1);
});
Math.asinh || (Math.asinh = function(a) {
  return -Infinity === a ? a : Math.log(a + Math.sqrt(a * a + 1));
});
Math.acosh || (Math.acosh = function(a) {
  return a + Math.sqrt(a * a - 1);
});
Math.atanh || (Math.atanh = function(a) {
  return Math.log((1 + a) / (1 - a)) / 2;
});
Array.prototype.indexOf || (Array.prototype.indexOf = function(a, b) {
  var f;
  if (null == this) {
    throw new TypeError('"this" is null or not defined');
  }
  var e = Object(this), d = e.length >>> 0;
  if (0 === d) {
    return -1;
  }
  f = +b || 0;
  Infinity === Math.abs(f) && (f = 0);
  if (f >= d) {
    return -1;
  }
  for (f = Math.max(0 <= f ? f : d - Math.abs(f), 0);f < d;) {
    if (f in e && e[f] === a) {
      return f;
    }
    f++;
  }
  return -1;
});
Array.prototype.lastIndexOf || (Array.prototype.lastIndexOf = function(a) {
  if (void 0 === this || null === this) {
    throw new TypeError;
  }
  var b, f = Object(this), e = f.length >>> 0;
  if (0 === e) {
    return -1;
  }
  b = e - 1;
  1 < arguments.length && (b = Number(arguments[1]), b != b ? b = 0 : 0 != b && b != 1 / 0 && b != -(1 / 0) && (b = (0 < b || -1) * Math.floor(Math.abs(b))));
  for (b = 0 <= b ? Math.min(b, e - 1) : e - Math.abs(b);0 <= b;b--) {
    if (b in f && f[b] === a) {
      return b;
    }
  }
  return -1;
});
Array.prototype.every || (Array.prototype.every = function(a, b) {
  var f, e;
  if (null == this) {
    throw new TypeError("this is null or not defined");
  }
  var d = Object(this), c = d.length >>> 0;
  if ("function" !== typeof a) {
    throw new TypeError;
  }
  1 < arguments.length && (f = b);
  for (e = 0;e < c;) {
    var g;
    if (e in d && (g = d[e], !a.call(f, g, e, d))) {
      return !1;
    }
    e++;
  }
  return !0;
});
Array.prototype.some || (Array.prototype.some = function(a) {
  if (void 0 === this || null === this) {
    throw new TypeError;
  }
  var b = Object(this), f = b.length >>> 0;
  if ("function" !== typeof a) {
    throw new TypeError;
  }
  for (var e = 2 <= arguments.length ? arguments[1] : void 0, d = 0;d < f;d++) {
    if (d in b && a.call(e, b[d], d, b)) {
      return !0;
    }
  }
  return !1;
});
Array.prototype.filter || (Array.prototype.filter = function(a) {
  if (void 0 === this || null === this) {
    throw new TypeError;
  }
  var b = Object(this), f = b.length >>> 0;
  if ("function" !== typeof a) {
    throw new TypeError;
  }
  for (var e = [], d = 2 <= arguments.length ? arguments[1] : void 0, c = 0;c < f;c++) {
    if (c in b) {
      var g = b[c];
      a.call(d, g, c, b) && e.push(g);
    }
  }
  return e;
});
Array.prototype.forEach || (Array.prototype.forEach = function(a, b) {
  var f, e;
  if (null == this) {
    throw new TypeError(" this is null or not defined");
  }
  var d = Object(this), c = d.length >>> 0;
  if ("function" !== typeof a) {
    throw new TypeError(a + " is not a function");
  }
  1 < arguments.length && (f = b);
  for (e = 0;e < c;) {
    var g;
    e in d && (g = d[e], a.call(f, g, e, d));
    e++;
  }
});
Array.prototype.map || (Array.prototype.map = function(a, b) {
  var f, e, d;
  if (null == this) {
    throw new TypeError(" this is null or not defined");
  }
  var c = Object(this), g = c.length >>> 0;
  if ("function" !== typeof a) {
    throw new TypeError(a + " is not a function");
  }
  1 < arguments.length && (f = b);
  e = Array(g);
  for (d = 0;d < g;) {
    var h;
    d in c && (h = c[d], h = a.call(f, h, d, c), e[d] = h);
    d++;
  }
  return e;
});
Array.prototype.reduce || (Array.prototype.reduce = function(a) {
  if (null === this || "undefined" === typeof this) {
    throw new TypeError("Array.prototype.reduce called on null or undefined");
  }
  if ("function" !== typeof a) {
    throw new TypeError(a + " is not a function");
  }
  var b = Object(this), f = b.length >>> 0, e = 0, d;
  if (2 <= arguments.length) {
    d = arguments[1];
  } else {
    for (;e < f && !e in b;) {
      e++;
    }
    if (e >= f) {
      throw new TypeError("Reduce of empty array with no initial value");
    }
    d = b[e++];
  }
  for (;e < f;e++) {
    e in b && (d = a(d, b[e], e, b));
  }
  return d;
});
Array.prototype.reduceRight || (Array.prototype.reduceRight = function(a) {
  if (null === this || "undefined" === typeof this) {
    throw new TypeError("Array.prototype.reduce called on null or undefined");
  }
  if ("function" !== typeof a) {
    throw new TypeError(a + " is not a function");
  }
  var b = Object(this), f = (b.length >>> 0) - 1, e;
  if (2 <= arguments.length) {
    e = arguments[1];
  } else {
    for (;0 <= f && !f in b;) {
      f--;
    }
    if (0 > f) {
      throw new TypeError("Reduce of empty array with no initial value");
    }
    e = b[f--];
  }
  for (;0 <= f;f--) {
    f in b && (e = a(e, b[f], f, b));
  }
  return e;
});
Array.from || (Array.from = function() {
  var a = Object.prototype.toString, b = function(b) {
    return "function" === typeof b || "[object Function]" === a.call(b);
  }, f = Math.pow(2, 53) - 1;
  return function(a) {
    var d = Object(a);
    if (null == a) {
      throw new TypeError("Array.from requires an array-like object - not null or undefined");
    }
    var c, g;
    if (1 < arguments.length) {
      c = arguments[1];
      if (!b(c)) {
        throw new TypeError("Array.from: when provided, the second argument must be a function");
      }
      2 < arguments.length && (g = arguments[2]);
    }
    var h;
    h = Number(d.length);
    h = isNaN(h) ? 0 : 0 !== h && isFinite(h) ? (0 < h ? 1 : -1) * Math.floor(Math.abs(h)) : h;
    h = Math.min(Math.max(h, 0), f);
    for (var l = b(this) ? Object(new this(h)) : Array(h), m = 0, q;m < h;) {
      q = d[m], l[m] = c ? "undefined" === typeof g ? c(q, m) : c.call(g, q, m) : q, m += 1;
    }
    l.length = h;
    return l;
  };
}());
Array.of || (Array.of = function() {
  return Array.prototype.slice.call(arguments);
});
Array.prototype.copyWithin || (Array.prototype.copyWithin = function(a, b, f) {
  if (null == this) {
    throw new TypeError("this is null or not defined");
  }
  var e = Object(this), d = e.length >>> 0;
  a >>= 0;
  a = 0 > a ? Math.max(d + a, 0) : Math.min(a, d);
  b >>= 0;
  b = 0 > b ? Math.max(d + b, 0) : Math.min(b, d);
  f = void 0 === f ? d : f >> 0;
  d = Math.min((0 > f ? Math.max(d + f, 0) : Math.min(f, d)) - b, d - a);
  f = 1;
  b < a && a < b + d && (f = -1, b += d - 1, a += d - 1);
  for (;0 < d;) {
    b in e ? e[a] = e[b] : delete e[a], b += f, a += f, d--;
  }
  return e;
});
Array.prototype.fill || (Array.prototype.fill = function(a, b, f) {
  if (null == this) {
    throw new TypeError("this is null or not defined");
  }
  var e = Object(this), d = e.length >>> 0;
  b >>= 0;
  b = 0 > b ? Math.max(d + b, 0) : Math.min(b, d);
  f = void 0 === f ? d : f >> 0;
  for (d = 0 > f ? Math.max(d + f, 0) : Math.min(f, d);b < d;) {
    e[b] = a, b++;
  }
  return e;
});
Array.prototype.find || (Array.prototype.find = function(a, b) {
  if (null == this) {
    throw new TypeError("Array.prototype.find called on null or undefined");
  }
  if ("function" !== typeof a) {
    throw new TypeError("predicate must be a function");
  }
  for (var f = Object(this), e = f.length >>> 0, d, c = 0;c < e;c++) {
    if (c in f && (d = f[c], a.call(b, d, c, f))) {
      return d;
    }
  }
});
Array.prototype.findIndex || (Array.prototype.findIndex = function(a, b) {
  if (null == this) {
    throw new TypeError("Array.prototype.find called on null or undefined");
  }
  if ("function" !== typeof a) {
    throw new TypeError("predicate must be a function");
  }
  for (var f = Object(this), e = f.length >>> 0, d, c = 0;c < e;c++) {
    if (c in f && (d = f[c], a.call(b, d, c, f))) {
      return c;
    }
  }
  return -1;
});
Array.prototype.includes || (Array.prototype.includes = function(a, b) {
  var f = Object(this), e = parseInt(f.length) || 0;
  if (0 === e) {
    return !1;
  }
  var d = parseInt(b) || 0;
  0 <= d || (d = e + d, 0 > d && (d = 0));
  for (var c;d < e;) {
    c = f[d];
    if (a === c || a !== a && c !== c) {
      return !0;
    }
    d++;
  }
  return !1;
});
Date.prototype.toISOString || function() {
  function a(a) {
    a = String(a);
    1 === a.length && (a = "0" + a);
    return a;
  }
  Date.prototype.toISOString = function() {
    return this.getUTCFullYear() + "-" + a(this.getUTCMonth() + 1) + "-" + a(this.getUTCDate()) + "T" + a(this.getUTCHours()) + ":" + a(this.getUTCMinutes()) + ":" + a(this.getUTCSeconds()) + "." + String((this.getUTCMilliseconds() / 1E3).toFixed(3)).slice(2, 5) + "Z";
  };
}();
String.prototype.startsWith || (String.prototype.startsWith = function(a, b) {
  b = b || 0;
  return this.lastIndexOf(a, b) === b;
});
String.prototype.endsWith || (String.prototype.endsWith = function(a, b) {
  var f = this.toString();
  if (void 0 === b || b > f.length) {
    b = f.length;
  }
  b -= a.length;
  f = f.indexOf(a, b);
  return -1 !== f && f === b;
});
String.prototype.includes || (String.prototype.includes = function() {
  return -1 !== String.prototype.indexOf.apply(this, arguments);
});
String.fromCodePoint || function() {
  var a = function() {
    try {
      var a = {}, b = Object.defineProperty, g = b(a, a, a) && b;
    } catch (e) {
    }
    return g;
  }(), b = String.fromCharCode, f = Math.floor, e = function() {
    var a = [], c, g, e = -1, l = arguments.length;
    if (!l) {
      return "";
    }
    for (var m = "";++e < l;) {
      g = Number(arguments[e]);
      if (!isFinite(g) || 0 > g || 1114111 < g || f(g) != g) {
        throw RangeError("Invalid code point: " + g);
      }
      65535 >= g ? a.push(g) : (g -= 65536, c = (g >> 10) + 55296, g = g % 1024 + 56320, a.push(c, g));
      if (e + 1 == l || 16384 < a.length) {
        m += b.apply(null, a), a.length = 0;
      }
    }
    return m;
  };
  a ? a(String, "fromCodePoint", {value:e, configurable:!0, writable:!0}) : String.fromCodePoint = e;
}();
String.prototype.codePointAt || function() {
  var a = function(a) {
    if (null == this) {
      throw TypeError();
    }
    var f = String(this), e = f.length, d = a ? Number(a) : 0;
    d != d && (d = 0);
    if (!(0 > d || d >= e)) {
      return a = f.charCodeAt(d), 55296 <= a && 56319 >= a && e > d + 1 && (f = f.charCodeAt(d + 1), 56320 <= f && 57343 >= f) ? 1024 * (a - 55296) + f - 56320 + 65536 : a;
    }
  };
  Object.defineProperty ? Object.defineProperty(String.prototype, "codePointAt", {value:a, configurable:!0, writable:!0}) : String.prototype.codePointAt = a;
}();
String.prototype.repeat || (String.prototype.repeat = function(a) {
  if (null == this) {
    throw new TypeError("can't convert " + this + " to object");
  }
  var b = "" + this;
  a = +a;
  a != a && (a = 0);
  if (0 > a) {
    throw new RangeError("repeat count must be non-negative");
  }
  if (Infinity == a) {
    throw new RangeError("repeat count must be less than infinity");
  }
  a = Math.floor(a);
  if (0 == b.length || 0 == a) {
    return "";
  }
  if (268435456 <= b.length * a) {
    throw new RangeError("repeat count must not overflow maximum string size");
  }
  for (var f = "";;) {
    1 == (a & 1) && (f += b);
    a >>>= 1;
    if (0 == a) {
      break;
    }
    b += b;
  }
  return f;
});
"undefined" === typeof Iterator && (Iterator = function(a) {
  if (!(this instanceof arguments.callee)) {
    return new arguments.callee(a);
  }
  var b = 0, f = [];
  if (a && "object" === typeof a) {
    if (Array.isArray(a)) {
      for (;f.length < a.length;) {
        f.push(a[f.length]);
      }
    } else {
      for (var e in a) {
        a.hasOwnProperty(e) && f.push(e);
      }
    }
    this.next = function() {
      return b < f.length ? {value:f[b++], done:!1} : {value:void 0, done:!0};
    };
  }
}, Iterator.prototype = Object.create(Object.prototype), Iterator.prototype.constructor = Iterator);
"undefined" === typeof Map || Map.prototype.keys || (Map.prototype.keys = function() {
  var a = [];
  this.forEach(function(b, f) {
    a.push(f);
  });
  return new Iterator(a);
});
"undefined" === typeof Map || Map.prototype.values || (Map.prototype.values = function() {
  var a = [];
  this.forEach(function(b, f) {
    a.push(b);
  });
  return new Iterator(a);
});
"undefined" === typeof Map || Map.prototype.entries || (Map.prototype.entries = function() {
  var a = [];
  this.forEach(function(b, f) {
    a.push([f, b]);
  });
  return new Iterator(a);
});
"undefined" === typeof Set || Set.prototype.keys || (Set.prototype.keys = function() {
  var a = [];
  this.forEach(function(b) {
    a.push(b);
  });
  return new Iterator(a);
});
"undefined" === typeof Set || Set.prototype.values || (Set.prototype.values = function() {
  var a = [];
  this.forEach(function(b) {
    a.push(b);
  });
  return new Iterator(a);
});
"undefined" === typeof Set || Set.prototype.entries || (Set.prototype.entries = function() {
  var a = [];
  this.forEach(function(b) {
    a.push([b, b]);
  });
  return new Iterator(a);
});
(function(a) {
  function b() {
    var a = arguments[0], c = b.cache;
    c[a] && c.hasOwnProperty(a) || (c[a] = b.parse(a));
    return b.format.call(null, c[a], arguments);
  }
  function f(a) {
    return Object.prototype.toString.call(a).slice(8, -1).toLowerCase();
  }
  var e = /[^s]/, d = /[def]/, c = /^[^\x25]+/, g = /^\x25{2}/, h = /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/, l = /^([a-z_][a-z_\d]*)/i, m = /^\.([a-z_][a-z_\d]*)/i, q = /^\[(\d+)\]/, p = /^[\+\-]/;
  b.format = function(a, c) {
    var g = 1, h = a.length, l, m = [], n, q, E, A, y = !0, r = "";
    for (n = 0;n < h;n++) {
      if (l = f(a[n]), "string" === l) {
        m[m.length] = a[n];
      } else {
        if ("array" === l) {
          E = a[n];
          if (E[2]) {
            for (l = c[g], q = 0;q < E[2].length;q++) {
              if (!l.hasOwnProperty(E[2][q])) {
                throw Error(b("[sprintf] property '%s' does not exist", E[2][q]));
              }
              l = l[E[2][q]];
            }
          } else {
            l = E[1] ? c[E[1]] : c[g++];
          }
          "function" == f(l) && (l = l());
          if (e.test(E[8]) && "number" != f(l) && isNaN(l)) {
            throw new TypeError(b("[sprintf] expecting number but found %s", f(l)));
          }
          d.test(E[8]) && (y = 0 <= l);
          switch(E[8]) {
            case "b":
              l = l.toString(2);
              break;
            case "c":
              l = String.fromCharCode(l);
              break;
            case "d":
              l = parseInt(l, 10);
              break;
            case "e":
              l = E[7] ? l.toExponential(E[7]) : l.toExponential();
              break;
            case "f":
              l = E[7] ? parseFloat(l).toFixed(E[7]) : parseFloat(l);
              break;
            case "o":
              l = l.toString(8);
              break;
            case "s":
              l = (l = String(l)) && E[7] ? l.substring(0, E[7]) : l;
              break;
            case "u":
              l >>>= 0;
              break;
            case "x":
              l = l.toString(16);
              break;
            case "X":
              l = l.toString(16).toUpperCase();
          }
          if (!y || d.test(E[8]) && E[3]) {
            r = y ? "+" : "-", l = l.toString().replace(p, "");
          }
          q = E[4] ? "0" == E[4] ? "0" : E[4].charAt(1) : " ";
          A = E[6] - (r + l).length;
          A = E[6] ? Array(A + 1).join(q) : "";
          m[m.length] = E[5] ? r + l + A : 0 == q ? r + A + l : A + r + l;
        }
      }
    }
    return m.join("");
  };
  b.cache = {};
  b.parse = function(a) {
    for (var b, d = [], e = 0;a;) {
      if (null !== (b = c.exec(a))) {
        d[d.length] = b[0];
      } else {
        if (null !== (b = g.exec(a))) {
          d[d.length] = "%";
        } else {
          if (null !== (b = h.exec(a))) {
            if (b[2]) {
              var e = e | 1, f = [], n = b[2], p;
              if (null !== (p = l.exec(n))) {
                for (f[f.length] = p[1];"" !== (n = n.substring(p[0].length));) {
                  if (null !== (p = m.exec(n))) {
                    f[f.length] = p[1];
                  } else {
                    if (null !== (p = q.exec(n))) {
                      f[f.length] = p[1];
                    } else {
                      throw new SyntaxError("[sprintf] failed to parse named argument key");
                    }
                  }
                }
              } else {
                throw new SyntaxError("[sprintf] failed to parse named argument key");
              }
              b[2] = f;
            } else {
              e |= 2;
            }
            if (3 === e) {
              throw Error("[sprintf] mixing positional and named placeholders is not (yet) supported");
            }
            d[d.length] = b;
          } else {
            throw new SyntaxError("[sprintf] unexpected placeholder");
          }
        }
      }
      a = a.substring(b[0].length);
    }
    return d;
  };
  var n = function(a, c, d) {
    d = (c || []).slice(0);
    d.splice(0, 0, a);
    return b.apply(null, d);
  };
  "undefined" !== typeof exports ? (exports.sprintf = b, exports.vsprintf = n) : (a.sprintf = b, a.vsprintf = n, "function" === typeof define && define.amd && define(function() {
    return {sprintf:b, vsprintf:n};
  }));
})("undefined" === typeof window ? this : window);
var CTATHintPolicyEnum = function() {
};
Object.defineProperty(CTATHintPolicyEnum, "HINTS_UNBIASED", {enumerable:!0, configurable:!1, writable:!1, value:"Always Follow Best Path"});
Object.defineProperty(CTATHintPolicyEnum, "HINTS_BIASED_BY_CURRENT_SELECTION_ONLY", {enumerable:!0, configurable:!1, writable:!1, value:"Bias Hints by Current Selection Only"});
Object.defineProperty(CTATHintPolicyEnum, "HINTS_BIASED_BY_PRIOR_ERROR_ONLY", {enumerable:!0, configurable:!1, writable:!1, value:"Bias Hints by Prior Error Only"});
Object.defineProperty(CTATHintPolicyEnum, "HINTS_BIASED_BY_ALL", {enumerable:!0, configurable:!1, writable:!1, value:"Use Both Kinds of Bias"});
Object.defineProperty(CTATHintPolicyEnum, "DEFAULT", {enumerable:!0, configurable:!1, writable:!1, value:CTATHintPolicyEnum.HINTS_BIASED_BY_ALL});
CTATHintPolicyEnum.prototype = Object.create(Object.prototype);
CTATHintPolicyEnum.prototype.constructor = CTATHintPolicyEnum;
CTATHintPolicyEnum.lookup = function(a) {
  for (policy in CTATHintPolicyEnum) {
    if (CTATHintPolicyEnum[policy] == a) {
      return CTATHintPolicyEnum[policy];
    }
  }
  return CTATHintPolicyEnum.DEFAULT;
};
"undefined" !== typeof module && (module.exports = CTATHintPolicyEnum);
var CTATMsgType = function() {
  CTATBase.call(this, "CTATMsgType", "");
};
CTATMsgType.findProperty = function(a, b) {
  var f = a.toLowerCase(), e = "<" + b.toLowerCase() + ">", d = f.indexOf(e) + e.length, f = f.indexOf("</" + b.toLowerCase() + ">");
  if (d < e.length || 0 > f) {
    return null;
  }
  e = {};
  e.start = d;
  e.end = f;
  return e;
};
CTATMsgType.makeValues = function(a) {
  if (null == a) {
    return "";
  }
  if ("string" == typeof a) {
    return a;
  }
  if (a.constructor && "Array" == a.constructor.name) {
    if (!a.length) {
      return "";
    }
    for (var b = 0, f, e = "<value>" + (null == (f = a[b++]) ? "" : f.toString());b < a.length;) {
      e += "</value><value>" + (null == (f = a[b++]) ? "" : f.toString());
    }
    return e + "</value>";
  }
  return a.outerHTML ? a.outerHTML : a.toString();
};
CTATMsgType.setProperty = function(a, b, f) {
  var e = CTATMsgType.findProperty(a, b), d;
  e ? (d = a.slice(0, e.start), d += CTATMsgType.makeValues(f), d += a.slice(e.end, a.length)) : (e = a.indexOf("</properties>"), d = a.slice(0, e), d += "<" + b + ">" + CTATMsgType.makeValues(f) + "</" + b + ">", d += a.slice(e, a.length));
  return d;
};
CTATMsgType.getProperty = function(a, b) {
  var f = CTATMsgType.findProperty(a, b);
  return f ? a.slice(f.start, f.end) : "";
};
CTATMsgType.valueToArray = function(a) {
  if (!a.startsWith("<value>")) {
    return null;
  }
  var b = a.substring(7);
  if (!a.endsWith("</value>")) {
    return null;
  }
  b = b.substring(0, b.length - 8);
  b = b.split("</value><value>");
  ctatdebug("valueToArray(" + a + ") returns " + b);
  return b;
};
CTATMsgType.getValue = function(a, b) {
  var f = CTATMsgType.valueToArray(a);
  return !f || f.length <= b ? null : f[b];
};
CTATMsgType.getMessageType = function(a) {
  return CTATMsgType.getProperty(a, "MessageType");
};
CTATMsgType.getTransactionID = function(a) {
  return CTATMsgType.getProperty(a, CTATMessage.TRANSACTION_ID_TAG);
};
CTATMsgType.setTransactionID = function(a, b) {
  return CTATMsgType.setProperty(a, CTATMessage.TRANSACTION_ID_TAG, b);
};
CTATMsgType.isCorrectOrIncorrect = function(a) {
  return "string" == typeof a ? CTATMsgType.CorrectTypes[a.toLowerCase()] ? !0 : !1 : !1;
};
CTATMsgType.hasTextFeedback = function(a) {
  return "string" == typeof a ? CTATMsgType.TextFeedbackTypes[a.toLowerCase()] ? !0 : !1 : !1;
};
CTATMsgType.isHintResponse = function(a) {
  return "string" == typeof a ? CTATMsgType.HintResponseTypes[a.toLowerCase()] ? !0 : !1 : !1;
};
CTATMsgType.isDoneMessage = function(a) {
  var b = CTATMsgType.getProperty(a, "Selection");
  a = CTATMsgType.getProperty(a, "Action");
  if (!b || !a) {
    return !1;
  }
  b = b.toString().toLowerCase();
  a = a.toString().toLowerCase();
  var f = CTATMsgType.DONE.toLowerCase();
  if (f != b && f != CTATMsgType.getValue(b, 0)) {
    return !1;
  }
  b = CTATMsgType.BUTTON_PRESSED.toLowerCase();
  return b != a && b != CTATMsgType.getValue(a, 0) ? !1 : !0;
};
CTATMsgType.getSAIArraysFromElement = function(a, b) {
  for (var f = {selection:[], action:[], input:[]}, e = b.getElementChildren(a), d = 0;d < e.length;d++) {
    var c = e[d];
    switch(b.getElementName(c)) {
      case "Selection":
        for (var c = b.getElementChildren(c), g = 0;g < c.length;g++) {
          f.selection.push(b.getNodeTextValue(c[g]));
        }
        break;
      case "Action":
        c = b.getElementChildren(c);
        for (g = 0;g < c.length;g++) {
          f.action.push(b.getNodeTextValue(c[g]));
        }
        break;
      case "Input":
        c = b.getElementChildren(c);
        for (g = 0;g < c.length;g++) {
          f.input.push(b.getNodeTextValue(c[g]));
        }
        break;
      case "properties":
        return CTATMsgType.getSAIArraysFromElement(c, b);
    }
  }
  return f;
};
Object.defineProperty(CTATMsgType, "CorrectTypes", {enumerable:!1, configurable:!1, writable:!1, value:{correctaction:1, incorrectaction:1, lispcheckaction:1}});
Object.defineProperty(CTATMsgType, "TextFeedbackTypes", {enumerable:!1, configurable:!1, writable:!1, value:{showhintsmessage:1, successmessage:1, buggymessage:1, wrongusermessage:1, nohintmessage:1, highlightmsg:1, showhintsmessagefromlisp:1}});
Object.defineProperty(CTATMsgType, "HintResponseTypes", {enumerable:!1, configurable:!1, writable:!1, value:{showhintsmessage:1, nohintmessage:1, showhintsmessagefromlisp:1}});
Object.defineProperty(CTATMsgType, "BUGGY_MSG", {enumerable:!1, configurable:!1, writable:!1, value:"BuggyMsg"});
Object.defineProperty(CTATMsgType, "DONE", {enumerable:!1, configurable:!1, writable:!1, value:"Done"});
Object.defineProperty(CTATMsgType, "BUTTON_PRESSED", {enumerable:!1, configurable:!1, writable:!1, value:"ButtonPressed"});
Object.defineProperty(CTATMsgType, "DEFAULT_STUDENT_ACTOR", {enumerable:!1, configurable:!1, writable:!1, value:"Student"});
Object.defineProperty(CTATMsgType, "DEFAULT_TOOL_ACTOR", {enumerable:!1, configurable:!1, writable:!1, value:"Tutor"});
Object.defineProperty(CTATMsgType, "UNGRADED_TOOL_ACTOR", {enumerable:!1, configurable:!1, writable:!1, value:"Tutor (unevaluated)"});
Object.defineProperty(CTATMsgType, "DEFAULT_ACTOR", {enumerable:!1, configurable:!1, writable:!1, value:CTATMsgType.DEFAULT_STUDENT_ACTOR});
Object.defineProperty(CTATMsgType, "ANY_ACTOR", {enumerable:!1, configurable:!1, writable:!1, value:"Any"});
Object.defineProperty(CTATMsgType, "SHOW_ALL_FEEDBACK", {enumerable:!1, configurable:!1, writable:!1, value:"Show All Feedback"});
Object.defineProperty(CTATMsgType, "DELAY_FEEDBACK", {enumerable:!1, configurable:!1, writable:!1, value:"Delay Feedback"});
Object.defineProperty(CTATMsgType, "HIDE_ALL_FEEDBACK", {enumerable:!1, configurable:!1, writable:!1, value:"Hide All Feedback"});
Object.defineProperty(CTATMsgType, "HIDE_BUT_COMPLETE", {enumerable:!1, configurable:!1, writable:!1, value:"Hide feedback but require all steps"});
Object.defineProperty(CTATMsgType, "HIDE_BUT_ENFORCE", {enumerable:!1, configurable:!1, writable:!1, value:"Hide feedback but enforce constraints"});
Object.defineProperty(CTATMsgType, "DEFAULT_OUT_OF_ORDER_MESSAGE", {enumerable:!1, configurable:!1, writable:!1, value:CTATLanguageManager.theSingleton.filterString("HIGHLIGHTEDSTEP")});
Object.defineProperty(CTATMsgType, "NOT_DONE_MSG", {enumerable:!1, configurable:!1, writable:!1, value:CTATLanguageManager.theSingleton.filterString("NOTDONE")});
Object.defineProperty(CTATMsgType, "PREVIOUS_FOCUS", {enumerable:!1, configurable:!1, writable:!1, value:"PreviousFocus"});
Object.defineProperty(CTATMsgType, "ASSOCIATED_RULES", {enumerable:!1, configurable:!1, writable:!1, value:"AssociatedRules"});
Object.defineProperty(CTATMsgType, "BEGIN_GO_TO_STATE", {enumerable:!1, configurable:!1, writable:!1, value:"BeginGoToState"});
Object.defineProperty(CTATMsgType, "END_GO_TO_STATE", {enumerable:!1, configurable:!1, writable:!1, value:"EndGoToState"});
Object.defineProperty(CTATMsgType, "BUGGY_MESSAGE", {enumerable:!1, configurable:!1, writable:!1, value:"BuggyMessage"});
Object.defineProperty(CTATMsgType, "CORRECT_ACTION", {enumerable:!1, configurable:!1, writable:!1, value:"CorrectAction"});
Object.defineProperty(CTATMsgType, "HINT_REQUEST", {enumerable:!1, configurable:!1, writable:!1, value:"HintRequest"});
Object.defineProperty(CTATMsgType, "INCORRECT_ACTION", {enumerable:!1, configurable:!1, writable:!1, value:"InCorrectAction"});
Object.defineProperty(CTATMsgType, "INTERFACE_ACTION", {enumerable:!1, configurable:!1, writable:!1, value:"InterfaceAction"});
Object.defineProperty(CTATMsgType, "INTERFACE_IDENTIFICATION", {enumerable:!1, configurable:!1, writable:!1, value:"InterfaceIdentification"});
Object.defineProperty(CTATMsgType, "PROBLEM_RESTORE_END", {enumerable:!1, configurable:!1, writable:!1, value:"ProblemRestoreEnd"});
Object.defineProperty(CTATMsgType, "PROBLEM_SUMMARY_REQUEST", {enumerable:!1, configurable:!1, writable:!1, value:"ProblemSummaryRequest"});
Object.defineProperty(CTATMsgType, "PROBLEM_SUMMARY_RESPONSE", {enumerable:!1, configurable:!1, writable:!1, value:"ProblemSummaryResponse"});
Object.defineProperty(CTATMsgType, "SET_PREFERENCES", {enumerable:!1, configurable:!1, writable:!1, value:"SetPreferences"});
Object.defineProperty(CTATMsgType, "SHOW_HINTS_MESSAGE", {enumerable:!1, configurable:!1, writable:!1, value:"ShowHintsMessage"});
Object.defineProperty(CTATMsgType, "SUCCESS_MESSAGE", {enumerable:!1, configurable:!1, writable:!1, value:"SuccessMessage"});
Object.defineProperty(CTATMsgType, "START_STATE_END", {enumerable:!1, configurable:!1, writable:!1, value:"StartStateEnd"});
Object.defineProperty(CTATMsgType, "STATE_GRAPH", {enumerable:!1, configurable:!1, writable:!1, value:"StateGraph"});
Object.defineProperty(CTATMsgType, "UNTUTORED_ACTION", {enumerable:!1, configurable:!1, writable:!1, value:"UntutoredAction"});
Object.defineProperty(CTATMsgType, "CompletionValue", {enumerable:!1, configurable:!1, writable:!1, value:["incomplete", "complete"]});
CTATMsgType.prototype = Object.create(CTATBase.prototype);
CTATMsgType.prototype.constructor = CTATMsgType;
"undefined" !== typeof module && (module.exports = CTATMsgType);
var CTATVersionComparator = function() {
  CTATBase.call(this, "CTATVersionComparator", "");
  this.compare = function(a, b) {
    if (null === a || "undefined" === typeof a) {
      return null === b || "undefined" === typeof b ? 0 : -1;
    }
    if (null === b || "undefined" === typeof b) {
      return 1;
    }
    var f = 0, e = a.split("."), d = b.split("."), c;
    for (c = 0;c < Math.min(e.length, d.length);c++) {
      try {
        var g = parseInt(e[c]), h = parseInt(d[c]), f = g < h ? -1 : g > h ? 1 : 0;
        if (0 !== f) {
          return f;
        }
      } catch (l) {
        if (f = e[c].toString() < d[c].toString() ? -1 : e[c].toString() > d[c].toString() ? 1 : 0, 0 !== f) {
          return f;
        }
      }
    }
    return c < e.length ? 1 : c < d.length ? -1 : a.toString() < b.toString() ? -1 : a.toString() > b.toString() ? 1 : 0;
  };
};
CTATVersionComparator.prototype = Object.create(CTATBase.prototype);
CTATVersionComparator.prototype.constructor = CTATVersionComparator;
CTATVersionComparator.vc = new CTATVersionComparator;
"undefined" !== typeof module && (module.exports = CTATVersionComparator);
var CTATExampleTracerSkill = function(a, b, f, e, d, c, g) {
  CTATBase.call(this, "CTATExampleTracerSkill", b);
  var h = null == a || "" == a.trim() ? b : b + " " + a, l = Number(f);
  Number.isNaN(l) && (l = CTATExampleTracerSkill.DEFAULT_P_GUESS);
  var m = Number(e);
  Number.isNaN(m) && (m = CTATExampleTracerSkill.DEFAULT_P_KNOWN);
  var q = Number(c);
  Number.isNaN(q) && (q = CTATExampleTracerSkill.DEFAULT_P_LEARN);
  var p = Number(d);
  Number.isNaN(p) && (p = CTATExampleTracerSkill.DEFAULT_P_SLIP);
  var n = /^0*[xX]([0-9a-fA-F]+)$/.test(g) ? parseInt(g, 16) : /^(\-|\+)?[0-9]+$/.test(g) ? parseInt(g, 10) : CTATExampleTracerSkill.DEFAULT_HISTORY, x = 0, u = 0, w = CTATExampleTracerSkill.SKILL_BAR_DELIMITER_v2_11, z = CTATExampleTracerSkill.DEFAULT_MASTERY_THRESHOLD, t = null, D = null, C = this;
  this.getSkillName = function() {
    return h;
  };
  this.getCategory = function() {
    var a = h.indexOf(" ");
    return 0 > a ? "" : h.substring(a + 1);
  };
  this.setTransactionNumber = function(a) {
    x = a;
  };
  this.updatePKnown = function(a) {
    return m = CTATExampleTracerSkill.updatePKnownStatic(a, l, m, p, q);
  };
  this.updateHistory = function(a) {
    return n = CTATExampleTracerSkill.updateHistoryStatic(a, n);
  };
  this.changeOpportunityCount = function(a) {
    return u += a;
  };
  this.getTransactionNumber = function() {
    return x;
  };
  this.getSkillBarString = function(a) {
    var b = this.getSkillName(), b = b + this.getSkillBarDelimiter() + m, b = b + this.getSkillBarDelimiter() + (this.hasReachedMastery() ? "1" : "0");
    !0 === a && (b = b + this.getSkillBarDelimiter() + this.getLabel());
    return b.toString();
  };
  this.getSkillBarDelimiter = function() {
    return w;
  };
  this.toXML = function(a) {
    var b;
    b = "" + (' name="' + CTATExampleTracerSkill.getName(h) + '"');
    b += ' category="' + C.getCategory() + '"';
    b += ' label="' + C.getLabel() + '"';
    b += ' description="' + C.getDescription() + '"';
    b += ' pKnown="' + Number(m).toFixed(2) + '"';
    b += ' pLearn="' + Number(q).toFixed(2) + '"';
    b += ' pGuess="' + Number(l).toFixed(2) + '"';
    b += ' pSlip="' + Number(p).toFixed(2) + '"';
    b += ' history="' + n + '"';
    b += ' opportunityCount="' + u + '"';
    return a ? "&lt;Skill" + b + " /&gt;" : "<Skill" + b + " />";
  };
  this.hasReachedMastery = function() {
    return null === m || "undefined" === typeof m ? !1 : m >= z;
  };
  this.getLabel = function() {
    return !t || 1 > t.length ? CTATExampleTracerSkill.getName(h) : t;
  };
  this.getDescription = function() {
    return !D || 1 > D.length ? h : D;
  };
  this.setVersion = function(a) {
    null !== a && "undefined" !== typeof a && 0 < a.length && (w = CTATExampleTracerSkill.versionToSkillBarDelimiter(a));
  };
  this.setLabel = function(a) {
    t = a;
  };
  this.setDescription = function(a) {
    D = a;
  };
  CTATExampleTracerSkill.makeStepID = function(a, b) {
    for (var c = "", d = 0, g = a;2 > d++;g = b) {
      if (!(null === g || "undefined" === typeof g || 1 > g.length)) {
        for (var e = !1, f = 0;f < g.length;f++) {
          if (null !== g[f] && "undefined" !== typeof g[f]) {
            var h = g[f].toString();
            1 > h.length || g === a && ("hint".toString().toUpperCase() === h.toString().toUpperCase() || "help".toString().toUpperCase() === h.toString().toUpperCase()) || g === b && CTATMsgType.PREVIOUS_FOCUS.toString().toUpperCase() === h.toString().toUpperCase() || (c = c + (e ? "," : "[") + h, e = !0);
          }
        }
        !0 === e && (c += "]");
      }
    }
    return c.toString();
  };
  CTATExampleTracerSkill.updateHistoryStatic = function(a, b) {
    var c, d = 1 << CTATExampleTracerSkill.MAX_INTEGER_SHIFT;
    c = b << 1 | (a.toString().toUpperCase() === CTATExampleTracerSkill.CORRECT.toString().toUpperCase() ? 1 : 0);
    return c & d ? c ^ d : c;
  };
  CTATExampleTracerSkill.updatePKnownStatic = function(a, b, c, d, g) {
    var e = 0;
    if (a.toString().toUpperCase() === CTATExampleTracerSkill.CORRECT.toString().toUpperCase()) {
      b = +(b * (1 - c)).toFixed(2), c = +(c * (1 - d)).toFixed(2), e = +(c / (c + b)).toFixed(2);
    } else {
      if (a.toString().toUpperCase() === CTATExampleTracerSkill.INCORRECT.toString().toUpperCase() || a.toString().toUpperCase() === CTATExampleTracerSkill.HINT.toString().toUpperCase()) {
        d = +(c * d).toFixed(2), c = +((1 - c) * (1 - b)).toFixed(2), e = +(d / (d + c)).toFixed(2);
      }
    }
    return +(e + g * (1 - e)).toFixed(2);
  };
  CTATExampleTracerSkill.getName = function(a) {
    var b = a.indexOf(" ");
    return 0 > b ? a : a.substring(0, b);
  };
  CTATExampleTracerSkill.versionToSkillBarDelimiter = function(a) {
    return null === a || "undefined" === typeof a ? CTATExampleTracerSkill.SKILL_BAR_DELIMITER_v2_10 : 0 <= CTATVersionComparator.vc.compare(a, "2.11") ? CTATExampleTracerSkill.SKILL_BAR_DELIMITER_v2_11 : CTATExampleTracerSkill.SKILL_BAR_DELIMITER_v2_10;
  };
};
Object.defineProperty(CTATExampleTracerSkill, "MAX_INTEGER_SHIFT", {enumerable:!1, configurable:!1, writable:!1, value:31});
Object.defineProperty(CTATExampleTracerSkill, "HINT", {enumerable:!1, configurable:!1, writable:!1, value:"hint"});
Object.defineProperty(CTATExampleTracerSkill, "CORRECT", {enumerable:!1, configurable:!1, writable:!1, value:"correct"});
Object.defineProperty(CTATExampleTracerSkill, "INCORRECT", {enumerable:!1, configurable:!1, writable:!1, value:"incorrect"});
Object.defineProperty(CTATExampleTracerSkill, "SKILL_BAR_DELIMITER_v2_10", {enumerable:!1, configurable:!1, writable:!1, value:"="});
Object.defineProperty(CTATExampleTracerSkill, "SKILL_BAR_DELIMITER_v2_11", {enumerable:!1, configurable:!1, writable:!1, value:"`"});
Object.defineProperty(CTATExampleTracerSkill, "DEFAULT_MASTERY_THRESHOLD", {enumerable:!1, configurable:!1, writable:!1, value:.95});
Object.defineProperty(CTATExampleTracerSkill, "DEFAULT_P_GUESS", {enumerable:!1, configurable:!1, writable:!1, value:.2});
Object.defineProperty(CTATExampleTracerSkill, "DEFAULT_P_KNOWN", {enumerable:!1, configurable:!1, writable:!1, value:.3});
Object.defineProperty(CTATExampleTracerSkill, "DEFAULT_P_SLIP", {enumerable:!1, configurable:!1, writable:!1, value:.3});
Object.defineProperty(CTATExampleTracerSkill, "DEFAULT_P_LEARN", {enumerable:!1, configurable:!1, writable:!1, value:.15});
Object.defineProperty(CTATExampleTracerSkill, "DEFAULT_HISTORY", {enumerable:!1, configurable:!1, writable:!1, value:0});
CTATExampleTracerSkill.prototype = Object.create(CTATBase.prototype);
CTATExampleTracerSkill.prototype.constructor = CTATExampleTracerSkill;
"undefined" !== typeof module && (module.exports = CTATExampleTracerSkill);
var CTATVariableTableCount = 0, CTATVariableTable = function() {
  function a(b) {
    var d = {}, c;
    for (c in b) {
      !0 === b.hasOwnProperty(c) && (d[c] = "object" !== typeof b[c] ? b[c] : a(b[c]));
    }
    return d;
  }
  CTATBase.call(this, "CTATVariableTable", "");
  CTATVariableTableCount++;
  var b = {}, f = this;
  this.toString = function() {
    var a = "", d;
    for (d in b) {
      0 < a.length && (a += ", "), a = a + d + "=" + b[d];
    }
    return "{ " + a + " }";
  };
  this.clone = function() {
    ctatdebug("CTATVariableTable --\x3e in clone; this " + this + ", this.getTable() " + this.getTable);
    var e = new CTATVariableTable;
    ctatdebug("CTATVariableTable --\x3e in clone; copy " + e + ", copy.setTable() " + e.setTable);
    e.setTable(a(b));
    ctatdebug("CTATVariableTable --\x3e out of clone");
    return e;
  };
  this.put = function(a, d) {
    f.ctatdebug("CTATVariableTable.put(" + a + ", " + d + ") typeof value " + typeof d);
    var c;
    if (a) {
      if (0 > a.indexOf(".")) {
        b[a] = d;
      } else {
        var g = a.split(".");
        if ("object" !== typeof b[g[0]] || null === b[g[0]]) {
          b[g[0]] = {};
        }
        c = b[g[0]];
        for (var h = 1;h < g.length - 1;h++) {
          if ("object" !== typeof c[g[h]] || null === c[g[h]]) {
            c[g[h]] = {}, c = c[g[h]];
          }
        }
        c[g[h]] = d;
      }
    } else {
      console.log("CTATVariableTable.put() warning: null or empty variable name '" + a + "'");
    }
    return f;
  };
  this.getTable = function() {
    return b;
  };
  this.setTable = function(a) {
    b = a;
  };
  this.get = function(a) {
    if (0 > a.indexOf(".")) {
      return null === b[a] || "undefined" === typeof b[a] ? null : b[a];
    }
    var d = a.split(".");
    if (null === b[d[0]] || "undefined" === typeof b[d[0]]) {
      return null;
    }
    a = b[d[0]];
    for (var c = 1;c < d.length - 1;c++) {
      if (null === a[d[c]] || "undefined" === typeof a[d[c]]) {
        return null;
      }
      a = a[d[c]];
    }
    return null === a[d[c]] || "undefined" === typeof a[d[c]] ? null : a[d[c]];
  };
};
Object.defineProperty(CTATVariableTable, "serialVersionUID", {enumerable:!1, configurable:!1, writable:!1, value:"201403071830L"});
CTATVariableTable.standardizeType = function(a) {
  if ("string" != typeof a || 1 > a.trim().length) {
    return a;
  }
  if ((!0).toString() == a) {
    return !0;
  }
  if ((!1).toString() == a) {
    return !1;
  }
  if ("null" == a) {
    return null;
  }
  var b = Number(a);
  return isNaN(b) ? a : b;
};
CTATVariableTable.valueAsString = function(a) {
  return "string" == typeof a ? a : String(a);
};
CTATVariableTable.nameAsString = function(a) {
  return a ? a + "_String" : null;
};
CTATVariableTable.prototype = Object.create(CTATBase.prototype);
CTATVariableTable.prototype.constructor = CTATVariableTable;
"undefined" !== typeof module && (module.exports = CTATVariableTable);
var CTATMatcher = function(a, b, f) {
  CTATBase.call(this, "CTATMatcher", "");
  this.lastResult = null;
  var e = new CTATSAI("", "", ""), d = f, c = CTATMsgType.DEFAULT_ACTOR, g = !1, h = this;
  this.resetMatcher = function() {
  };
  this.getSelection = function() {
    return h.getDefaultSelection();
  };
  this.getAction = function() {
    return h.getDefaultAction();
  };
  this.getInput = function() {
    return h.getDefaultInput();
  };
  this.getActor = function() {
    return c;
  };
  this.setCaseInsensitive = function(a) {
    d = a;
  };
  this.getEvaluatedInput = function(a, b) {
    return h.getInput();
  };
  this.getTraversalIncrement = function() {
    return 1;
  };
  this.getTutorSAI = function(a, b, c) {
    a = String(c).toLowerCase() == CTATExampleTracerLink.CORRECT_ACTION.toLowerCase() ? a : h.getDefaultSAI();
    console.log("CTATMatcher.getTutorSAI() superclass method called, should be subclass;\n  returning: " + a);
    return a;
  };
  this.getDefaultSelection = function() {
    return h.getDefaultSAI().getSelection();
  };
  this.getDefaultAction = function() {
    return h.getDefaultSAI().getAction();
  };
  this.getDefaultInput = function() {
    return h.getDefaultSAI().getInput();
  };
  this.getDefaultSAI = function() {
    return e;
  };
  this.setDefaultSAI = function(a) {
    e = a;
  };
  this.getDefaultActor = function() {
    switch(String(getActor()).toLowerCase()) {
      case CTATMsgType.DEFAULT_STUDENT_ACTOR.toLowerCase():
        return CTATMsgType.DEFAULT_STUDENT_ACTOR;
      case CTATMsgType.DEFAULT_TOOL_ACTOR.toLowerCase():
        return CTATMsgType.DEFAULT_TOOL_ACTOR;
      case CTATMsgType.UNGRADED_TOOL_ACTOR.toLowerCase():
        return CTATMsgType.DEFAULT_TOOL_ACTOR;
      case CTATMsgType.ANY_ACTOR.toLowerCase():
        return CTATMsgType.DEFAULT_TOOL_ACTOR;
      default:
        return console.log("CTATMatcher.getDefaultActor() unexpected value for actor: " + c + "; returning " + CTATMsgType.DEFAULT_ACTOR), CTATMsgType.DEFAULT_ACTOR;
    }
  };
  this.getInput = function() {
    return h.getDefaultInput();
  };
  this.getCaseInsensitive = function() {
    return d;
  };
  this.match = function(a, b, c, d, g) {
    console.log("CTATMatcher superclass method called: match(" + a + ", " + b + ", " + c + ", " + d + ")");
    return !1;
  };
  this.matchForHint = function(a, b, c, d) {
    console.log("CTATMatcher superclass method called: matchForHint(" + a + ", " + b + ", " + c + ", vt)");
    return !1;
  };
  this.matchActor = function(a) {
    a = String(a).toUpperCase();
    var b = String(h.getActor()).toUpperCase();
    ctatdebug("CTATMatcher.matchActor(" + a + ") myActor is " + b);
    return CTATMsgType.ANY_ACTOR.toString().toUpperCase() == b || CTATMsgType.UNGRADED_TOOL_ACTOR.toString().toUpperCase() == b && CTATMsgType.DEFAULT_TOOL_ACTOR.toString().toUpperCase() == a || CTATMsgType.UNGRADED_TOOL_ACTOR.toString().toUpperCase() == a && CTATMsgType.DEFAULT_TOOL_ACTOR.toString().toUpperCase() == b ? !0 : b == a;
  };
  this.getDefaultSelectionArray = function() {
    return h.getDefaultSAI().getSelectionArray();
  };
  this.getDefaultActionArray = function() {
    return h.getDefaultSAI().getActionArray();
  };
  this.getDefaultInputArray = function() {
    return h.getDefaultSAI().getInputArray();
  };
  this.getLastResult = function() {
    return null === h.lastResult || "undefined" === typeof h.lastResult ? "" : h.lastResult.toString();
  };
  this.setActor = function(a) {
    ctatdebug("CTATMatcher --\x3e in setActor(" + a + ")");
    if (null === a || "undefined" === typeof a) {
      a = CTATMsgType.DEFAULT_ACTOR;
    }
    a = String(a).toLowerCase().trim();
    c = "tool" == a ? CTATMsgType.DEFAULT_TOOL_ACTOR : a == CTATMsgType.DEFAULT_STUDENT_ACTOR.toLowerCase() ? CTATMsgType.DEFAULT_STUDENT_ACTOR : a == CTATMsgType.DEFAULT_TOOL_ACTOR.toLowerCase() ? CTATMsgType.DEFAULT_TOOL_ACTOR : a == CTATMsgType.UNGRADED_TOOL_ACTOR.toLowerCase() ? CTATMsgType.UNGRADED_TOOL_ACTOR : a == CTATMsgType.ANY_ACTOR.toLowerCase() ? CTATMsgType.ANY_ACTOR : CTATMsgType.DEFAULT_ACTOR;
  };
  this.array2ConcatString = function(a) {
    var b = "";
    if (null == a) {
      return b;
    }
    if (!Array.isArray(a)) {
      return a.toString();
    }
    a.forEach(function(a) {
      null != a && (b += a.toString() + "\n");
    });
    return b.substring(0, 0 < b.length ? b.length - 1 : 0);
  };
  this.matchConcatenation = function(a) {
    return h.matchSingle(h.array2ConcatString(a));
  };
  this.isLinkTriggered = function() {
    return g;
  };
  this.setLinkTriggered = function(a) {
    g = a;
  };
  this.evaluateReplacement = function(a, b, c) {
    return "";
  };
  this.replaceInput = function() {
    return !!h.getReplacementFormula();
  };
  this.getReplacementFormula = function() {
    return "";
  };
};
CTATMatcher.prototype.toString = function() {
  console.log("Error: CTATMatcher.toString() called; should be overridden in subclass");
  return "This is CTATMatcher.";
};
CTATMatcher.prototype.setParameter = function(a, b, f) {
};
CTATMatcher.isTutorActor = function(a, b) {
  return CTATMsgType.DEFAULT_TOOL_ACTOR.toUpperCase() === a.toUpperCase() || CTATMsgType.UNGRADED_TOOL_ACTOR.toUpperCase() === a.toUpperCase() || b && CTATMsgType.ANY_ACTOR.toUpperCase() === a.toUpperCase() ? !0 : !1;
};
Object.defineProperty(CTATMatcher, "NON_SINGLE", {enumerable:!1, configurable:!1, writable:!1, value:-1});
Object.defineProperty(CTATMatcher, "SELECTION", {enumerable:!1, configurable:!1, writable:!1, value:0});
Object.defineProperty(CTATMatcher, "ACTION", {enumerable:!1, configurable:!1, writable:!1, value:1});
Object.defineProperty(CTATMatcher, "INPUT", {enumerable:!1, configurable:!1, writable:!1, value:2});
Object.defineProperty(CTATMatcher, "VECTOR", {enumerable:!1, configurable:!1, writable:!1, value:3});
Object.defineProperty(CTATMatcher, "ACTOR", {enumerable:!1, configurable:!1, writable:!1, value:"Actor"});
CTATMatcher.prototype = Object.create(CTATBase.prototype);
CTATMatcher.prototype.constructor = CTATMatcher;
"undefined" !== typeof module && (module.exports = CTATMatcher);
var CTATTreeNode = {};
(function() {
  var a;
  a = function() {
    function a() {
    }
    a.operators = [["CONST"], ["VAR"], ["EXP", "SQRT"], ["UPLUS", "UMINUS"], ["ITIMES", "TIMES", "DIVIDE"], ["IDIVIDE", "REM"], ["PLUS", "MINUS"], "LESS LESSEQUAL EQUAL NOTEQUAL GREATEREQUAL GREATER".split(" ")];
    a.relationalOperators = "LESS LESSEQUAL EQUAL NOTEQUAL GREATEREQUAL GREATER".split(" ");
    a.operatorPrecedence = function(a, b) {
      return Math.sign(this.operators.findIndex(function(b) {
        return b.includes(a);
      }) - this.operators.findIndex(function(a) {
        return a.includes(b);
      }));
    };
    a.operatorStrings = {EXP:"^", SQRT:"|", UPLUS:"+", UMINUS:"-", ITIMES:"", TIMES:"*", DIVIDE:"/", IDIVIDE:"//", REM:"%", PLUS:"+", MINUS:"-", LESS:"<", LESSEQUAL:"<=", EQUAL:"=", NOTEQUAL:"!=", GREATEREQUAL:">=", GREATER:">"};
    a.toOperatorString = function(a) {
      return this.operatorStrings[a] || "";
    };
    a.diff = function(a, b) {
      return a.filter(function(a) {
        return !b.includes(a);
      });
    };
    a.prototype.addParens = function() {
      this.parens++;
      return this;
    };
    a.prototype.toString = function(a) {
      var b, d;
      this.negated() && this.setParens("MINUS");
      this.inverted() && this.setParens("DIVIDE");
      this.inverted() && (a = "1/" + a);
      this.negated() && (a = "-" + a);
      b = 0;
      for (d = this.parens;0 <= d ? b < d : b > d;0 <= d ? ++b : --b) {
        a = "(" + a + ")";
      }
      return a;
    };
    a.prototype.setParens = function(f, e) {
      var d;
      null == e && (e = !1);
      d = this.negated() ? "UMINUS" : this.inverted() ? "DIVIDE" : this.operator;
      d = a.operatorPrecedence(f, d);
      if (0 > d || 0 === d && e) {
        this.parens = 1;
      }
      return this;
    };
    a.prototype.evaluate = function(a) {
      return this.sign * Math.pow(a, this.exp);
    };
    a.prototype.equals = function(a) {
      return a && this.operator === a.operator && this.sign === a.sign && this.exp === a.exp && this.parens === a.parens;
    };
    a.prototype.simplify = function(a) {
      this.methods = a;
      return this.simplifyNode(this.methods);
    };
    a.prototype.simplifyNode = function(a) {
      var b, d, c, g;
      this.methods = a;
      g = this;
      c = this.methods;
      a = 0;
      for (b = c.length;a < b;a++) {
        d = c[a], g = g[d].call(g), g.methods = this.methods;
      }
      delete g.methods;
      return g;
    };
    a.prototype.simpleFlatten = function() {
      return this;
    };
    a.prototype.flatten = function() {
      this.parens = 0;
      return this;
    };
    a.prototype.computeConstants = function() {
      return this;
    };
    a.prototype.combineSimilar = function() {
      return this;
    };
    a.prototype.expand = function() {
      return this;
    };
    a.prototype.distribute = function() {
      return this;
    };
    a.prototype.removeIdentity = function() {
      return this;
    };
    a.prototype.sort = function() {
      return this;
    };
    a.prototype.spreadIdentity = function() {
      return this;
    };
    a.prototype.stripIdentity = function() {
      return this;
    };
    a.prototype.multiplyOne = function() {
      return (new CTATMultiplicationNode("TIMES", [new CTATConstantNode(1), this])).popNegation().pushNegation();
    };
    a.prototype.powerOne = function() {
      return (new CTATPowerNode("EXP", this, new CTATConstantNode(1))).popInversion().pushInversion().popNegation();
    };
    a.prototype.compare = function(f, e) {
      return a.operatorPrecedence(this.operator, f.operator);
    };
    a.prototype.compareSigns = function(a, b) {
      return (Math.sign(this.sign - a.sign) || Math.sign(this.exp - a.exp)) * b;
    };
    a.prototype.countVariables = function() {
      return 0;
    };
    a.prototype.pushNegation = function() {
      return this;
    };
    a.prototype.popNegation = function() {
      return this;
    };
    a.prototype.pushInversion = function() {
      return this;
    };
    a.prototype.popInversion = function() {
      return this;
    };
    a.prototype.negate = function() {
      this.sign = -this.sign;
      return this;
    };
    a.prototype.invert = function() {
      this.exp = -this.exp;
      return this;
    };
    a.prototype.addition = function() {
      return "PLUS" === this.operator;
    };
    a.prototype.subtraction = function() {
      return "MINUS" === this.operator;
    };
    a.prototype.multiplication = function() {
      return "TIMES" === this.operator;
    };
    a.prototype.division = function() {
      return "DIVIDE" === this.operator;
    };
    a.prototype.intDivision = function() {
      return "IDIVIDE" === this.operator;
    };
    a.prototype.power = function() {
      return "EXP" === this.operator;
    };
    a.prototype.root = function() {
      return "SQRT" === this.operator;
    };
    a.prototype.negation = function() {
      return "UMINUS" === this.operator;
    };
    a.prototype.constant = function(a) {
      return !1;
    };
    a.prototype.integer = function() {
      return !1;
    };
    a.prototype.negated = function() {
      return 0 > this.sign;
    };
    a.prototype.inverted = function() {
      return 0 > this.exp;
    };
    a.prototype.parented = function() {
      return 0 < this.parens;
    };
    a.prototype.even = function() {
      return !1;
    };
    return a;
  }();
  "undefined" !== typeof module && null !== module ? module.exports = a : this.CTATTreeNode = a;
}).call(this);
var CTATRelationNode = {};
(function() {
  var a, b = function(a, b) {
    function c() {
      this.constructor = a;
    }
    for (var g in b) {
      f.call(b, g) && (a[g] = b[g]);
    }
    c.prototype = b.prototype;
    a.prototype = new c;
    a.__super__ = b.prototype;
    return a;
  }, f = {}.hasOwnProperty;
  a = function(a) {
    function d(a, b, d, e, f, q) {
      this.operator = a;
      this.left = b;
      this.right = d;
      this.parens = null != e ? e : 0;
      this.sign = null != f ? f : 1;
      this.exp = null != q ? q : 1;
    }
    b(d, a);
    d.prototype.clone = function() {
      return new d(this.operator, this.left.clone(), this.right.clone(), this.parens, this.sign, this.exp);
    };
    d.prototype.toString = function() {
      var a;
      this.left.setParens(this.operator);
      this.right.setParens(this.operator);
      a = CTATTreeNode.toOperatorString(this.operator);
      return d.__super__.toString.call(this, "" + this.left.toString() + a + this.right.toString());
    };
    d.prototype.evaluate = function() {
      var a, b;
      a = this.left.evaluate();
      b = this.right.evaluate();
      switch(this.operator) {
        case "LESS":
          return a < b;
        case "GREATER":
          return a > b;
        case "LESSEQUAL":
          return a <= b;
        case "GREATEREQUAL":
          return a >= b;
        case "EQUAL":
          return a === b;
        case "NOTEQUAL":
          return a !== b;
      }
    };
    d.prototype.equals = function(a) {
      return d.__super__.equals.call(this, a) && this.left.equals(a.left) && this.right.equals(a.right);
    };
    d.prototype.simplify = function(a) {
      this.methods = a;
      this.left = this.left.simplify(this.methods);
      this.right = this.right.simplify(this.methods);
      return d.__super__.simplify.apply(this, arguments);
    };
    d.prototype.computeConstants = function() {
      return this.left.constant() && this.right.constant() ? new CTATConstantNode(this.evaluate()) : this;
    };
    d.prototype.sort = function() {
      var a;
      switch(this.operator) {
        case "GREATER":
          this.operator = "LESS";
          a = [this.right, this.left];
          this.left = a[0];
          this.right = a[1];
          break;
        case "GREATEREQUAL":
          this.operator = "LESSEQUAL";
          a = [this.right, this.left];
          this.left = a[0];
          this.right = a[1];
          break;
        case "EQUAL":
        ;
        case "NOTEQUAL":
          0 > this.left.compare(this.right) && (a = [this.right, this.left], this.left = a[0], this.right = a[1]);
      }
      return this;
    };
    d.prototype.countVariables = function() {
      return this.left.countVariables() + this.right.countVariables();
    };
    return d;
  }(CTATTreeNode);
  "undefined" !== typeof module && null !== module ? module.exports = a : this.CTATRelationNode = a;
}).call(this);
var CTATAdditionNode = {};
(function() {
  var a, b = function(a, b) {
    function c() {
      this.constructor = a;
    }
    for (var g in b) {
      f.call(b, g) && (a[g] = b[g]);
    }
    c.prototype = b.prototype;
    a.prototype = new c;
    a.__super__ = b.prototype;
    return a;
  }, f = {}.hasOwnProperty;
  a = function(a) {
    function d(a, b, d, e, f) {
      this.operator = a;
      this.terms = b;
      this.parens = null != d ? d : 0;
      this.sign = null != e ? e : 1;
      this.exp = null != f ? f : 1;
      this.subtraction() && this.terms[1].negate();
      this.operator = "PLUS";
    }
    b(d, a);
    d.prototype.clone = function() {
      return new d(this.operator, this.terms.map(function(a) {
        return a.clone();
      }), this.parens, this.sign, this.exp);
    };
    d.prototype.toString = function() {
      return d.__super__.toString.call(this, this.terms.reduce(function(a) {
        return function(b, d) {
          d.setParens(a.operator);
          return "" + b + (b && !d.negated() ? "+" : "") + d.toString();
        };
      }(this)));
    };
    d.prototype.evaluate = function() {
      return d.__super__.evaluate.call(this, this.terms.reduce(function(a, b) {
        return a + b.evaluate();
      }, 0));
    };
    d.prototype.equals = function(a) {
      return d.__super__.equals.call(this, a) && this.terms.length === a.terms.length && this.terms.every(function(b, d) {
        return b.equals(a.terms[d]);
      });
    };
    d.prototype.simplify = function(a) {
      this.methods = a;
      this.terms = this.terms.map(function(a) {
        return function(b) {
          return b.simplify(a.methods);
        };
      }(this));
      return d.__super__.simplify.apply(this, arguments);
    };
    d.prototype.simpleFlatten = function() {
      this.terms = this.terms.reduce(function(a, b) {
        b.inverted() || b.parented() || !b.addition() ? a.push(b) : a.push.apply(a, b.pushNegation().terms);
        return a;
      }, []);
      return this;
    };
    d.prototype.flatten = function() {
      d.__super__.flatten.apply(this, arguments);
      this.simpleFlatten();
      return this.pushNegation();
    };
    d.prototype.computeConstants = function() {
      var a;
      a = 0;
      this.terms = this.terms.filter(function(b) {
        return b.constant() ? (a += b.evaluate(), !1) : !0;
      });
      0 === a && 0 !== this.terms.length || this.terms.unshift(new CTATConstantNode(a));
      return 1 < this.terms.length ? this : this.pushInversion().terms[0];
    };
    d.prototype.combineSimilar = function() {
      var a;
      a = [];
      this.terms.forEach(function(b) {
        var d, e;
        e = b.constant() ? [null, b] : (b = b.multiplyOne(), [b, b.factors.shift()]);
        return (d = a.find(function(a) {
          var b;
          return null != (b = a[0]) ? b.equals(e[0]) : void 0;
        })) ? d[1] += e[1].evaluate() : a.push([e[0], e[1].evaluate()]);
      });
      this.terms = a.reduce(function(a, b) {
        0 !== b[1] && (b[1] = (new CTATConstantNode(b[1])).popNegation(), b[0] ? (b[0].factors.unshift(b[1]), a.push(b[0].removeIdentity())) : a.push(b[1]));
        return a;
      }, []);
      if (1 < this.terms.length) {
        return this;
      }
      1 !== this.terms.length && (this.terms[0] = new CTATConstantNode(0));
      return this.pushInversion().terms[0];
    };
    d.prototype.removeIdentity = function() {
      var a;
      a = this.terms.filter(function(a) {
        return !a.constant(0);
      });
      this.terms = a.length ? a : this.terms.slice(0, 1);
      return 1 < this.terms.length ? this : this.pushInversion().terms[0];
    };
    d.prototype.sort = function() {
      this.spreadIdentity();
      this.terms = this.terms.sort(function(a, b) {
        return -a.compare(b, !0);
      });
      return this.stripIdentity();
    };
    d.prototype.spreadIdentity = function() {
      this.terms = this.terms.map(function(a) {
        return a.multiplyOne();
      });
      return this;
    };
    d.prototype.stripIdentity = function() {
      this.terms = this.terms.map(function(a) {
        return a.removeIdentity();
      });
      return this;
    };
    d.prototype.compare = function(a, b) {
      var e;
      return (e = d.__super__.compare.apply(this, arguments)) || this.countVariables() - a.countVariables() || this.terms.some(function(d, f) {
        return e = d.compare(a.terms[f], b);
      }) && e || this.compareSigns(a, b);
    };
    d.prototype.countVariables = function() {
      return this.terms.reduce(function(a, b) {
        return a + b.countVariables();
      }, 0);
    };
    d.prototype.pushNegation = function() {
      this.negated() && (this.negate(), this.terms.forEach(function(a) {
        return a.negate();
      }));
      return this;
    };
    d.prototype.popNegation = function() {
      this.terms[0].negated() && (this.negate(), this.terms.forEach(function(a) {
        return a.negate();
      }));
      return this;
    };
    d.prototype.pushInversion = function() {
      this.inverted() && (this.invert(), this.terms[0].invert());
      return this;
    };
    d.prototype.even = function() {
      return !this.inverted && this.terms.every(function(a) {
        return a.even();
      });
    };
    return d;
  }(CTATTreeNode);
  "undefined" !== typeof module && null !== module ? module.exports = a : this.CTATAdditionNode = a;
}).call(this);
var CTATMultiplicationNode = {};
(function() {
  var a, b = function(a, b) {
    function c() {
      this.constructor = a;
    }
    for (var g in b) {
      f.call(b, g) && (a[g] = b[g]);
    }
    c.prototype = b.prototype;
    a.prototype = new c;
    a.__super__ = b.prototype;
    return a;
  }, f = {}.hasOwnProperty;
  a = function(a) {
    function d(a, b, d, e, f) {
      this.operator = a;
      this.factors = b;
      this.parens = null != d ? d : 0;
      this.sign = null != e ? e : 1;
      this.exp = null != f ? f : 1;
      this.division() && this.factors[1].invert();
      this.operator = "TIMES";
    }
    b(d, a);
    d.prototype.clone = function() {
      return new d(this.operator, this.factors.map(function(a) {
        return a.clone();
      }), this.parens, this.sign, this.exp);
    };
    d.prototype.toString = function() {
      return d.__super__.toString.call(this, this.factors.reduce(function(a) {
        return function(b, d) {
          var e;
          d.setParens(a.operator);
          e = d.inverted() ? (d.invert(), "/") : /^\d/.test(d = d.toString()) && /\d$/.test(b) ? "*" : "";
          return "" + b + e + d;
        };
      }(this), this.factors[0].inverted() ? "1" : ""));
    };
    d.prototype.evaluate = function() {
      return d.__super__.evaluate.call(this, this.factors.reduce(function(a, b) {
        return a * b.evaluate();
      }, 1));
    };
    d.prototype.equals = function(a) {
      return d.__super__.equals.call(this, a) && this.factors.length === a.factors.length && this.factors.every(function(b, d) {
        return b.equals(a.factors[d]);
      });
    };
    d.prototype.simplify = function(a) {
      this.methods = a;
      this.factors = this.factors.map(function(a) {
        return function(b) {
          return b.simplify(a.methods);
        };
      }(this));
      return d.__super__.simplify.apply(this, arguments);
    };
    d.prototype.simpleFlatten = function() {
      this.factors = this.factors.reduce(function(a, b) {
        b.parented() || !b.multiplication() ? a.push(b) : a.push.apply(a, b.pushNegation().pushInversion().factors);
        return a;
      }, []);
      return this;
    };
    d.prototype.flatten = function() {
      d.__super__.flatten.apply(this, arguments);
      this.simpleFlatten();
      return this.popNegation();
    };
    d.prototype.computeConstants = function() {
      var a;
      a = 1;
      this.factors = this.factors.filter(function(b) {
        return b.constant() ? (a *= b.evaluate(), !1) : !0;
      });
      1 === a && 0 !== this.factors.length || this.factors.unshift(new CTATConstantNode(a));
      return 1 < this.factors.length ? this : this.pushNegation().pushInversion().factors[0];
    };
    d.prototype.combineSimilar = function() {
      var a;
      a = [];
      this.factors.forEach(function(b) {
        var d, e, f, q;
        q = b.constant() ? [null, b] : b.power() ? b.exponent.constant() ? (b.pushInversion(), [b.base, b.exponent]) : (b.exponent = b.exponent.multiplyOne(), [b, b.exponent.factors.shift()]) : (b = b.powerOne(), [b.base, b.exponent]);
        return (d = a.find(function(a) {
          var b;
          return null != (b = a[0]) ? b.equals(q[0]) : void 0;
        })) ? d[1] += (null != (e = q[1]) ? e.evaluate() : void 0) || 1 : a.push([q[0], (null != (f = q[1]) ? f.evaluate() : void 0) || 1]);
      });
      this.factors = a.reduce(function(a, b) {
        0 !== b[1] && (b[1] = (new CTATConstantNode(b[1])).popNegation(), b[0] ? b[1].constant(1) ? a.push(b[0]) : b[0].power() ? (b[0].exponent.factors.unshift(b[1]), a.push(b[0])) : a.push(new CTATPowerNode("EXP", b[0], b[1])) : a.push(b[1]));
        return a;
      }, []);
      if (1 < this.factors.length) {
        return this;
      }
      1 !== this.factors.length && (this.factors[0] = new CTATConstantNode(1));
      return this.pushNegation().pushInversion().factors[0];
    };
    d.prototype.distribute = function() {
      var a, b;
      a = this.factors.filter(function(a) {
        return !a.inverted();
      });
      b = this.factors.filter(function(a) {
        return a.inverted();
      });
      return !this.distributedOrSingle(a) || !this.distributedOrSingle(b) || this.single(a) && b.length && this.distributed(b) ? (this.distributed(b) ? (a = this.distributeFactors(this.factors), b = []) : this.distributed(a) ? (b = this.distributeFactors(this.factors), a = []) : (a = this.distributeFactors(a), b = this.distributeFactors(b)), this.factors = b.length ? a.length ? [this.packTerms(a), this.packTerms(b).invert()] : [this.packTerms(b).invert()] : [this.packTerms(a)], 1 < this.factors.length ? 
      this : this.pushNegation().pushInversion().factors[0]) : this;
    };
    d.prototype.distributedOrSingle = function(a) {
      return this.distributed(a) || this.single(a);
    };
    d.prototype.distributed = function(a) {
      return a.every(function(a) {
        return !a.addition();
      });
    };
    d.prototype.single = function(a) {
      return 1 === a.length && a[0].addition();
    };
    d.prototype.distributeFactors = function(a) {
      var b;
      b = a[0].addition() ? a[0].terms.map(function(a) {
        return a.multiplication() ? a.pushNegation().factors : [a];
      }) : [[a[0]]];
      a.slice(1).forEach(function(a) {
        var c;
        return a.addition() ? 1 === b.length ? b = a.terms.map(function(a) {
          var c;
          c = b[0].map(function(a) {
            return a.clone();
          });
          a.multiplication() ? c.push.apply(c, a.pushNegation().factors) : c.push(a);
          return c;
        }) : b = b.reduce(function(b, c) {
          b.push.apply(b, a.terms.map(function(a) {
            var b;
            b = c.map(function(a) {
              return a.clone();
            });
            a.multiplication() ? b.push.apply(b, a.pushNegation().factors.map(function(a) {
              return a.clone();
            })) : b.push(a.clone());
            return b;
          }));
          return b;
        }, []) : 1 === b.length ? a.multiplication() ? (c = b[0]).push.apply(c, a.pushNegation().factors) : b[0].push(a) : b.forEach(function(c, d) {
          var e;
          return a.multiplication() ? (e = b[d]).push.apply(e, a.pushNegation().factors.map(function(a) {
            return a.clone();
          })) : b[d].push(a.clone());
        });
      });
      return b;
    };
    d.prototype.packTerms = function(a) {
      var b;
      b = ["computeConstants", "combineSimilar", "expand", "removeIdentity", "sort"];
      return (new CTATAdditionNode("PLUS", a.map(function(a) {
        return (new d("TIMES", a)).popNegation().simplifyNode(b);
      }))).popNegation().simplifyNode(b);
    };
    d.prototype.removeIdentity = function() {
      var a;
      this.popNegation();
      a = this.factors.filter(function(a) {
        return !a.constant(1);
      });
      this.factors = a.length ? a : this.factors.slice(0, 1);
      (a = this.factors.find(function(a) {
        return a.constant(0);
      })) && this.factors.every(function(a) {
        return !a.inverted() && (!a.power() || a.exponent.constant());
      }) && (this.factors = [a]);
      return 1 < this.factors.length ? this : this.pushNegation().pushInversion().factors[0];
    };
    d.prototype.sort = function() {
      this.spreadIdentity();
      this.factors = this.factors.sort(function(a, b) {
        return a.compare(b);
      });
      return this.stripIdentity();
    };
    d.prototype.spreadIdentity = function() {
      this.factors = this.factors.map(function(a) {
        return a.powerOne();
      });
      return this;
    };
    d.prototype.stripIdentity = function() {
      this.factors = this.factors.map(function(a) {
        return a.removeIdentity();
      });
      return this.popNegation();
    };
    d.prototype.multiplyOne = function() {
      this.factors[0].constant() || this.factors.unshift(new CTATConstantNode(1));
      return this.pushNegation();
    };
    d.prototype.compare = function(a, b) {
      var e, f;
      return (f = d.__super__.compare.apply(this, arguments)) || this.countVariables() - a.countVariables() || (e = a.factors.slice(0).reverse()) && this.factors.slice(0).reverse().some(function(a, c) {
        return f = a.compare(e[c], b);
      }) && f || this.compareSigns(a, b);
    };
    d.prototype.countVariables = function() {
      return this.factors.reduce(function(a, b) {
        return a + b.countVariables();
      }, 0);
    };
    d.prototype.pushNegation = function() {
      this.negated() && (this.negate(), this.factors[0].negate());
      return this;
    };
    d.prototype.popNegation = function() {
      this.factors.forEach(function(a) {
        return function(b) {
          if (b.negated()) {
            return a.negate(), b.negate();
          }
        };
      }(this));
      return this;
    };
    d.prototype.pushInversion = function() {
      this.inverted() && (this.invert(), this.factors.forEach(function(a) {
        return a.invert();
      }));
      return this;
    };
    d.prototype.even = function() {
      return !this.inverted() && this.factors.every(function(a) {
        return a.integer();
      }) && this.factors.some(function(a) {
        return a.even();
      });
    };
    return d;
  }(CTATTreeNode);
  "undefined" !== typeof module && null !== module ? module.exports = a : this.CTATMultiplicationNode = a;
}).call(this);
var CTATIntDivisionNode = {};
(function() {
  var a, b = function(a, b) {
    function c() {
      this.constructor = a;
    }
    for (var g in b) {
      f.call(b, g) && (a[g] = b[g]);
    }
    c.prototype = b.prototype;
    a.prototype = new c;
    a.__super__ = b.prototype;
    return a;
  }, f = {}.hasOwnProperty;
  a = function(a) {
    function d(a, b, d, e, f, q) {
      this.operator = a;
      this.dividend = b;
      this.divisor = d;
      this.parens = null != e ? e : 0;
      this.sign = null != f ? f : 1;
      this.exp = null != q ? q : 1;
    }
    b(d, a);
    d.prototype.clone = function() {
      return new d(this.operator, this.dividend.clone(), this.divisor.clone(), this.parens, this.sign, this.exp);
    };
    d.prototype.toString = function() {
      this.dividend.setParens(this.operator);
      this.divisor.setParens(this.operator, !0);
      return d.__super__.toString.call(this, "" + this.dividend.toString() + CTATTreeNode.toOperatorString(this.operator) + this.divisor.toString());
    };
    d.prototype.evaluate = function() {
      return d.__super__.evaluate.call(this, function() {
        switch(this.operator) {
          case "REM":
            return this.dividend.evaluate() % this.divisor.evaluate();
          case "IDIVIDE":
            return Math.floor(this.dividend.evaluate() / this.divisor.evaluate());
        }
      }.call(this));
    };
    d.prototype.equals = function(a) {
      return d.__super__.equals.call(this, a) && this.dividend.equals(a.dividend) && this.divisor.equals(a.divisor);
    };
    d.prototype.simplify = function(a) {
      this.methods = a;
      this.dividend = this.dividend.simplify(this.methods);
      this.divisor = this.divisor.simplify(this.methods);
      return d.__super__.simplify.apply(this, arguments);
    };
    d.prototype.computeConstants = function() {
      return this.dividend.constant() && this.divisor.constant() ? new CTATConstantNode(this.evaluate()) : this;
    };
    d.prototype.removeIdentity = function() {
      return this.divisor.constant(1) ? (this.intDivision() || (this.dividend = new CTATConstantNode(0)), this.pushNegation().pushInversion().dividend) : this.popNegation();
    };
    d.prototype.compare = function(a, b) {
      return d.__super__.compare.apply(this, arguments) || this.dividend.compare(a.dividend, b) || this.divisor.compare(a.divisor, b) || this.operator !== a.operator && (this.intDivision() && -1 || 1) || this.compareSigns(a, b);
    };
    d.prototype.countVariables = function() {
      return this.dividend.countVariables() + divisor.countVariables();
    };
    d.prototype.pushNegation = function() {
      this.intDivision() && this.negated() && (this.negate(), this.dividend.negate());
      return this;
    };
    d.prototype.pushInversion = function() {
      this.intDivision() && this.inverted() && (this.invert(), this.dividend.invert());
      return this;
    };
    d.prototype.popNegation = function() {
      this.divisor.negated() && (this.divisor.negate(), this.intDivision() && this.dividend.negate());
      return this;
    };
    d.prototype.even = function() {
      return !this.inverted && "REM" === this.operator && this.dividend.even() && this.divisor.even();
    };
    return d;
  }(CTATTreeNode);
  "undefined" !== typeof module && null !== module ? module.exports = a : this.CTATIntDivisionNode = a;
}).call(this);
var CTATUnaryNode = {};
(function() {
  var a, b = function(a, b) {
    function c() {
      this.constructor = a;
    }
    for (var g in b) {
      f.call(b, g) && (a[g] = b[g]);
    }
    c.prototype = b.prototype;
    a.prototype = new c;
    a.__super__ = b.prototype;
    return a;
  }, f = {}.hasOwnProperty;
  a = function(a) {
    function d(a, b, d, e, f) {
      this.operator = a;
      this.base = b;
      this.parens = null != d ? d : 0;
      this.sign = null != e ? e : 1;
      this.exp = null != f ? f : 1;
    }
    b(d, a);
    d.prototype.clone = function() {
      return new d(this.operator, this.base, this.parens, this.sign, this.exp);
    };
    d.prototype.toString = function() {
      return d.__super__.toString.call(this, "" + CTATTreeNode.toOperatorString(this.operator) + this.base.toString());
    };
    d.prototype.evaluate = function() {
      this.negation() && (this.sign = -this.sign);
      return d.__super__.evaluate.call(this, this.base.evaluate());
    };
    d.prototype.equals = function(a) {
      return d.__super__.equals.call(this, a) && this.base.equals(a.base);
    };
    d.prototype.simplify = function(a) {
      this.methods = a;
      this.base = this.base.simplify(this.methods);
      return d.__super__.simplify.apply(this, arguments);
    };
    d.prototype.flatten = function() {
      d.__super__.flatten.apply(this, arguments);
      this.negation() && this.negate();
      return this.pushNegation().pushInversion().base;
    };
    d.prototype.compare = function(a, b) {
      return d.__super__.compare.apply(this, arguments) || this.compareSigns(a, b);
    };
    d.prototype.countVariables = function() {
      return this.base.countVariables();
    };
    d.prototype.pushNegation = function() {
      this.negated() && (this.negate(), this.base.negate());
      return this;
    };
    d.prototype.pushInversion = function() {
      this.inverted() && (this.invert(), this.base.invert());
      return this;
    };
    return d;
  }(CTATTreeNode);
  "undefined" !== typeof module && null !== module ? module.exports = a : this.CTATUnaryNode = a;
}).call(this);
var CTATPowerNode = {};
(function() {
  var a, b = function(a, b) {
    function c() {
      this.constructor = a;
    }
    for (var g in b) {
      f.call(b, g) && (a[g] = b[g]);
    }
    c.prototype = b.prototype;
    a.prototype = new c;
    a.__super__ = b.prototype;
    return a;
  }, f = {}.hasOwnProperty;
  a = function(a) {
    function d(a, b, d, e, f, q) {
      this.operator = a;
      this.base = b;
      this.exponent = d;
      this.parens = null != e ? e : 0;
      this.sign = null != f ? f : 1;
      this.exp = null != q ? q : 1;
    }
    b(d, a);
    d.prototype.clone = function() {
      return new d(this.operator, this.base.clone(), this.exponent.clone(), this.parens, this.sign, this.exp);
    };
    d.prototype.toString = function() {
      this.base.setParens(this.operator);
      this.exponent.setParens(this.operator);
      return d.__super__.toString.call(this, "" + this.base.toString() + CTATTreeNode.toOperatorString(this.operator) + this.exponent.toString());
    };
    d.prototype.evaluate = function() {
      return d.__super__.evaluate.call(this, Math.pow(this.base.evaluate(), this.exponent.evaluate()));
    };
    d.prototype.equals = function(a) {
      return d.__super__.equals.call(this, a) && this.base.equals(a.base) && this.exponent.equals(a.exponent);
    };
    d.prototype.simplify = function(a) {
      this.methods = a;
      this.base = this.base.simplify(this.methods);
      this.exponent = this.exponent.simplify(this.methods);
      return d.__super__.simplify.apply(this, arguments);
    };
    d.prototype.flatten = function() {
      var a, b;
      d.__super__.flatten.apply(this, arguments);
      this.operator = "EXP";
      this.popNegation().popInversion();
      return this.base.power() ? (b = CTATTreeNode.diff(this.methods, ["flatten"]), a = this.base.exponent.multiplication() ? this.base.exponent.pushNegation().pushInversion().factors : [this.base.exponent], this.exponent.multiplication() ? a.push.apply(a, this.exponent.pushNegation().pushInversion().factors) : a.push(this.exponent), this.base.exponent = (new CTATMultiplicationNode("TIMES", a)).simplifyNode(b), this.pushBaseNegation().pushBaseInversion().base) : this;
    };
    d.prototype.computeConstants = function() {
      return this.base.constant() && (this.exponent.constant() || this.exponent.multiplication() && this.exponent.factors[0].constant()) ? (this.exponent.constant() ? (this.base = new CTATConstantNode(this.evaluate()), this.exponent = null) : (this.base = new CTATConstantNode((new d("EXP", this.base, this.exponent.factors.shift())).evaluate()), 1 === this.exponent.factors.length && (this.exponent = this.exponent.pushNegation().pushInversion().factors[0])), this.exponent ? this : this.pushBaseNegation().pushBaseInversion().base) : 
      this;
    };
    d.prototype.powerOne = function() {
      this.exponent = this.exponent.multiplyOne();
      return this.pushInversion();
    };
    d.prototype.expand = function() {
      var a, b, d;
      if (this.base.addition() && (this.exponent.integer() && 1 < this.exponent.value || this.exponent.multiplication() && this.exponent.factors[0].integer() && 1 < this.exponent.factors[0].value)) {
        this.exponent.integer() ? (a = this.exponent, this.exponent = null) : (a = this.exponent.factors.shift(), 1 === this.exponent.factors.length && (this.exponent = this.exponent.pushNegation().pushInversion().factors[0]));
        b = [this.base];
        d = 1;
        for (a = a.evaluate();1 <= a ? d < a : d > a;1 <= a ? ++d : --d) {
          b.push(this.base.clone());
        }
        this.base = (new CTATMultiplicationNode("TIMES", b)).simplifyNode(["distribute"]);
        return this.exponent ? this : this.pushBaseNegation().pushBaseInversion().base;
      }
      return this;
    };
    d.prototype.distribute = function() {
      var a;
      return this.base.multiplication() || this.exponent.addition() ? (a = this.base.multiplication() ? this.base.pushNegation().pushInversion().factors : [this.base], a = this.exponent.addition() ? a.reduce(function(a) {
        return function(b, c) {
          b.push.apply(b, a.exponent.terms.map(function(a) {
            return [c.clone(), a.clone()];
          }));
          return b;
        };
      }(this), []) : a.map(function(a) {
        return function(b) {
          return [b, a.exponent.clone()];
        };
      }(this)), this.base = this.packFactors(a), this.pushBaseNegation().pushBaseInversion().base) : this;
    };
    d.prototype.packFactors = function(a) {
      var b;
      b = CTATTreeNode.diff(this.methods, ["flatten"]);
      return new CTATMultiplicationNode("TIMES", a.map(function(a) {
        return (new d("EXP", a[0], a[1])).simplifyNode(b);
      }));
    };
    d.prototype.removeIdentity = function() {
      this.popInversion();
      if (this.exponent.constant(0)) {
        return this.base = new CTATConstantNode(1), this.pushBaseNegation().base;
      }
      if (this.base.constant(0)) {
        return this.pushBaseInversion().base;
      }
      if (this.exponent.constant(1)) {
        return this.pushBaseNegation().pushBaseInversion().base;
      }
      this.exponent = this.exponent.removeIdentity();
      return this;
    };
    d.prototype.compare = function(a, b) {
      return d.__super__.compare.apply(this, arguments) || (this.countVariables() - a.countVariables()) * (b ? -1 : 1) || this.exponent.compare(a.exponent, b) || this.base.compare(a.base, b) || this.compareSigns(a, b);
    };
    d.prototype.countVariables = function() {
      return this.base.countVariables() * (this.exponent.constant() ? Math.abs(this.exponent.evaluate()) : Infinity);
    };
    d.prototype.pushBaseNegation = function() {
      this.negated() && (this.negate(), this.base.negate());
      return this;
    };
    d.prototype.pushInversion = function() {
      this.inverted() && (this.invert(), this.exponent.negate());
      return this;
    };
    d.prototype.pushBaseInversion = function() {
      this.inverted() && (this.invert(), this.base.invert());
      return this;
    };
    d.prototype.popNegation = function() {
      this.base.negated() && this.exponent.constant() && (this.base.negate(), this.exponent.even() || this.negate());
      return this;
    };
    d.prototype.popInversion = function() {
      this.exponent.negated() && (this.invert(), this.exponent.negate());
      this.base.inverted() && (this.invert(), this.base.invert());
      return this;
    };
    d.prototype.even = function() {
      return !this.inverted() && this.base.even() && this.exponent.integer();
    };
    return d;
  }(CTATTreeNode);
  "undefined" !== typeof module && null !== module ? module.exports = a : this.CTATPowerNode = a;
}).call(this);
var CTATVariableNode = {};
(function() {
  var a, b = function(a, b) {
    function c() {
      this.constructor = a;
    }
    for (var g in b) {
      f.call(b, g) && (a[g] = b[g]);
    }
    c.prototype = b.prototype;
    a.prototype = new c;
    a.__super__ = b.prototype;
    return a;
  }, f = {}.hasOwnProperty;
  a = function(a) {
    function d(a, b, d, e, f) {
      this.variableTable = a;
      this.variable = b;
      this.parens = null != d ? d : 0;
      this.sign = null != e ? e : 1;
      this.exp = null != f ? f : 1;
      this.operator = "VAR";
    }
    b(d, a);
    d.prototype.clone = function() {
      return new d(this.variableTable, this.variable, this.parens, this.sign, this.exp);
    };
    d.prototype.toString = function() {
      return d.__super__.toString.call(this, this.variable);
    };
    d.prototype.evaluate = function() {
      var a;
      return d.__super__.evaluate.call(this, (null != (a = this.variableTable) ? a.get(this.variable) : void 0) || function() {
        try {
          return eval(this.variable);
        } catch (a) {
          return NaN;
        }
      }.call(this));
    };
    d.prototype.equals = function(a) {
      return d.__super__.equals.call(this, a) && this.variable === a.variable;
    };
    d.prototype.compare = function(a, b) {
      b = null != b ? -1 : 1;
      return d.__super__.compare.apply(this, arguments) || this.variable > a.variable && b || this.variable < a.variable && -b || this.compareSigns(a, b);
    };
    d.prototype.countVariables = function() {
      return 1;
    };
    return d;
  }(CTATTreeNode);
  "undefined" !== typeof module && null !== module ? module.exports = a : this.CTATVariableNode = a;
}).call(this);
var CTATConstantNode = {};
(function() {
  var a, b = function(a, b) {
    function c() {
      this.constructor = a;
    }
    for (var g in b) {
      f.call(b, g) && (a[g] = b[g]);
    }
    c.prototype = b.prototype;
    a.prototype = new c;
    a.__super__ = b.prototype;
    return a;
  }, f = {}.hasOwnProperty;
  a = function(a) {
    function d(a, b, d, e) {
      this.value = a;
      this.parens = null != b ? b : 0;
      this.sign = null != d ? d : 1;
      this.exp = null != e ? e : 1;
      this.operator = "CONST";
    }
    b(d, a);
    d.prototype.clone = function() {
      return new d(this.value, this.parens, this.sign, this.exp);
    };
    d.prototype.toString = function() {
      return d.__super__.toString.call(this, this.value.toString());
    };
    d.prototype.evaluate = function() {
      return d.__super__.evaluate.call(this, this.value);
    };
    d.prototype.equals = function(a) {
      return d.__super__.equals.call(this, a) && this.value === a.value;
    };
    d.prototype.multiplyOne = function() {
      return this;
    };
    d.prototype.powerOne = function() {
      return this;
    };
    d.prototype.compare = function(a, b) {
      b = null != b ? 1 : -1;
      return d.__super__.compare.apply(this, arguments) || Math.sign(Math.abs(this.evaluate()) - Math.abs(a.evaluate())) * b || this.compareSigns(a, b);
    };
    d.prototype.popNegation = function() {
      0 > this.value && (this.negate(), this.value = -this.value);
      return this;
    };
    d.prototype.constant = function(a) {
      return null == a || this.evaluate() === a;
    };
    d.prototype.integer = function() {
      return Math.floor(this.evaluate()) === this.value;
    };
    d.prototype.even = function() {
      return 0 === this.evaluate() % 2;
    };
    return d;
  }(CTATTreeNode);
  "undefined" !== typeof module && null !== module ? module.exports = a : this.CTATConstantNode = a;
}).call(this);
var CTATAlgebraGrammar = {}, parser = function() {
  function a() {
    this.yy = {};
  }
  var b = function(a, b, c, d) {
    c = c || {};
    for (d = a.length;d--;c[a[d]] = b) {
    }
    return c;
  }, f = [1, 6], e = [1, 7], d = [1, 10], c = [1, 11], g = [1, 12], h = [1, 13], l = [1, 21], m = [1, 22], q = [5, 7, 8, 9, 10, 11, 12, 13, 15, 26], p = [1, 23], n = [1, 24], x = [1, 26], u = [1, 27], w = [5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 20, 21, 24, 25, 26, 27, 28], z = [5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 20, 21, 23, 24, 25, 26, 27, 28], b = {trace:function() {
  }, yy:{}, symbols_:{error:2, expression:3, relational:4, EOF:5, arithmetic:6, LESS:7, GREATER:8, LESSEQUAL:9, GREATEREQUAL:10, EQUAL:11, NOTEQUAL:12, PLUS:13, term:14, MINUS:15, TIMES:16, signedfactor:17, DIVIDE:18, factor:19, IDIVIDE:20, REM:21, atom:22, EXP:23, SQRT:24, LPAREN:25, RPAREN:26, VARIABLE:27, NUMBER:28, $accept:0, $end:1}, terminals_:{2:"error", 5:"EOF", 7:"LESS", 8:"GREATER", 9:"LESSEQUAL", 10:"GREATEREQUAL", 11:"EQUAL", 12:"NOTEQUAL", 13:"PLUS", 15:"MINUS", 16:"TIMES", 18:"DIVIDE", 
  20:"IDIVIDE", 21:"REM", 23:"EXP", 24:"SQRT", 25:"LPAREN", 26:"RPAREN", 27:"VARIABLE", 28:"NUMBER"}, productions_:[0, [3, 2], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 1], [6, 3], [6, 3], [6, 1], [14, 3], [14, 3], [14, 2], [14, 3], [14, 3], [14, 1], [17, 2], [17, 2], [17, 1], [19, 3], [19, 2], [19, 1], [22, 3], [22, 1], [22, 1]], performAction:function(a, b, c, d, e, g, f) {
    b = g.length - 1;
    switch(e) {
      case 1:
        return g[b - 1];
      case 2:
        this.$ = new d.CTATRelationNode("LESS", g[b - 2], g[b]);
        break;
      case 3:
        this.$ = new d.CTATRelationNode("GREATER", g[b - 2], g[b]);
        break;
      case 4:
        this.$ = new d.CTATRelationNode("LESSEQUAL", g[b - 2], g[b]);
        break;
      case 5:
        this.$ = new d.CTATRelationNode("GREATEREQUAL", g[b - 2], g[b]);
        break;
      case 6:
        this.$ = new d.CTATRelationNode("EQUAL", g[b - 2], g[b]);
        break;
      case 7:
        this.$ = new d.CTATRelationNode("NOTEQUAL", g[b - 2], g[b]);
        break;
      case 8:
      ;
      case 11:
      ;
      case 17:
      ;
      case 20:
      ;
      case 23:
        this.$ = g[b];
        break;
      case 9:
        this.$ = new d.CTATAdditionNode("PLUS", [g[b - 2], g[b]]);
        break;
      case 10:
        this.$ = new d.CTATAdditionNode("MINUS", [g[b - 2], g[b]]);
        break;
      case 12:
        this.$ = new d.CTATMultiplicationNode("TIMES", [g[b - 2], g[b]]);
        break;
      case 13:
        this.$ = new d.CTATMultiplicationNode("DIVIDE", [g[b - 2], g[b]]);
        break;
      case 14:
        this.$ = new d.CTATMultiplicationNode("ITIMES", [g[b - 1], g[b]]);
        break;
      case 15:
        this.$ = new d.CTATIntDivisionNode("IDIVIDE", g[b - 2], g[b]);
        break;
      case 16:
        this.$ = new d.CTATIntDivisionNode("REM", g[b - 2], g[b]);
        break;
      case 18:
        this.$ = new d.CTATUnaryNode("UPLUS", g[b]);
        break;
      case 19:
        this.$ = new d.CTATUnaryNode("UMINUS", g[b]);
        break;
      case 21:
        this.$ = new d.CTATPowerNode("EXP", g[b - 2], g[b]);
        break;
      case 22:
        this.$ = new d.CTATPowerNode("SQRT", g[b], new d.CTATConstantNode(.5));
        break;
      case 24:
        this.$ = g[b - 1].addParens();
        break;
      case 25:
        this.$ = new d.CTATVariableNode(d.variableTable, a);
        break;
      case 26:
        this.$ = new d.CTATConstantNode(Number(a));
    }
  }, table:[{3:1, 4:2, 6:3, 13:f, 14:4, 15:e, 17:5, 19:8, 22:9, 24:d, 25:c, 27:g, 28:h}, {1:[3]}, {5:[1, 14]}, {5:[2, 8], 7:[1, 15], 8:[1, 16], 9:[1, 17], 10:[1, 18], 11:[1, 19], 12:[1, 20], 13:l, 15:m}, b(q, [2, 11], {22:9, 19:25, 16:p, 18:n, 20:x, 21:u, 24:d, 25:c, 27:g, 28:h}), b(w, [2, 17]), {13:f, 15:e, 17:28, 19:8, 22:9, 24:d, 25:c, 27:g, 28:h}, {13:f, 15:e, 17:29, 19:8, 22:9, 24:d, 25:c, 27:g, 28:h}, b(w, [2, 20]), b(w, [2, 23], {23:[1, 30]}), {13:f, 15:e, 17:31, 19:8, 22:9, 24:d, 25:c, 27:g, 
  28:h}, {6:32, 13:f, 14:4, 15:e, 17:5, 19:8, 22:9, 24:d, 25:c, 27:g, 28:h}, b(z, [2, 25]), b(z, [2, 26]), {1:[2, 1]}, {6:33, 13:f, 14:4, 15:e, 17:5, 19:8, 22:9, 24:d, 25:c, 27:g, 28:h}, {6:34, 13:f, 14:4, 15:e, 17:5, 19:8, 22:9, 24:d, 25:c, 27:g, 28:h}, {6:35, 13:f, 14:4, 15:e, 17:5, 19:8, 22:9, 24:d, 25:c, 27:g, 28:h}, {6:36, 13:f, 14:4, 15:e, 17:5, 19:8, 22:9, 24:d, 25:c, 27:g, 28:h}, {6:37, 13:f, 14:4, 15:e, 17:5, 19:8, 22:9, 24:d, 25:c, 27:g, 28:h}, {6:38, 13:f, 14:4, 15:e, 17:5, 19:8, 22:9, 
  24:d, 25:c, 27:g, 28:h}, {13:f, 14:39, 15:e, 17:5, 19:8, 22:9, 24:d, 25:c, 27:g, 28:h}, {13:f, 14:40, 15:e, 17:5, 19:8, 22:9, 24:d, 25:c, 27:g, 28:h}, {13:f, 15:e, 17:41, 19:8, 22:9, 24:d, 25:c, 27:g, 28:h}, {13:f, 15:e, 17:42, 19:8, 22:9, 24:d, 25:c, 27:g, 28:h}, b(w, [2, 14]), {13:f, 15:e, 17:43, 19:8, 22:9, 24:d, 25:c, 27:g, 28:h}, {13:f, 15:e, 17:44, 19:8, 22:9, 24:d, 25:c, 27:g, 28:h}, b(w, [2, 18]), b(w, [2, 19]), {13:f, 15:e, 17:45, 19:8, 22:9, 24:d, 25:c, 27:g, 28:h}, b(w, [2, 22]), {13:l, 
  15:m, 26:[1, 46]}, {5:[2, 2], 13:l, 15:m}, {5:[2, 3], 13:l, 15:m}, {5:[2, 4], 13:l, 15:m}, {5:[2, 5], 13:l, 15:m}, {5:[2, 6], 13:l, 15:m}, {5:[2, 7], 13:l, 15:m}, b(q, [2, 9], {22:9, 19:25, 16:p, 18:n, 20:x, 21:u, 24:d, 25:c, 27:g, 28:h}), b(q, [2, 10], {22:9, 19:25, 16:p, 18:n, 20:x, 21:u, 24:d, 25:c, 27:g, 28:h}), b(w, [2, 12]), b(w, [2, 13]), b(w, [2, 15]), b(w, [2, 16]), b(w, [2, 21]), b(z, [2, 24])], defaultActions:{14:[2, 1]}, parseError:function(a, b) {
    if (b.recoverable) {
      this.trace(a);
    } else {
      var c = function(a, b) {
        this.message = a;
        this.hash = b;
      };
      c.prototype = Error;
      throw new c(a, b);
    }
  }, parse:function(a) {
    var b = [0], c = [null], d = [], e = this.table, g = "", f = 0, h = 0, l = 0, n = d.slice.call(arguments, 1), m = Object.create(this.lexer), q = {}, x;
    for (x in this.yy) {
      Object.prototype.hasOwnProperty.call(this.yy, x) && (q[x] = this.yy[x]);
    }
    m.setInput(a, q);
    q.lexer = m;
    q.parser = this;
    "undefined" == typeof m.yylloc && (m.yylloc = {});
    x = m.yylloc;
    d.push(x);
    var u = m.options && m.options.ranges;
    this.parseError = "function" === typeof q.parseError ? q.parseError : Object.getPrototypeOf(this).parseError;
    for (var p, w, z, L, O = {}, Q, M;;) {
      z = b[b.length - 1];
      if (this.defaultActions[z]) {
        L = this.defaultActions[z];
      } else {
        if (null === p || "undefined" == typeof p) {
          p = m.lex() || 1, "number" !== typeof p && (p = this.symbols_[p] || p);
        }
        L = e[z] && e[z][p];
      }
      if ("undefined" === typeof L || !L.length || !L[0]) {
        var R;
        M = [];
        for (Q in e[z]) {
          this.terminals_[Q] && 2 < Q && M.push("'" + this.terminals_[Q] + "'");
        }
        R = m.showPosition ? "Parse error on line " + (f + 1) + ":\n" + m.showPosition() + "\nExpecting " + M.join(", ") + ", got '" + (this.terminals_[p] || p) + "'" : "Parse error on line " + (f + 1) + ": Unexpected " + (1 == p ? "end of input" : "'" + (this.terminals_[p] || p) + "'");
        this.parseError(R, {text:m.match, token:this.terminals_[p] || p, line:m.yylineno, loc:x, expected:M});
      }
      if (L[0] instanceof Array && 1 < L.length) {
        throw Error("Parse Error: multiple actions possible at state: " + z + ", token: " + p);
      }
      switch(L[0]) {
        case 1:
          b.push(p);
          c.push(m.yytext);
          d.push(m.yylloc);
          b.push(L[1]);
          p = null;
          w ? (p = w, w = null) : (h = m.yyleng, g = m.yytext, f = m.yylineno, x = m.yylloc, 0 < l && l--);
          break;
        case 2:
          M = this.productions_[L[1]][1];
          O.$ = c[c.length - M];
          O._$ = {first_line:d[d.length - (M || 1)].first_line, last_line:d[d.length - 1].last_line, first_column:d[d.length - (M || 1)].first_column, last_column:d[d.length - 1].last_column};
          u && (O._$.range = [d[d.length - (M || 1)].range[0], d[d.length - 1].range[1]]);
          z = this.performAction.apply(O, [g, h, f, q, L[1], c, d].concat(n));
          if ("undefined" !== typeof z) {
            return z;
          }
          M && (b = b.slice(0, -2 * M), c = c.slice(0, -1 * M), d = d.slice(0, -1 * M));
          b.push(this.productions_[L[1]][0]);
          c.push(O.$);
          d.push(O._$);
          L = e[b[b.length - 2]][b[b.length - 1]];
          b.push(L);
          break;
        case 3:
          return !0;
      }
    }
  }}, f = function() {
    return {EOF:1, parseError:function(a, b) {
      if (this.yy.parser) {
        this.yy.parser.parseError(a, b);
      } else {
        throw Error(a);
      }
    }, setInput:function(a, b) {
      this.yy = b || this.yy || {};
      this._input = a;
      this._more = this._backtrack = this.done = !1;
      this.yylineno = this.yyleng = 0;
      this.yytext = this.matched = this.match = "";
      this.conditionStack = ["INITIAL"];
      this.yylloc = {first_line:1, first_column:0, last_line:1, last_column:0};
      this.options.ranges && (this.yylloc.range = [0, 0]);
      this.offset = 0;
      return this;
    }, input:function() {
      var a = this._input[0];
      this.yytext += a;
      this.yyleng++;
      this.offset++;
      this.match += a;
      this.matched += a;
      a.match(/(?:\r\n?|\n).*/g) ? (this.yylineno++, this.yylloc.last_line++) : this.yylloc.last_column++;
      this.options.ranges && this.yylloc.range[1]++;
      this._input = this._input.slice(1);
      return a;
    }, unput:function(a) {
      var b = a.length, c = a.split(/(?:\r\n?|\n)/g);
      this._input = a + this._input;
      this.yytext = this.yytext.substr(0, this.yytext.length - b);
      this.offset -= b;
      a = this.match.split(/(?:\r\n?|\n)/g);
      this.match = this.match.substr(0, this.match.length - 1);
      this.matched = this.matched.substr(0, this.matched.length - 1);
      c.length - 1 && (this.yylineno -= c.length - 1);
      var d = this.yylloc.range;
      this.yylloc = {first_line:this.yylloc.first_line, last_line:this.yylineno + 1, first_column:this.yylloc.first_column, last_column:c ? (c.length === a.length ? this.yylloc.first_column : 0) + a[a.length - c.length].length - c[0].length : this.yylloc.first_column - b};
      this.options.ranges && (this.yylloc.range = [d[0], d[0] + this.yyleng - b]);
      this.yyleng = this.yytext.length;
      return this;
    }, more:function() {
      this._more = !0;
      return this;
    }, reject:function() {
      if (this.options.backtrack_lexer) {
        this._backtrack = !0;
      } else {
        return this.parseError("Lexical error on line " + (this.yylineno + 1) + ". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n" + this.showPosition(), {text:"", token:null, line:this.yylineno});
      }
      return this;
    }, less:function(a) {
      this.unput(this.match.slice(a));
    }, pastInput:function() {
      var a = this.matched.substr(0, this.matched.length - this.match.length);
      return (20 < a.length ? "..." : "") + a.substr(-20).replace(/\n/g, "");
    }, upcomingInput:function() {
      var a = this.match;
      20 > a.length && (a += this._input.substr(0, 20 - a.length));
      return (a.substr(0, 20) + (20 < a.length ? "..." : "")).replace(/\n/g, "");
    }, showPosition:function() {
      var a = this.pastInput(), b = Array(a.length + 1).join("-");
      return a + this.upcomingInput() + "\n" + b + "^";
    }, test_match:function(a, b) {
      var c, d;
      this.options.backtrack_lexer && (d = {yylineno:this.yylineno, yylloc:{first_line:this.yylloc.first_line, last_line:this.last_line, first_column:this.yylloc.first_column, last_column:this.yylloc.last_column}, yytext:this.yytext, match:this.match, matches:this.matches, matched:this.matched, yyleng:this.yyleng, offset:this.offset, _more:this._more, _input:this._input, yy:this.yy, conditionStack:this.conditionStack.slice(0), done:this.done}, this.options.ranges && (d.yylloc.range = this.yylloc.range.slice(0)));
      if (c = a[0].match(/(?:\r\n?|\n).*/g)) {
        this.yylineno += c.length;
      }
      this.yylloc = {first_line:this.yylloc.last_line, last_line:this.yylineno + 1, first_column:this.yylloc.last_column, last_column:c ? c[c.length - 1].length - c[c.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + a[0].length};
      this.yytext += a[0];
      this.match += a[0];
      this.matches = a;
      this.yyleng = this.yytext.length;
      this.options.ranges && (this.yylloc.range = [this.offset, this.offset += this.yyleng]);
      this._backtrack = this._more = !1;
      this._input = this._input.slice(a[0].length);
      this.matched += a[0];
      c = this.performAction.call(this, this.yy, this, b, this.conditionStack[this.conditionStack.length - 1]);
      this.done && this._input && (this.done = !1);
      if (c) {
        return c;
      }
      if (this._backtrack) {
        for (var e in d) {
          this[e] = d[e];
        }
      }
      return !1;
    }, next:function() {
      if (this.done) {
        return this.EOF;
      }
      this._input || (this.done = !0);
      var a, b, c;
      this._more || (this.match = this.yytext = "");
      for (var d = this._currentRules(), e = 0;e < d.length;e++) {
        if ((b = this._input.match(this.rules[d[e]])) && (!a || b[0].length > a[0].length)) {
          if (a = b, c = e, this.options.backtrack_lexer) {
            a = this.test_match(b, d[e]);
            if (!1 !== a) {
              return a;
            }
            if (this._backtrack) {
              a = !1;
            } else {
              return !1;
            }
          } else {
            if (!this.options.flex) {
              break;
            }
          }
        }
      }
      return a ? (a = this.test_match(a, d[c]), !1 !== a ? a : !1) : "" === this._input ? this.EOF : this.parseError("Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition(), {text:"", token:null, line:this.yylineno});
    }, lex:function() {
      var a = this.next();
      return a ? a : this.lex();
    }, begin:function(a) {
      this.conditionStack.push(a);
    }, popState:function() {
      return 0 < this.conditionStack.length - 1 ? this.conditionStack.pop() : this.conditionStack[0];
    }, _currentRules:function() {
      return this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1] ? this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules : this.conditions.INITIAL.rules;
    }, topState:function(a) {
      a = this.conditionStack.length - 1 - Math.abs(a || 0);
      return 0 <= a ? this.conditionStack[a] : "INITIAL";
    }, pushState:function(a) {
      this.begin(a);
    }, stateStackSize:function() {
      return this.conditionStack.length;
    }, options:{}, performAction:function(a, b, c, d) {
      switch(c) {
        case 1:
          return 25;
        case 2:
          return 26;
        case 3:
          return 23;
        case 4:
          return 23;
        case 5:
          return 24;
        case 6:
          return 24;
        case 7:
          return 16;
        case 8:
          return 20;
        case 9:
          return 18;
        case 10:
          return 21;
        case 11:
          return 15;
        case 12:
          return 13;
        case 13:
          return 9;
        case 14:
          return 10;
        case 15:
          return 7;
        case 16:
          return 8;
        case 17:
          return 11;
        case 18:
          return 12;
        case 19:
          return 28;
        case 20:
          return 28;
        case 21:
          return 27;
        case 22:
          return 5;
      }
    }, rules:[/^(?:\s+)/, /^(?:\()/, /^(?:\))/, /^(?:\*\*)/, /^(?:\^)/, /^(?:\|)/, /^(?:\u221a)/, /^(?:\*)/, /^(?:\/\/)/, /^(?:\/)/, /^(?:%)/, /^(?:-)/, /^(?:\+)/, /^(?:<=)/, /^(?:>=)/, /^(?:<)/, /^(?:>)/, /^(?:==)/, /^(?:!=)/, /^(?:(([0-9])+\.?([0-9])*|\.([0-9])+)([Ee][+-]?([0-9])+)?)/, /^(?:(0[Bb]([0-1])+|0[Oo]([0-7])+|0[Xx]([0-9A-Fa-f])+))/, /^(?:([A-Za-z]))/, /^(?:$)/], conditions:{INITIAL:{rules:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], inclusive:!0}}};
  }();
  b.lexer = f;
  a.prototype = b;
  b.Parser = a;
  return new a;
}();
"undefined" !== typeof require && "undefined" !== typeof exports && (exports.parser = parser, exports.Parser = parser.Parser, exports.parse = function() {
  return parser.parse.apply(parser, arguments);
}, exports.main = function(a) {
  a[1] || (console.log("Usage: " + a[0] + " FILE"), process.exit(1));
  a = require("fs").readFileSync(require("path").normalize(a[1]), "utf8");
  return exports.parser.parse(a);
}, "undefined" !== typeof module && require.main === module && exports.main(process.argv.slice(1)));
var CTATAlgebraParser = {};
(function() {
  var a;
  a = function() {
    function a(b) {
      this.parser = new parser.Parser;
      this.parser.yy = {CTATRelationNode:CTATRelationNode, CTATAdditionNode:CTATAdditionNode, CTATMultiplicationNode:CTATMultiplicationNode, CTATIntDivisionNode:CTATIntDivisionNode, CTATUnaryNode:CTATUnaryNode, CTATPowerNode:CTATPowerNode, CTATVariableNode:CTATVariableNode, CTATConstantNode:CTATConstantNode, CTATTreeNode:CTATTreeNode};
      this.parser.yy.variableTable = b;
    }
    a.none = ["simpleFlatten"];
    a.partial = ["flatten", "removeIdentity", "sort"];
    a.full = "flatten computeConstants combineSimilar expand distribute removeIdentity sort".split(" ");
    a.prototype.algParse = function(f) {
      try {
        return this.parser.parse(String(f)).simplify(a.none);
      } catch (e) {
        return null;
      }
    };
    a.prototype.algEvaluate = function(a) {
      try {
        return this.parser.parse(String(a)).evaluate();
      } catch (b) {
        return null;
      }
    };
    a.prototype.algPartialSimplify = function(f) {
      try {
        return this.parser.parse(String(f)).simplify(a.partial).toString();
      } catch (e) {
        return null;
      }
    };
    a.prototype.algSimplify = function(f) {
      try {
        return this.parser.parse(String(f)).simplify(a.full).toString();
      } catch (e) {
        return null;
      }
    };
    a.prototype.algValid = function(a) {
      return null != this.algParse(a);
    };
    a.prototype.algValued = function(a) {
      var b;
      return null != (b = this.algEvaluate(a)) ? !isNaN(b) : null;
    };
    a.prototype.algPartialSimplified = function(a) {
      var b, d;
      return null != (b = this.algPartialSimplify(a)) && null != (d = this.algParse(a)) ? b.toString() === d.toString() : null;
    };
    a.prototype.algSimplified = function(a) {
      var b, d;
      return null != (b = this.algSimplify(a)) && null != (d = this.algParse(a)) ? b.toString() === d.toString() : null;
    };
    a.prototype.algIdentical = function(a, b) {
      var d, c;
      return null != (d = this.algParse(a)) && null != (c = this.algParse(b)) ? d.equals(c) : null;
    };
    a.prototype.algEqual = function(a, b) {
      var d, c;
      return null != (d = this.algEvaluate(a)) && null != (c = this.algEvaluate(b)) ? d === c : null;
    };
    a.prototype.algPartialEquivalent = function(a, b) {
      var d, c;
      return null != (d = this.algPartialSimplify(a)) && null != (c = this.algPartialSimplify(b)) ? d === c : null;
    };
    a.prototype.algEquivalent = function(a, b) {
      var d, c;
      return null != (d = this.algSimplify(a)) && null != (c = this.algSimplify(b)) ? d === c : null;
    };
    a.prototype.isAlgValid = a.prototype.algValid;
    a.prototype.algEval = a.prototype.algEvaluate;
    a.prototype.algStrictEquivTermsSameOrder = a.prototype.algPartialEquivalent;
    a.prototype.algEquivTermsSameOrder = a.prototype.algPartialEquivalent;
    a.prototype.algStrictEquivTerms = a.prototype.algPartialEquivalent;
    a.prototype.algEquivTerms = a.prototype.algPartialEquivalent;
    a.prototype.algEquiv = a.prototype.algEquivalent;
    a.prototype.isSimplified = a.prototype.algSimplified;
    a.prototype.calc = a.prototype.algEvaluate;
    a.prototype.calca = function(a) {
      return (+this.algEvaluate(a)).toFixed(2);
    };
    a.prototype.simplify = a.prototype.algSimplify;
    a.prototype.algebraicEqual = a.prototype.algEqual;
    a.prototype.patternMatches = a.prototype.algIdentical;
    a.prototype.polyTermsEqual = function(f, e) {
      return this.parser.parse(f).simplify(a.partial).equals(this.parser.parse(e).simplify(a.partial));
    };
    a.prototype.algebraicMatches = a.prototype.algEquivalent;
    a.prototype.expressionMatches = a.prototype.algEquivalent;
    return a;
  }();
  "undefined" !== typeof module && null !== module ? module.exports = a : this.CTATAlgebraParser = a;
}).call(this);
var CTATFormulaFunctions = {};
(function() {
  var a, b, f, e, d, c, g, h, l, m, q, p = [].slice;
  d = /^(\d+)?(?:$|(?:\s|^)(\d+)\/(\d+)$)/;
  e = /^\d+(\.\d\d)?$/;
  c = RegExp("((\\d+)\\.?(\\d+)?|\\.(\\d+))([Ee]([+-]?\\d+))?", "g");
  m = /^[+-]?((\d+)\.?(\d+)?|\.(\d+))([Ee]([+-]?\d+))?$/;
  l = /^\s*\(\s*([+-]?((\d+)\.?(\d+)?|\.(\d+))([Ee]([+-]?\d+))?)\s*\,\s*([+-]?((\d+)\.?(\d+)?|\.(\d+))([Ee]([+-]?\d+))?)\s*\)\s*$/;
  h = /([bcdfghjklmnpqrstvwxz]|qu)y$/;
  g = /([bcdfghjklmnpqrstvwxz]o|[sc]h|s)$/;
  q = function(a, b) {
    var c;
    null == b && (b = !1);
    var d, g, e, f;
    e = null != (c = a[4]) ? c : a[2] + (a[3] || "");
    f = [];
    d = 0;
    for (g = e.length;d < g;d++) {
      c = e[d], (b || (b = "0" !== c)) && f.push(c);
    }
    return f.length;
  };
  f = function(a) {
    return (a[4] || a[3] || "").length - +(a[6] || 0);
  };
  b = function(a, b, c) {
    var d, g;
    return isNaN(d = +a) || isNaN(g = +b) ? c(String(a).toLowerCase(), String(b).toLowerCase()) : c(d, g);
  };
  a = function() {
    function a() {
    }
    a.printf = ("undefined" !== typeof window && null !== window ? window : global).sprintf;
    a.sum = function() {
      return (1 <= arguments.length ? p.call(arguments, 0) : []).reduce(function(a, b) {
        return a + +b;
      }, 0);
    };
    a.mod = function(a, b) {
      return Math.round(a) % Math.round(b);
    };
    a.modf = function(a, b) {
      return a % b;
    };
    a.IEEEremainder = a.modf;
    a.isFactor = function(a, b) {
      return 1 !== +a && 0 === b % a;
    };
    a.isMultiple = function(a, b) {
      return 0 === a % b;
    };
    a.isUnit = function(a) {
      return 1 === +a;
    };
    a.isAny = function(a, b) {
      return this.isFactor(a, b) || this.isMultiple(a, b) || this.isUnit(a);
    };
    a.gcf = function(a, b) {
      var c;
      c = [Math.abs(a), Math.abs(b)];
      a = c[0];
      for (b = c[1];0 < b;) {
        c = [b, a % b], a = c[0], b = c[1];
      }
      return a;
    };
    a.lcm = function(a, b) {
      return Math.abs(a * b) / this.gcf(a, b);
    };
    a.integerInRange = function(a, b, c) {
      var d;
      null == b && (b = -Infinity);
      null == c && (c = Infinity);
      return Math.round(b) <= (d = Math.round(a)) && d <= Math.round(c);
    };
    a.fmtDecimal = function(a, b) {
      null == b && (b = 2);
      return (+a).toFixed(Math.round(+b));
    };
    a.fmtNormal = function(a, b) {
      null == b && (b = 6);
      return this.fmtDecimal(a, b).replace(/\.0+$|(\..+?)0+$/, "$1");
    };
    a.fmtDollar = function(a, b) {
      null == b && (b = "");
      a = this.fmtDecimal(a);
      b = b.toLowerCase();
      0 <= b.indexOf("i") && (a = a.replace(/\.00$/, ""));
      return 0 <= b.indexOf("d") ? "$" + a : a;
    };
    a.dollarEquals = function() {
      var a, b;
      a = arguments[0];
      b = 2 <= arguments.length ? p.call(arguments, 1) : [];
      a = this.fmtDollar(a, "i");
      return b.some(function(b) {
        return function(c) {
          return a === b.fmtDollar(c, "i");
        };
      }(this));
    };
    a.matchWithPrecision = function(a, c) {
      var d, g;
      return (d = String(a).match(m)) && (g = String(c).match(m)) && q(d) === q(g) && b(a, c, function(a, b) {
        return a === b;
      });
    };
    a.matchWithoutPrecision = function(a, c) {
      var d, g;
      return (d = String(a).match(m)) && (g = String(c).match(m)) && (a = q(d) > q(g) ? (+a).toFixed(f(g)) : String(a)) && b(a, c, function(a, b) {
        return a === b;
      });
    };
    a.constantsConform = function() {
      var a, b;
      a = arguments[0];
      b = 2 <= arguments.length ? p.call(arguments, 1) : [];
      b = b.map(function(a) {
        return "string" === typeof a ? new RegExp("^" + a + "$", "i") : a;
      });
      return (a.match(c) || []).every(function(a) {
        return b.some(function(b) {
          return b.test(a);
        });
      });
    };
    a.constantsDollar = function(a) {
      return this.constantsConform(a, e);
    };
    a.isNumber = function(a, b, c) {
      null == b && (b = !0);
      return (b || "number" === typeof a) && !isNaN(a = +a) && (!c || a === Math.round(a));
    };
    a.isInteger = function(a, b) {
      return this.isNumber(a, b, !0);
    };
    a.isVar = function(a) {
      return /^\s*[a-zA-Z]\s*$/.test(a);
    };
    a.makeFraction = function(a, b, c) {
      null != b && null == c && (c = [0, a, b], a = c[0], b = c[1], c = c[2]);
      a = +a || 0;
      b = +b || 0;
      c = +c || 1;
      return this.isInteger(a) && this.isInteger(b) && this.isInteger(c) ? (a ? a + (b ? " " : "") : "") + (b ? b + (1 === c ? "" : "/" + c) : "") : null;
    };
    a.fractionMake = a.makeFraction;
    a.getWhole = function(a) {
      return null != (a = a.match(d)) ? a[1] || "0" : null;
    };
    a.getNumerator = function(a) {
      return null != (a = a.match(d)) ? a[2] || "0" : null;
    };
    a.getDividend = a.getNumerator;
    a.getDenominator = function(a) {
      return null != (a = a.match(d)) ? a[3] || "1" : null;
    };
    a.getDivisor = a.getDenominator;
    a.convertToMixed = function(a) {
      return null != (a = a.match(d)) ? (a[1] = (+a[1] || 0) + Math.floor((+a[2] || 0) / (+a[3] || 1)), a[2] = (+a[2] || 0) % (+a[3] || 1), this.makeFraction(a[1], a[2], a[3])) : null;
    };
    a.convertToImproper = function(a) {
      return null != (a = a.match(d)) ? (a[2] = (+a[1] || 0) * (+a[3] || 1) + (+a[2] || 0), a[1] = 0, null == a[3] && (a[3] = 1), this.makeFraction(a[1], a[2], a[3])) : null;
    };
    a.evaluateFraction = function(a) {
      return null != (a = a.match(d)) ? ((+a[1] || 0) * (+a[3] || 1) + (+a[2] || 0)) / (+a[3] || 1) : null;
    };
    a.divEvaluate = a.evaluateFraction;
    a.simplifyFraction = function(a) {
      var b;
      return null != (a = a.match(d)) ? (null != a[1] && null != a[2] && (a[1] = +a[1] + Math.floor(+a[2] / +a[3]), a[2] = +a[2] % +a[3]), b = null != a[2] ? this.gcf(+a[2], +a[3]) : 1, this.makeFraction(a[1], a[2] / b, a[3] / b)) : null;
    };
    a.fractionsimplify = a.simplifyFraction;
    a.simplifyMixed = a.simplifyFraction;
    a.simplifiedFraction = function(a) {
      var b;
      return null != (b = this.simplifyFraction(a)) ? b === a : null;
    };
    a.isSimplifiedMixed = a.simplifiedFraction;
    a.fractionEquals = function(a, b) {
      var c, d;
      return null != (c = this.evaluateFraction(a)) && null != (d = this.evaluateFraction(b)) ? c === d : null;
    };
    a.simplifiedFractionEquals = function(a, b) {
      var c, d;
      return null != (c = this.simplifiedFraction(a)) && null != (d = this.simplifiedFraction(b)) ? c && d && this.fractionEquals(a, b) : null;
    };
    a.rationalEquals = function(a, b) {
      return this.matchWithoutPrecision(+b || this.evaluateFraction(b), +a || this.evaluateFraction(a));
    };
    a.concat = function() {
      return (1 <= arguments.length ? p.call(arguments, 0) : []).reduce(function(a, b) {
        return a + b;
      }, "");
    };
    a.quote = function(a) {
      return '"' + a + '"';
    };
    a.compact = function(a) {
      return a.replace(/\s*/g, "");
    };
    a.replaceAll = function(a, b, c) {
      return a.replace(new RegExp(b, "g"), c);
    };
    a.regExMatch = function(a, b, c) {
      return ("string" === typeof a ? new RegExp(a, c) : a).test(b);
    };
    a.rm1coeff = function(a) {
      if (null != a) {
        return a.replace(/(^|[^0-9])1([a-zA-Z])/g, "$1$2");
      }
    };
    a.setMatches = function(a, b, c) {
      var d, g;
      d = a.split(c);
      g = b.split(c);
      return g.every(function(a) {
        return d.includes(a);
      }) && d.every(function(a) {
        return g.includes(a);
      });
    };
    a.pointInRange = function(a, b, c, d, g) {
      var e, f, h;
      if (e = null != b ? "function" === typeof b.match ? b.match(l) : void 0 : void 0) {
        g = [e[1], e[8], c, d], b = g[0], c = g[1], d = g[2], g = g[3];
      }
      null == d && (d = 0);
      null == g && (g = d);
      return (e = a.match(l)) && b - d <= (f = e[1]) && f <= +b + +d && c - g <= (h = e[8]) && h <= +c + +g;
    };
    a.plural = function(a, b, c, d) {
      var e;
      if (!b || 2 > a) {
        return b;
      }
      null == c && (c = h.test(e = b.toLowerCase()) ? "y" : "");
      if (!b.endsWith(c)) {
        return b;
      }
      null == d && (d = h.test(e) ? "ies" : g.test(e) ? "es" : "s");
      c.length && (b = b.split(c)[0]);
      return b + (/[A-Z]/.test(b[b.length - 1]) ? d.toUpperCase() : d);
    };
    a.totalTableDec = function(a, b, c, d) {
      return 1E3 * (+a || 0) + 100 * (+b || 0) + 10 * (+c || 0) + (+d || 0);
    };
    a.columnCell = function(a, b, c, d, g, e, f, h, l, m) {
      switch(l) {
        case "r1c1":
        ;
        case "r2c1":
        ;
        case "r3c1":
          return m ? a : g;
        case "r1c2":
        ;
        case "r2c2":
        ;
        case "r3c2":
          return m ? b : e;
        case "r1c3":
        ;
        case "r2c3":
        ;
        case "r3c3":
          return m ? c : f;
        case "r1c4":
        ;
        case "r2c4":
        ;
        case "r3c4":
          return m ? d : h;
        default:
          return 0;
      }
    };
    a.first = function() {
      return (1 <= arguments.length ? p.call(arguments, 0) : [])[0];
    };
    a.last = function() {
      var a;
      a = 1 <= arguments.length ? p.call(arguments, 0) : [];
      return a[a.length - 1];
    };
    a.chooseRandomly = function() {
      var a;
      a = 1 <= arguments.length ? p.call(arguments, 0) : [];
      return a[Math.floor(Math.random() * a.length)];
    };
    a.firstNonNull = function() {
      var a;
      return null != (a = (1 <= arguments.length ? p.call(arguments, 0) : []).find(function(a) {
        return null != a;
      })) ? a : null;
    };
    a.valueOrZero = function() {
      var a;
      return null != (a = (1 <= arguments.length ? p.call(arguments, 0) : []).find(function(a) {
        return null != a;
      })) ? a : 0;
    };
    a.hasValue = function() {
      return (1 <= arguments.length ? p.call(arguments, 0) : []).every(function(a) {
        return null != a;
      });
    };
    a.equals = function() {
      var a, b, c;
      b = arguments[0];
      c = 2 <= arguments.length ? p.call(arguments, 1) : [];
      return isNaN(a = +b) ? c.every(function(a) {
        return b === a;
      }) : c.every(function(b) {
        return a === +b;
      });
    };
    a.memberOf = function() {
      var a, b, c;
      b = arguments[0];
      c = 2 <= arguments.length ? p.call(arguments, 1) : [];
      return isNaN(a = +b) ? c.some(function(a) {
        return b === a;
      }) : c.some(function(b) {
        return a === +b;
      });
    };
    a.greaterThan = function(a, c) {
      return b(a, c, function(a, b) {
        return a > b;
      });
    };
    a.lessThan = function(a, c) {
      return b(a, c, function(a, b) {
        return a < b;
      });
    };
    a.greaterThanOrEqual = function(a, c) {
      return b(a, c, function(a, b) {
        return a >= b;
      });
    };
    a.lessThanOrEqual = function(a, c) {
      return b(a, c, function(a, b) {
        return a <= b;
      });
    };
    a.equal = function(a, c) {
      return b(a, c, function(a, b) {
        return a === b;
      });
    };
    a.notEqual = function(a, c) {
      return b(a, c, function(a, b) {
        return a !== b;
      });
    };
    a.and = function() {
      return (1 <= arguments.length ? p.call(arguments, 0) : []).reduce(function(a, b) {
        return a && b;
      }, !0);
    };
    a.or = function() {
      return (1 <= arguments.length ? p.call(arguments, 0) : []).reduce(function(a, b) {
        return a || b;
      }, !1);
    };
    a.not = function(a) {
      return !a;
    };
    a.ifThen = function(a, b, c) {
      return a ? b : c;
    };
    a.assign = function(a, b) {
      var c, d, g, e, f, h;
      h = "undefined" !== typeof window && null !== window ? window : global;
      d = a.split(".");
      g = 2 <= d.length ? p.call(d, 0, c = d.length - 1) : (c = 0, []);
      e = d[c++];
      c = 0;
      for (f = g.length;c < f;c++) {
        d = g[c], h = null != h[d] ? h[d] : h[d] = {};
      }
      return h[e] = b;
    };
    a.goToState = function(a) {
      return CTAT.ToolTutor.tutor.receiveFromInterface((new CTATTutoringServiceMessageBuilder).createInterfaceActionMessage(CTATMessage.makeTransactionId(), new CTATSAI("_tutor", "goToState", a)));
    };
    a.performInterfaceAction = function(a, b, c) {
      return CTAT.ToolTutor.sendToInterface((new CTATTutoringServiceMessageBuilder).createInterfaceActionMessage(CTATMessage.makeTransactionId(), new CTATSAI(a, b, c)));
    };
    return a;
  }();
  "undefined" !== typeof module && null !== module ? module.exports = a : this.CTATFormulaFunctions = a;
}).call(this);
var CTATFormulaParser = {};
(function() {
  var a, b, f, e = [].slice, d = [].indexOf || function(a) {
    for (var b = 0, d = this.length;b < d;b++) {
      if (b in this && this[b] === a) {
        return b;
      }
    }
    return -1;
  };
  b = /(?!["'])([A-Za-z][\w\.]*)(?![\w"'(])/g;
  f = "abstract arguments boolean break byte case catch char class const continue debugger default delete do double else enum eval export extends false final finally float for function goto if implements import in instanceof int interface let long native new null package private protected public return short static super switch synchronized this throw throws transient true try typeof var void volatile while with yield Array Date eval function hasOwnProperty Infinity isFinite isNaN isPrototypeOf length Math NaN name Number Object prototype String toString undefined valueOf".split(" ");
  a = function() {
    function a(b) {
      var c, d, f;
      this.variableTable = b;
      this.algebraParser = new CTATAlgebraParser;
      this.keys = [];
      this.values = [];
      f = "EPSILON MAX_VALUE MIN_VALUE POSITIVE_INFINITY NEGATIVE_INFINITY isFinite isInteger isNaN parseFloat parseInt".split(" ");
      b = 0;
      for (d = f.length;b < d;b++) {
        c = f[b], this.keys.push(c), this.values.push(Number[c]);
      }
      f = "toExponential toFixed toLocaleString toPrecision toString valueOf".split(" ");
      b = 0;
      for (d = f.length;b < d;b++) {
        c = f[b], this.keys.push(c), this.values.push(function(a) {
          return function() {
            var b, c;
            c = arguments[0];
            b = 2 <= arguments.length ? e.call(arguments, 1) : [];
            return a.apply(c, b);
          };
        }(Number.prototype[c]));
      }
      f = "E LN10 LN2 LOG10E LOG2E PI SQRT1_2 SQRT2 abs acos acosh asin asinh atan atanh atan2 cbrt ceil clz32 cos cosh exp expm1 floor fround hypot imul log log10 log1p log2 max min pow random round sign sin sinh sqrt tan tanh trunc".split(" ");
      b = 0;
      for (d = f.length;b < d;b++) {
        c = f[b], this.keys.push(c), this.values.push(Math[c]);
      }
      f = ["fromCharCode", "fromCodePoint"];
      b = 0;
      for (d = f.length;b < d;b++) {
        c = f[b], this.keys.push(c), this.values.push(String[c]);
      }
      f = "charAt charCodeAt codePointAt concat contains endsWith indexOf lastIndexOf localeCompare match repeat replace search slice split startsWith substr substring toLocaleLowerCase toLocaleUpperCase toLowerCase toUpperCase trim valueOf".split(" ");
      d = 0;
      for (b = f.length;d < b;d++) {
        c = f[d], this.keys.push(c), this.values.push(function(a) {
          return function() {
            var b, c;
            c = arguments[0];
            b = 2 <= arguments.length ? e.call(arguments, 1) : [];
            return a.apply(c, b);
          };
        }(String.prototype[c]));
      }
      this.keys.push("length");
      this.values.push(function(a) {
        return a.length;
      });
      f = "algParse algEvaluate algPartialSimplify algSimplify algValid algValued algPartialSimplified algSimplified algIdentical algEqual algPartialEquivalent algEquivalent isAlgValid algEval algStrictEquivTermsSameOrder algEquivTermsSameOrder algStrictEquivTerms algEquivTerms algEquiv isSimplified calc calca simplify algebraicEqual patternMatches polyTermsEqual algebraicMatches expressionMatches".split(" ");
      d = 0;
      for (b = f.length;d < b;d++) {
        c = f[d], this.keys.push(c), this.values.push(function(a, b) {
          return function() {
            var c;
            c = 1 <= arguments.length ? e.call(arguments, 0) : [];
            return a.apply(b, c);
          };
        }(this.algebraParser[c], this.algebraParser));
      }
      for (c in CTATFormulaFunctions) {
        this.keys.push(c), this.values.push(function(a, b) {
          return function() {
            var c;
            c = 1 <= arguments.length ? e.call(arguments, 0) : [];
            return a.apply(b, c);
          };
        }(CTATFormulaFunctions[c], CTATFormulaFunctions));
      }
    }
    a.prototype.evaluate = function(a, c, l, m) {
      var q, p, n, x, u, w, z, t;
      try {
        u = "undefined" !== typeof window && null !== window ? window : global;
        q = function() {
          var a;
          a = [];
          for (n in u) {
            a.push(n);
          }
          return a;
        }().concat(["selection", "action", "input"]);
        z = null != (w = a.match(b)) ? w : [];
        p = 0;
        for (x = z.length;p < x;p++) {
          n = z[p], 0 > d.call(f, n) && CTATFormulaFunctions.assign(n, void 0);
        }
        for (n in t = this.variableTable.getTable()) {
          u[n] = t[n];
        }
        return function(a, b, c) {
          c.prototype = a.prototype;
          c = new c;
          a = a.apply(c, b);
          return Object(a) === a ? a : c;
        }(Function, ["selection", "action", "input"].concat(e.call(this.keys), ["return " + a.replace(/\\/g, "\\\\")]), function() {
        }).apply(u, [c, l, m].concat(e.call(this.values)));
      } catch (D) {
        return console.log(D), null;
      } finally {
        for (n in u) {
          null != n && 0 > d.call(q, n) && (t[n] = u[n], delete u[n]);
        }
      }
    };
    a.prototype.interpolateSplitPattern = /<%=|%>/;
    a.prototype.interpolate = function(a, b, c, d) {
      var e, f, n, x, u;
      x = a.split(this.interpolateSplitPattern);
      u = [];
      a = f = 0;
      for (n = x.length;f < n;a = ++f) {
        e = x[a], u.push(a % 2 ? this.evaluate(e, b, c, d) : e);
      }
      return u.join("");
    };
    return a;
  }();
  "undefined" !== typeof module && null !== module ? module.exports = a : this.CTATFormulaParser = a;
}).call(this);
var CTATSingleMatcher = function(a, b) {
  CTATMatcher.call(this, !0, a, b);
  var f = this, e = "", d = "";
  this.getSingle = function(a) {
    return e;
  };
  this.setSingle = function(a) {
    null === a || "undefined" === typeof a ? f.ctatdebug('CTATSingleMatcher --\x3e bad argument "' + a + '" to setSingle()') : e = a;
  };
  this.toString = function() {
    console.log("Error: CTATSingleMatcher.toString() called: should be overridden");
  };
  this.matchSingle = function(a) {
    console.log("Error: CTATSingleMatcher.matchSingle(" + a + ") called: should be overridden");
    return !1;
  };
  this.getReplacementFormula = function() {
    return d;
  };
  this.setReplacementFormula = function(a) {
    d = a ? a : "";
  };
  this.evaluateReplacement = function(a, b, e) {
    e = null;
    if (!d) {
      return e;
    }
    f.ctatdebug("CTATSingleMatcher.evaluateReplacement(" + a + ", " + b + ")");
    var l = a.getSelection(), m = a.getAction();
    a = CTATVariableTable.standardizeType(a.getInput());
    b || (b = new CTATVariableTable);
    b = new CTATFormulaParser(b);
    f.ctatdebug("CTATSingleMatcher calling CTATFormulaParser.evaluate(" + d + ", " + l + ", " + m + ", " + a + ")");
    try {
      e = b.evaluate(d, l, m, a);
    } catch (q) {
      f.ctatdebug("CTATSingleMatcher error from CTATFormulaParser.evaluate(" + d + ") " + q.name + ": " + q.message), e = null;
    }
    f.ctatdebug("CTATSingleMatcher.evaluateReplacement() returns " + e + ", type " + typeof e);
    return e;
  };
};
CTATSingleMatcher.prototype = Object.create(CTATMatcher.prototype);
CTATSingleMatcher.prototype.constructor = CTATSingleMatcher;
CTATSingleMatcher.prototype.matchConcatenation = function(a) {
  a = this.array2ConcatString(a);
  return this.matchSingle(a);
};
CTATSingleMatcher.prototype.match = function(a, b, f, e) {
  return this.matchConcatenation(a);
};
CTATSingleMatcher.prototype.setParameter = function(a, b, f) {
  this.ctatdebug("CTATSingleMatcher.setParameter(" + a + ", " + b + ", " + f + ") calling\n  " + this.setSingle.toString());
  this.setSingle(a);
};
"undefined" !== typeof module && (module.exports = CTATSingleMatcher);
var CTATAnyMatcher = function(a, b) {
  CTATSingleMatcher.call(this, a, !0);
  this.toString = function() {
    return "*";
  };
  this.matchSingle = function(a) {
    return !0;
  };
};
CTATAnyMatcher.prototype = Object.create(CTATSingleMatcher.prototype);
CTATAnyMatcher.prototype.constructor = CTATAnyMatcher;
"undefined" !== typeof module && (module.exports = CTATAnyMatcher);
var CTATExactMatcher = function(a, b) {
  CTATSingleMatcher.call(this, a, !0);
  var f = this;
  this.toString = function() {
    return f.getSingle().toString();
  };
  this.matchSingle = function(a) {
    var b = f.getSingle();
    ctatdebug("CTATExactMatcher --\x3e in matchSingle: s = " + a + ", singleval = " + b + ", caseInsensitive " + f.getCaseInsensitive() + ", " + typeof f.getCaseInsensitive());
    return f.getCaseInsensitive() ? String(a).toUpperCase() == String(b).toUpperCase() : String(a) == String(b);
  };
};
CTATExactMatcher.prototype = Object.create(CTATSingleMatcher.prototype);
CTATExactMatcher.prototype.constructor = CTATExactMatcher;
"undefined" !== typeof module && (module.exports = CTATExactMatcher);
var CTATExampleTracerException = function(a) {
  CTATBase.call(this, "CTATExampleTracerException", "");
  this.toString = function() {
    return a;
  };
};
CTATExampleTracerException.prototype = Object.create(CTATBase.prototype);
CTATExampleTracerException.prototype.constructor = CTATExampleTracerException;
"undefined" !== typeof module && (module.exports = CTATExampleTracerException);
var CTATExpressionMatcher = function(a, b) {
  function f(a, b, d, g, f) {
    h.ctatdebug("CTATExpressionMatcher.testVector[" + g + "](" + a + ", " + b + ", " + d + ", " + f + ") to call evaluate");
    var x = CTATVariableTable.standardizeType(d);
    h.ctatdebug("CTATExpressionMatcher.testVector typeof input " + typeof d + "; inputConv " + x + ", typeof " + typeof x);
    d = h.evaluate(a, b, x, f);
    h.ctatdebug("CTATExpressionMatcher.testVector evaluate(" + a + ", " + b + ", " + x + ", " + f + ") returned " + d + ", type " + typeof d);
    f = null;
    switch(g) {
      case CTATMatcher.SELECTION:
        f = a;
        break;
      case CTATMatcher.ACTION:
        f = b;
        break;
      case CTATMatcher.INPUT:
      ;
      case CTATMatcher.NON_SINGLE:
        f = x;
    }
    c = f;
    h.ctatdebug("CTATExpressionMatcher.testVector comparee " + f + ", type " + typeof f + ", relation " + e + "( " + CTATExpressionMatcher.RELATIONS[e] + " )");
    try {
      switch(e) {
        case CTATExpressionMatcher.BOOL_RELATION:
          return !!d;
        case CTATExpressionMatcher.EQ_RELATION:
          if (null == f) {
            return null == d;
          }
          if (null == d) {
            break;
          }
          return h.compareNumberOrString(f, d, e);
        case CTATExpressionMatcher.NOT_EQ_RELATION:
          return null == f ? null != d : null == d ? !0 : h.compareNumberOrString(f, d, e);
        case CTATExpressionMatcher.LT_RELATION:
        ;
        case CTATExpressionMatcher.GT_RELATION:
          if (null == f || null == d) {
            break;
          }
          return h.compareNumberOrString(f, d, e);
        case CTATExpressionMatcher.LTE_RELATION:
        ;
        case CTATExpressionMatcher.GTE_RELATION:
          if (null == f) {
            return null == d;
          }
          if (null != d) {
            return h.compareNumberOrString(f, d, e);
          }
        ;
      }
    } catch (u) {
    }
    return !1;
  }
  CTATSingleMatcher.call(this, a, b);
  var e = CTATExpressionMatcher.EQ_RELATION, d = b, c = null, g = !1, h = this;
  this.getLastInput = function() {
    h.ctatdebug("CTATExpressionMatcher.getLastInput() returns " + c);
    return c;
  };
  this.isEqualRelation = function() {
    h.ctatdebug("CTATExpressionMatcher --\x3e in isEqualRelation");
    return e === CTATExpressionMatcher.EQ_RELATION;
  };
  this.getEvaluatedInput = function(a, b) {
    h.ctatdebug("CTATExpressionMatcher --\x3e in getEvaluatedInput(" + a + ", " + b + ")");
    var c = CTATVariableTable.standardizeType(a.getInput()), c = h.evaluate(a.getSelection(), a.getAction(), c, b);
    h.ctatdebug("CTATExpressionMatcher.getEvaluatedInput() returns " + c);
    return c;
  };
  this.toString = function() {
    return CTATExpressionMatcher.RELATIONS[e] + ' "' + d + '"';
  };
  this.matchSingle = function(a) {
    throw new CTATExampleTracerException("UnsupportedOperationException");
  };
  this.setInputExpression = function(a) {
    d = a;
  };
  this.setRelation = function(a) {
    e = a;
  };
  this.interpolate = function(a, b, c, d) {
    try {
      var e = new CTATVariableTable;
      return (new CTATFormulaParser(e)).interpolate(a, b, c, d);
    } catch (g) {
      return null;
    }
  };
  this.evaluate = function(a, b, c, d) {
    if ("undefined" == typeof d || null == d) {
      d = new CTATVariableTable;
    }
    h.ctatdebug("CTATExpressionMatcher.evaluate(..., vt=" + d + ") creating CTATFormulaParser");
    d = new CTATFormulaParser(d);
    h.ctatdebug("calling CTATFormulaParser.evaluate(" + h.getInputExpression() + ", " + a + ", " + b + ", " + c + ")");
    try {
      return d.evaluate(h.getInputExpression(), a, b, c);
    } catch (e) {
      return h.ctatdebug("CTATExpressionMatcher --\x3e " + e.name + ": " + e.message), null;
    }
  };
  this.matchConcatenation = function(b, c, d, e) {
    b = h.array2ConcatString(b);
    null === c || "undefined" === typeof c || null === d || "undefined" === typeof d ? g = f(b, null, null, a, e) : (c = h.array2ConcatString(c), d = h.array2ConcatString(d), g = f(b, c, d, a, e));
    return g;
  };
  this.match = function(a, b, c, d, e) {
    return h.matchConcatenation(a, b, c, e);
  };
  this.getInputExpression = function() {
    return d;
  };
  (function() {
    if (null !== b && "undefined" !== typeof b) {
      var a;
      a = b.indexOf('"');
      var c = b.lastIndexOf('"');
      0 <= a && 0 <= c ? (a = b.substring(a + 1, c), c = b.substring(0, b.indexOf(" ")), e = CTATExpressionMatcher.nameToRelation(c)) : a = b;
      h.setInputExpression(a);
    }
  })();
};
Object.defineProperty(CTATExpressionMatcher, "EQ_RELATION", {enumerable:!1, configurable:!1, writable:!1, value:0});
Object.defineProperty(CTATExpressionMatcher, "LT_RELATION", {enumerable:!1, configurable:!1, writable:!1, value:1});
Object.defineProperty(CTATExpressionMatcher, "GT_RELATION", {enumerable:!1, configurable:!1, writable:!1, value:2});
Object.defineProperty(CTATExpressionMatcher, "NOT_EQ_RELATION", {enumerable:!1, configurable:!1, writable:!1, value:3});
Object.defineProperty(CTATExpressionMatcher, "GTE_RELATION", {enumerable:!1, configurable:!1, writable:!1, value:4});
Object.defineProperty(CTATExpressionMatcher, "LTE_RELATION", {enumerable:!1, configurable:!1, writable:!1, value:5});
Object.defineProperty(CTATExpressionMatcher, "BOOL_RELATION", {enumerable:!1, configurable:!1, writable:!1, value:6});
Object.defineProperty(CTATExpressionMatcher, "RELATIONS", {enumerable:!1, configurable:!1, writable:!1, value:"= < > != >= <= boolean".split(" ")});
CTATExpressionMatcher.nameToRelation = function(a) {
  for (var b = 0;b < CTATExpressionMatcher.RELATIONS.length;b++) {
    if (a == CTATExpressionMatcher.RELATIONS[b]) {
      return b;
    }
  }
  return CTATExpressionMatcher.EQ_RELATION;
};
CTATExpressionMatcher.prototype = Object.create(CTATSingleMatcher.prototype);
CTATExpressionMatcher.prototype.constructor = CTATExpressionMatcher;
CTATExpressionMatcher.prototype.setParameter = function(a, b, f) {
  a = f.getNodeTextValue(a);
  this.ctatdebug("CTATExpressionMatcher.setParameter(" + b + ", " + a + ")");
  "InputExpression" == b ? this.setInputExpression(a) : "relation" == b && this.setRelation(CTATExpressionMatcher.nameToRelation(a));
};
CTATExpressionMatcher.prototype.compareNumberOrString = function(a, b, f) {
  a = String(a);
  b = String(b);
  var e = Number(a), d = Number(b);
  if (isNaN(e) || isNaN(d)) {
    switch(f) {
      case CTATExpressionMatcher.EQ_RELATION:
        return a == b;
      case CTATExpressionMatcher.NOT_EQ_RELATION:
        return a != b;
      case CTATExpressionMatcher.LT_RELATION:
        return a.toLowerCase() < b.toLowerCase();
      case CTATExpressionMatcher.GT_RELATION:
        return a.toLowerCase() > b.toLowerCase();
      case CTATExpressionMatcher.LTE_RELATION:
        return a.toLowerCase() <= b.toLowerCase();
      case CTATExpressionMatcher.GTE_RELATION:
        return a.toLowerCase() >= b.toLowerCase();
      case CTATExpressionMatcher.BOOL_RELATION:
        return !!b;
      default:
        return !1;
    }
  } else {
    switch(f) {
      case CTATExpressionMatcher.EQ_RELATION:
        return e == d;
      case CTATExpressionMatcher.NOT_EQ_RELATION:
        return e != d;
      case CTATExpressionMatcher.LT_RELATION:
        return e < d;
      case CTATExpressionMatcher.GT_RELATION:
        return e > d;
      case CTATExpressionMatcher.LTE_RELATION:
        return e <= d;
      case CTATExpressionMatcher.GTE_RELATION:
        return e >= d;
      case CTATExpressionMatcher.BOOL_RELATION:
        return !!d;
      default:
        return !1;
    }
  }
};
"undefined" !== typeof module && (module.exports = CTATExpressionMatcher);
var CTATRangeMatcher = function(a, b) {
  CTATSingleMatcher.call(this, a, !0);
  var f = 0, e = 0;
  this.toString = function() {
    return "[ " + f + " , " + e + " ]";
  };
  this.setMinimum = function(a) {
    try {
      f = parseFloat(a);
    } catch (b) {
      throw new CTATExampleTracerException('Number format exception while parsing minimum value "' + a + '": ' + b);
    }
  };
  this.setMaximum = function(a) {
    try {
      e = parseFloat(a);
    } catch (b) {
      throw new CTATExampleTracerException('Number format exception while parsing maximum value "' + a + '": ' + b);
    }
  };
  this.matchSingle = function(a) {
    var b;
    try {
      b = parseFloat(a);
    } catch (g) {
      throw new CTATExampleTracerException("Number format exception while parsing .");
    }
    return f <= b && b <= e ? !0 : !1;
  };
};
CTATRangeMatcher.prototype = Object.create(CTATSingleMatcher.prototype);
CTATRangeMatcher.prototype.constructor = CTATRangeMatcher;
CTATRangeMatcher.prototype.setParameter = function(a, b) {
  switch((b ? b : "").toString().trim().toLowerCase()) {
    case "minimum":
      this.setMinimum(a);
      break;
    case "maximum":
      this.setMaximum(a);
      break;
    default:
      console.log('CTATRangeMatcher.setParameter() undefined parameter name "' + b + '"'), this.setMinimum(a), this.setMaximum(a);
  }
};
CTATRangeMatcher.prototype.match = function(a, b, f, e) {
  return this.matchSingle(a, b, f, e);
};
"undefined" !== typeof module && (module.exports = CTATRangeMatcher);
var CTATRegexMatcher = function(a, b) {
  CTATSingleMatcher.call(this, a, !0);
  var f = null, e = null, d = this;
  this.toString = function() {
    return f;
  };
  this.setSinglePattern = function(a) {
    "undefined" === typeof a || null === a ? console.log("CTATRegexMatcher: null or undefined pattern") : (f = a, e = d.getCaseInsensitive() ? new RegExp(a, "i") : new RegExp(a));
  };
  this.setSingle = function(a) {
    d.setSinglePattern(a);
  };
  this.matchSingle = function(a) {
    if (null == a) {
      return null == getSingle();
    }
    if (null == e) {
      return console.log("Error: CTATRegexMatcher.matchSingle called before pattern has been set"), !1;
    }
    var b = e.exec(a);
    return null != b && b[0] == a;
  };
};
CTATRegexMatcher.prototype = Object.create(CTATSingleMatcher.prototype);
CTATRegexMatcher.prototype.constructor = CTATRegexMatcher;
"undefined" !== typeof module && (module.exports = CTATRegexMatcher);
var CTATWildcardMatcher = function(a, b) {
  function f(a) {
    if (null == a || "undefined" === typeof a) {
      return null;
    }
    var b = (new String(a)).replace(RegExp("\\?", "g"), "."), g = b.replace(RegExp("\\*", "g"), ".*"), f = g.replace(RegExp("\\[\\!", "g"), "[^");
    e.ctatdebug("CTATWildcardMatcher.convertToFullRegex(" + a + ") after qm: " + b + "; after aster: " + g + "; after negate: " + f + ";");
    return f;
  }
  CTATRegexMatcher.call(this, a, b);
  var e = this;
  this.toString = function() {
    return null;
  };
  this.setSingle = function(a) {
    e.simpleSinglePattern = a;
    e.setSinglePattern.call(e, f(a));
  };
  this.setSingle(b);
  this.simpleSinglePattern = b;
};
CTATWildcardMatcher.prototype = Object.create(CTATRegexMatcher.prototype);
CTATWildcardMatcher.prototype.constructor = CTATWildcardMatcher;
"undefined" !== typeof module && (module.exports = CTATWildcardMatcher);
var CTATVectorMatcher = function(a, b, f, e) {
  function d(a, b, d, e, f) {
    m.ctatdebug("CTATVectorMatcher --\x3e in _match(" + a + ", " + b + ", " + d + ", " + e + ")");
    if (0 === c.length || 0 === g.length || 0 === h.length) {
      c.push(new CTATExactMatcher(CTATMatcher.SELECTION, m.array2ConcatString(m.getDefaultSelectionArray()))), g.push(new CTATExactMatcher(CTATMatcher.ACTION, m.array2ConcatString(m.getDefaultActionArray()))), h.push(new CTATExactMatcher(CTATMatcher.INPUT, m.array2ConcatString(m.getDefaultInputArray())));
    }
    var w = [];
    w[CTATMatcher.SELECTION] = a;
    w[CTATMatcher.ACTION] = b;
    w[CTATMatcher.INPUT] = d;
    for (var z = 0;3 > z;z++) {
      var t = l[z][0], D = t instanceof CTATExpressionMatcher ? t.matchConcatenation(a, b, d, e) : t.matchConcatenation(w[z]);
      m.ctatdebug("CTATVectorMatcher --\x3e in _match[" + z + "] after " + t + ".concat returns: " + D);
      if (f) {
        f.push(D);
      } else {
        if (!1 === D) {
          return !1;
        }
      }
    }
    if (f) {
      for (a = 0;a < f.length;++a) {
        if (!f[a]) {
          return !1;
        }
      }
    }
    return !0;
  }
  CTATMatcher.call(this, !0, CTATMatcher.VECTOR, !0);
  var c = a instanceof Array ? a : [], g = b instanceof Array ? b : [], h = f instanceof Array ? f : [], l = [];
  l[CTATMatcher.SELECTION] = c;
  l[CTATMatcher.ACTION] = g;
  l[CTATMatcher.INPUT] = h;
  var m = this;
  this.match = function(a, b, c, e, g) {
    return !1 !== d(a, b, c, g) && m.matchActor(e) ? !0 : !1;
  };
  this.getMatchers = function(a) {
    return l[a];
  };
  this.getTutorSAI = function(a, b, c) {
    m.ctatdebug("CTATVectorMatcher.getTutorSAI(" + a + ", vt, " + c + ")");
    if (c && CTATExampleTracerLink.CORRECT_ACTION.toLowerCase() == c.toLowerCase()) {
      return a;
    }
    var e = [];
    if (d(a.getSelectionArray(), a.getActionArray(), a.getInputArray(), b, e)) {
      return c = a.clone(), a = m.evaluateReplacement(a, b, null), null != a && c.setInput("object" == typeof a ? a.toString() : a), c;
    }
    c = a.clone();
    for (a = 0;a < e.length;a++) {
      switch(a) {
        case CTATMatcher.SELECTION:
          if (e[a]) {
            continue;
          }
          c.setSelection(m.getDefaultSelection());
          c.setSelectionArray(m.getDefaultSelectionArray());
          break;
        case CTATMatcher.ACTION:
          if (e[a]) {
            continue;
          }
          c.setAction(m.getDefaultAction());
          c.setActionArray(m.getDefaultActionArray());
          break;
        case CTATMatcher.INPUT:
          if (e[a]) {
            continue;
          }
          c.setInput(m.getDefaultInput());
          c.setInputArray(m.getDefaultInputArray());
          break;
        default:
          console.log("CTATVectorMatcher.getTutorSAI() unexpected no. of details: " + a);
      }
    }
    return c;
  };
  this.getInputMatcher = function() {
    var a = h[0];
    return a instanceof CTATExactMatcher && a.toString() === "".toString() ? m.getDefaultInput() : a.toString();
  };
  this.getActionMatcher = function() {
    var a = g[0];
    return a instanceof CTATExactMatcher && a.toString() === "".toString() ? m.getDefaultAction() : a.toString();
  };
  this.getSelectionMatcher = function() {
    var a = c[0];
    return a instanceof CTATExactMatcher && a.toString() === "".toString() ? m.getDefaultSelection() : a.toString();
  };
  this.getSingleMatcher = function(a) {
    return "selection".toString().toUpperCase() === a.toString().toUpperCase() ? c[0] : "action".toString().toUpperCase() === a.toString().toUpperCase() ? g[0] : h[0];
  };
  this.getSelection = function() {
    return 0 === c.length ? m.getDefaultSelection() : c[0].toString();
  };
  this.getAction = function() {
    return 0 === g.length ? m.getDefaultAction() : g[0].getAction();
  };
  this.setDefaultSelection = function(a) {
    return 0 === c.length ? m.internalSetDefaultSelection(a) : c[0].setDefaultSelection(a);
  };
  this.setDefaultAction = function(a) {
    return 0 === g.length ? m.internalSetDefaultAction(a) : g[0].setDefaultAction(a);
  };
  this.setDefaultInput = function(a) {
    return 0 === h.length ? m.internalSetDefaultInput(a) : h[0].setDefaultInput(a);
  };
  this.getEvaluatedInput = function(a, b) {
    if (0 === h.length) {
      return m.getInput();
    }
    var c = h[0];
    return !1 === c instanceof CTATExpressionMatcher ? m.getInput() : !0 === c.isEqualRelation() ? c.getEvaluatedInput(a, b) : m.getInput();
  };
  this.matchForHint = function(a, b, d, e) {
    ctatdebug("CTATVectorMatcher.matchForHint(" + a + ", " + b + ", " + d + ", vt)");
    if (!m.matchActor(d)) {
      return !1;
    }
    b = c[0];
    return Array.isArray(a) ? b.matchConcatenation(a, m.getDefaultActionArray(), m.getDefaultInputArray(), e) : b.matchConcatenation([a], m.getDefaultActionArray(), m.getDefaultInputArray(), e);
  };
  this.setCaseInsensitive = function(a) {
    ctatdebug("CTATVectorMatcher.setCaseInsensitive(" + a + ")");
    for (var b = 0;b < l.length;++b) {
      if (Array.isArray(l[b])) {
        for (var c = 0;c < l[b].length;++c) {
          l[b][c].setCaseInsensitive(a);
        }
      } else {
        l[b] instanceof CTATMatcher && l[b].setCaseInsensitive(a);
      }
    }
  };
  this.toString = function() {
    return "this is CTATVectorMatcher";
  };
  this.getReplacementFormula = function() {
    var a = h[0];
    return null === a || "undefined" === typeof a ? null : a.getReplacementFormula();
  };
  this.evaluateReplacement = function(a, b, c) {
    return h[0].evaluateReplacement(a, b, c);
  };
  this.setActor(e);
};
CTATVectorMatcher.prototype = Object.create(CTATMatcher.prototype);
CTATVectorMatcher.prototype.constructor = CTATVectorMatcher;
"undefined" !== typeof module && (module.exports = CTATVectorMatcher);
var CTATExampleTracerNode = function(a, b) {
  CTATBase.call(this, "CTATExampleTracerNode", a);
  var f = null, e = "", d = b ? b : new Set, c = new Set;
  d.forEach(function(a, b, d) {
    b.isCorrect() && c.add(b);
  });
  var g = new Set, h = this;
  this.toString = function() {
    return "node" + a;
  };
  this.getNodeID = function() {
    return a;
  };
  this.getNodeName = function() {
    return e;
  };
  this.setNodeName = function(a) {
    h.ctatdebug("CTATExampleTracerGraph --\x3e in setNodeName(" + a + ")");
    e = a;
  };
  this.getOutLinks = function() {
    ctatdebug("CTATExampleTracerNode --\x3e getOutLinks");
    return d;
  };
  this.getCorrectOutLinks = function() {
    return c;
  };
  this.addOutLink = function(a) {
    ctatdebug("CTATExampleTracerNode --\x3e addOutLink( " + a + " )");
    d.add(a);
    a.isCorrect() && c.add(a);
  };
  this.clearInLinks = function() {
    g = new Set;
  };
  this.addInLink = function(a) {
    g.add(a);
  };
  this.getInLinks = function() {
    return g;
  };
  this.getOutDegree = function() {
    return d.size;
  };
  this.getCorrectOutDegree = function() {
    return c.size;
  };
  this.setVisualData = function(a) {
    f = a;
  };
  this.getVisualData = function() {
    return f;
  };
};
CTATExampleTracerNode.prototype = Object.create(CTATBase.prototype);
CTATExampleTracerNode.prototype.constructor = CTATExampleTracerNode;
"undefined" !== typeof module && (module.exports = CTATExampleTracerNode);
var CTATExampleTracerLink = function(a, b, f) {
  CTATBase.call(this, "CTATExampleTracerLink", "(" + b + "-" + f + ")");
  var e = "undefined" === typeof a || null === a ? null : a, d = null, c = "undefined" === typeof b || null === b ? null : b, g = "undefined" === typeof f || null === f ? null : f, h = null, l = 1, m = 1, q = "CORRECT_ACTION", p = [], n = !1, x = null, u = "", w = null, z = null, t = this;
  this.getUniqueID = function() {
    return e;
  };
  this.getMatcher = function() {
    t.ctatdebug("CTATExampleTracerLink --\x3e in getMatcher");
    return h;
  };
  this.isCorrect = function() {
    return q == CTATExampleTracerLink.CORRECT_ACTION;
  };
  this.matchesSAI = function(a, b, c) {
    var d = t.getMatcher();
    t.ctatdebug("CTATExampleTracerLink --\x3e in matchesSAI(); matcher " + d + ", typeof " + typeof d + ", sai " + a);
    a = d.match(a.getSelectionArray(), a.getActionArray(), a.getInputArray(), b, c);
    t.ctatdebug("CTATExampleTracerLink --\x3e out of matchesSAI: result = " + a);
    return a;
  };
  this.matchesSAIforHint = function(a, b, c, d) {
    t.ctatdebug("CTATExampleTracerLink --\x3e in matchesSAIforHint(" + a + ", " + b + ") selectionArray " + a.getSelectionArray());
    if (!1 === t.getMatcher().matchForHint(a.getSelectionArray(), a.getActionArray(), b, d)) {
      return t.ctatdebug("CTATExampleTracerLink --\x3e matchesSAIforHint() returning false because no match"), !1;
    }
    if (null !== c && "undefined" !== typeof c && !0 === c.getWantReportableHints() && (a = null === t.getAllHints() || "undefined" === typeof t.getAllHints() ? 0 : t.getAllHints().length, 1 > a)) {
      return t.ctatdebug("CTATExampleTracerLink --\x3e matchesSAIforHint() returning false nStaticHints " + a + "< 1"), !1;
    }
    t.ctatdebug("CTATExampleTracerLink --\x3e matchesSAIforHint() returning true");
    return !0;
  };
  this.getDepth = function() {
    return d;
  };
  this.getBuggyMsg = function() {
    return u;
  };
  this.getSuccessMsg = function() {
    return x;
  };
  this.getType = function() {
    return q;
  };
  this.getPrevNode = function() {
    return c;
  };
  this.getNextNode = function() {
    return g;
  };
  this.setPrevNode = function(a) {
    c = a;
  };
  this.setNextNode = function(a) {
    g = a;
  };
  this.toString = function() {
    var a;
    a = "[link " + t.getUniqueID();
    a += " (" + t.getPrevNode() + "-" + t.getNextNode();
    a += ") " + t.getType();
    return a + "]";
  };
  this.getTutorSAI = function(a, b) {
    return t.getMatcher().getTutorSAI(a, b, t.getActionType());
  };
  this.getEvaluatedInput = function(a, b) {
    return t.getMatcher().getEvaluatedInput(a, b);
  };
  this.setDepth = function(a) {
    d = a;
  };
  this.getMaxTraversals = function() {
    return l;
  };
  this.isDone = function() {
    var a = String(t.getDefaultSAI().getSelection()).toLowerCase(), b = String(t.getDefaultSAI().getAction()).toLowerCase(), a = CTATMsgType.DONE.toLowerCase() == a && CTATMsgType.BUTTON_PRESSED.toLowerCase() == b;
    t.ctatdebug("CTATExampleTracerLink.isDone() returns " + a);
    return a;
  };
  this.interpolateHints = function(a) {
    t.ctatdebug("CTATExampleTracerLink --\x3e interpolateHints(" + a + ")");
    var b = [];
    if (null === p || "undefined" === typeof p || 0 === p.length) {
      return b;
    }
    null == a && (a = new CTATVariableTable);
    var c = new CTATFormulaParser(a);
    p.forEach(function(a) {
      if (!(1 > String(a).trim().length)) {
        var d = t.getDefaultSAI().getSelection(), e = t.getDefaultSAI().getAction(), g = CTATVariableTable.standardizeType(t.getDefaultSAI().getInput());
        t.ctatdebug("CTATExampleTracerLink.interpolateHints() calling fp.interpolate(" + a + ", " + d + ", " + e + ", " + g + ")");
        a = c.interpolate(a, d, e, g);
        t.ctatdebug("CTATExampleTracerLink.interpolateHints() calling fp.interpolate() returns " + a);
        b.push(a);
      }
    });
    t.ctatdebug("CTATExampleTracerLink --\x3e out of interpolateHints " + b);
    return b;
  };
  this.getHints = function() {
    t.ctatdebug("CTATExampleTracerLink --\x3e in getHints");
    var a = [];
    t.interpolateHints(null).forEach(function(b) {
      t.ctatdebug("CTATExampleTracerLink --\x3e in getHints loop");
      b.toString() !== "".toString() && a.push(b);
    });
    t.ctatdebug("CTATExampleTracerLink --\x3e out of getHints");
    return a;
  };
  this.getAllNonEmptyHints = function() {
    var a = [];
    p.forEach(function(b) {
      b.trim().toString() !== "".toString() && a.push(b);
    });
    return a;
  };
  this.isTraversable = function() {
    return 1 > t.getMaxTraversals() ? !1 : CTATExampleTracerLink.CORRECT_ACTION.toString().toUpperCase() == t.getActionType().toString().toUpperCase() || CTATExampleTracerLink.FIREABLE_BUGGY_ACTION.toString().toUpperCase() == t.getActionType().toString().toUpperCase() ? !0 : !1;
  };
  this.replaceInput = function() {
    return CTATExampleTracerLink.CORRECT_ACTION.toString().toUpperCase() !== t.getActionType().toString().toUpperCase() && CTATExampleTracerLink.FIREABLE_BUGGY_ACTION.toString().toUpperCase() !== t.getActionType().toString().toUpperCase() ? !1 : t.getMatcher().replaceInput();
  };
  this.evaluateReplacement = function(a, b, c) {
    return t.getMatcher().evaluateReplacement(a, b, c);
  };
  this.getActor = function() {
    return t.getMatcher().getActor();
  };
  this.getDefaultSAI = function() {
    t.ctatdebug(t.toString() + ".getSAI(): " + (h ? h.getDefaultSAI() : "(matcher null)"));
    return h.getDefaultSAI();
  };
  this.getActionType = function() {
    return q;
  };
  this.getMinTraversals = function() {
    return m;
  };
  this.getIsPreferredLink = function() {
    return n;
  };
  this.getAllHints = function() {
    return p;
  };
  this.setMatcher = function(a) {
    h = a;
  };
  this.addHint = function(a) {
    null !== a && "undefined" !== typeof a && a.toString() !== "".toString() && p.push(a);
  };
  this.setSelection = function(a) {
    t.getMatcher().setDefaultSelection(null === a[0] || "undefined" === typeof a[0] ? "" : a[0].toString());
  };
  this.setAction = function(a) {
    t.getMatcher().setDefaultAction(null === a[0] || "undefined" === typeof a[0] ? "" : a[0].toString());
  };
  this.setActionType = function(a) {
    if (null === a || "undefined" === typeof a || a.toString() !== CTATExampleTracerLink.CORRECT_ACTION.toString() && a.toString() !== CTATExampleTracerLink.FIREABLE_BUGGY_ACTION.toString() && a.toString() !== CTATExampleTracerLink.BUGGY_ACTION.toString() && a.toString() !== CTATExampleTracerLink.HINT_ACTION.toString() && a.toString() !== CTATExampleTracerLink.UNTRACEABLE_ERROR.toString() && a.toString() !== CTATExampleTracerLink.CLT_ERROR_ACTION.toString() && a.toString() !== CTATExampleTracerLink.GIVEN_ACTION.toString()) {
      throw new CTATExampleTracerException("invalid action type " + q);
    }
    q = a;
  };
  this.setBuggyMsg = function(a) {
    u = a;
  };
  this.setSuccessMsg = function(a) {
    x = a;
  };
  this.setMinTraversalsStr = function(a) {
    if (null === a || "undefined" === typeof a || 1 > a.length) {
      m = 1;
    } else {
      try {
        m = parseInt(a.trim()), isNaN(m) && (m = 1);
      } catch (b) {
        m = 1;
      }
    }
  };
  this.setMaxTraversalsStr = function(a) {
    if (null === a || "undefined" === typeof a || 1 > a.length) {
      l = m;
    } else {
      try {
        l = parseInt(a.trim()), isNaN(l) && (l = 1);
      } catch (b) {
        l = m;
      }
    }
  };
  this.setUniqueID = function(a) {
    e = a;
  };
  this.addSkillName = function(a) {
    t.ctatdebug("ETLink[" + e + "].addSkillName(" + a + ")");
    if ("unnamed" !== a) {
      if (null === z || "undefined" === typeof z) {
        z = [];
      }
      -1 < z.indexOf(a) || (z.push(a), t.ctatdebug("ETLink.addSkillName() return with skillNames " + z));
    }
  };
  this.getSkillNames = function() {
    if (null === z || "undefined" === typeof z) {
      z = [];
    }
    return z;
  };
  this.isTutorPerformed = function(a) {
    if (CTATExampleTracerLink.CORRECT_ACTION.toUpperCase() !== t.getActionType().toUpperCase()) {
      return !1;
    }
    var b = t.getMatcher();
    if (null === b || "undefined" === typeof b || null !== a && "undefined" !== typeof a && a !== b.isLinkTriggered()) {
      return !1;
    }
    a = t.getActor();
    return CTATMatcher.isTutorActor(a, !0) ? !0 : !1;
  };
  this.setIsPreferredLink = function(a) {
    t.ctatdebug("ETLink.setIsPreferredLink() was " + n + ", now " + a);
    n = a;
  };
  this.setVisualData = function(a) {
    w = a;
  };
  this.getVisualData = function() {
    return w;
  };
};
CTATExampleTracerLink.compareLinkTypes = function(a, b) {
  ctatdebug("CTATExampleTracerLink --\x3e in compareLinkTypes(" + a + ", " + b + ")");
  return null === a || "undefined" === typeof a ? null === b || "undefined" === typeof b ? 0 : 1 : null === b || "undefined" === typeof b ? -1 : a.toString() === b.toString() ? 0 : a.toString() === CTATExampleTracerLink.CORRECT_ACTION.toString() ? -1 : b.toString() === CTATExampleTracerLink.CORRECT_ACTION.toString() ? 1 : a.toString() === CTATExampleTracerLink.FIREABLE_BUGGY_ACTION.toString() ? -1 : b.toString() === CTATExampleTracerLink.FIREABLE_BUGGY_ACTION.toString() ? 1 : a.toString() === CTATExampleTracerLink.BUGGY_ACTION.toString() ? 
  -1 : b.toString() === CTATExampleTracerLink.BUGGY_ACTION.toString() ? 1 : 0;
};
Object.defineProperty(CTATExampleTracerLink, "BUGGY_ACTION", {enumerable:!1, configurable:!1, writable:!1, value:"Buggy Action"});
Object.defineProperty(CTATExampleTracerLink, "FIREABLE_BUGGY_ACTION", {enumerable:!1, configurable:!1, writable:!1, value:"Fireable Buggy Action"});
Object.defineProperty(CTATExampleTracerLink, "CORRECT_ACTION", {enumerable:!1, configurable:!1, writable:!1, value:"Correct Action"});
Object.defineProperty(CTATExampleTracerLink, "NO_MODEL", {enumerable:!1, configurable:!1, writable:!1, value:"NO-MODEL"});
Object.defineProperty(CTATExampleTracerLink, "HINT_ACTION", {enumerable:!1, configurable:!1, writable:!1, value:"Hint Action"});
Object.defineProperty(CTATExampleTracerLink, "UNTRACEABLE_ERROR", {enumerable:!1, configurable:!1, writable:!1, value:"Untraceable Error"});
Object.defineProperty(CTATExampleTracerLink, "CLT_ERROR_ACTION", {enumerable:!1, configurable:!1, writable:!1, value:"Error Action"});
Object.defineProperty(CTATExampleTracerLink, "GIVEN_ACTION", {enumerable:!1, configurable:!1, writable:!1, value:"Given Action"});
Object.defineProperty(CTATExampleTracerLink, "SUCCESS", {enumerable:!1, configurable:!1, writable:!1, value:"SUCCESS"});
CTATExampleTracerLink.prototype = Object.create(CTATBase.prototype);
CTATExampleTracerLink.prototype.constructor = CTATExampleTracerLink;
"undefined" !== typeof module && (module.exports = CTATExampleTracerLink);
var CTATExampleTracerPathComparator = function() {
  CTATBase.call(this, "CTATExampleTracerPathComparator", "");
  var a = this;
  this.compare = function(b, f) {
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in compare");
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in compare p1.isDonePath(): " + b.isDonePath());
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in compare p2.isDonePath(): " + f.isDonePath());
    if (!0 === b.isDonePath() && !1 === f.isDonePath()) {
      return -1;
    }
    if (!0 === f.isDonePath() && !1 === b.isDonePath()) {
      return 1;
    }
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in compare p2.isIncorrectPath(): " + f.isIncorrectPath());
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in compare p1.isIncorrectPath()(): " + b.isIncorrectPath());
    if (!0 === f.isIncorrectPath() && !1 === b.isIncorrectPath()) {
      return -1;
    }
    if (!0 === b.isIncorrectPath() && !1 === f.isIncorrectPath()) {
      return 1;
    }
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in compare p1.getNumberOfPreferredPrefixLinks(): " + b.getNumberOfPreferredPrefixLinks());
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in compare p2.getNumberOfPreferredPrefixLinks(): " + f.getNumberOfPreferredPrefixLinks());
    var e = b.getNumberOfPreferredPrefixLinks(), d = f.getNumberOfPreferredPrefixLinks();
    if (e > d) {
      return -1;
    }
    if (e < d) {
      return 1;
    }
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in compare p1.getNumberOfSuboptimalLinks(): " + b.getNumberOfSuboptimalLinks());
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in compare p2.getNumberOfSuboptimalLinks(): " + f.getNumberOfSuboptimalLinks());
    e = b.getNumberOfSuboptimalLinks();
    d = f.getNumberOfSuboptimalLinks();
    if (e < d) {
      return -1;
    }
    if (e > d) {
      return 1;
    }
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in compare p1.getNumberOfPreferredLinks(): " + b.getNumberOfPreferredLinks());
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in compare p2.getNumberOfPreferredLinks(): " + f.getNumberOfPreferredLinks());
    e = b.getNumberOfPreferredLinks();
    d = f.getNumberOfPreferredLinks();
    if (e > d) {
      return -1;
    }
    if (e < d) {
      return 1;
    }
    e = b.getLinks().size;
    d = f.getLinks().size;
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in compare p1.getLinks().size: " + e);
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in compare p1.getLinks().size: " + d);
    if (e < d) {
      return -1;
    }
    if (e > d) {
      return 1;
    }
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e out of comapre, about to call breakByLowerLinkID");
    return a.breakByLowerLinkID(b, f);
  };
  this.breakByLowerLinkID = function(b, f) {
    a.ctatdebug("CTATExampleTracerPathComparator --\x3e in breakByLowerLinkID");
    var e = b.getSortedLinks(), d = f.getSortedLinks(), c = null, g = null, h = 0, l = 0;
    do {
      a.ctatdebug("CTATExampleTracerPathComparator --\x3e in breakByLowerLinkID in do while"), l >= e.length ? (a.ctatdebug("CTATExampleTracerPathComparator --\x3e in breakByLowerLinkID path 1 is shorter"), h = -1) : l >= d.length ? (a.ctatdebug("CTATExampleTracerPathComparator --\x3e in breakByLowerLinkID path 2 is shorter"), h = 1) : (a.ctatdebug("CTATExampleTracerPathComparator --\x3e in breakByLowerLinkID path are same, compare IDS"), c = e[l], g = d[l]), l++;
    } while (0 === h && c.getUniqueID() === g.getUniqueID());
    0 === h && (a.ctatdebug("CTATExampleTracerPathComparator --\x3e in breakByLowerLinkID result is zero: " + c.getUniqueID()), a.ctatdebug("CTATExampleTracerPathComparator --\x3e in breakByLowerLinkID result is zero: " + g.getUniqueID()), h = c.getUniqueID() < g.getUniqueID() ? -1 : 1);
    return h;
  };
};
CTATExampleTracerPathComparator.prototype = Object.create(CTATBase.prototype);
CTATExampleTracerPathComparator.prototype.constructor = CTATExampleTracerPathComparator;
"undefined" !== typeof module && (module.exports = CTATExampleTracerPathComparator);
var CTATExampleTracerPath = function(a) {
  CTATBase.call(this, "CTATExampleTracerPath", "");
  var b = new Set;
  "undefined" !== typeof a && null !== a && a.forEach(function(a) {
    ctatdebug("CTATExampleTracerPath --\x3e in constructor building links with " + a);
    b.add(a);
  });
  var f = null, e = null, d = null, c = null, g = null, h = null, l = this;
  this.isIncorrectPath = function() {
    ctatdebug("CTATExampleTracerPath --\x3e in isIncorrectPath");
    if (null !== h && "undefined" !== typeof h) {
      return h;
    }
    var a = !1;
    l.getLinks().forEach(function(b) {
      !0 !== a && b.getType().toString() === CTATExampleTracerLink.BUGGY_ACTION.toString() && (a = h = !0);
    });
    if (!0 === a) {
      return !0;
    }
    h = !1;
    ctatdebug("CTATExampleTracerPath --\x3e out of isIncorrectPath");
    return !1;
  };
  this.getNumberOfSuboptimalLinks = function() {
    ctatdebug("CTATExampleTracerPath --\x3e in getNumberOfSuboptimalLinks");
    l.getSortedLinks();
    if (null !== c && "undefined" !== typeof c) {
      return c;
    }
    var a = 0;
    l.getLinks().forEach(function(b) {
      CTATExampleTracerLink.FIREABLE_BUGGY_ACTION.toString() === b.getType().toString() && a++;
    });
    c = a;
    ctatdebug("CTATExampleTracerPath --\x3e out of getNumberOfSuboptimalLinks");
    return a;
  };
  this.getNumberOfPreferredPrefixLinks = function() {
    ctatdebug("CTATExampleTracerPath --\x3e in getNumberOfPreferredPrefixLinks");
    if (null !== e && "undefined" !== typeof e) {
      return e;
    }
    var a = 0, b = !1;
    l.getSortedLinks().forEach(function(c) {
      !0 !== b && (!0 === c.getIsPreferredLink() ? a++ : b = !0);
    });
    e = a;
    ctatdebug("CTATExampleTracerPath --\x3e out of getNumberOfPreferredPrefixLinks");
    return a;
  };
  this.size = function() {
    return b.size;
  };
  this.containsAll = function(a) {
    var b = !0;
    if (a) {
      for (var c = 0;b && c < a.length;++c) {
        b = l.getLinks().has(a[c]);
      }
    }
    l.ctatdebug("CTATExampleTracerPath containsAll(testLinks.length " + a.length + ") returning " + b);
    return b;
  };
  this.getLinksRestricted = function(a) {
    ctatdebug("CTATExampleTracerPath --\x3e in getLinksRestricted");
    var c = CTATExampleTracerPath.getDeepestLink(a), d = new Set;
    b.forEach(function(a) {
      a.getDepth() <= c.getDepth() && d.add(a);
    });
    ctatdebug("CTATExampleTracerPath --\x3e out of getLinksRestricted");
    return d;
  };
  this.getLinks = function() {
    ctatdebug("CTATExampleTracerPath --\x3e in getLinks");
    return b;
  };
  this.getSortedLinks = function() {
    ctatdebug("CTATExampleTracerPath --\x3e in getSortedLinks that.getLinks(): " + l.getLinks());
    f = [];
    l.getLinks().forEach(function(a) {
      f.push(a);
    });
    ctatdebug("CTATExampleTracerPath --\x3e in getSortedLinks sortedLinks.length(): " + f.length);
    f.sort(function(a, b) {
      return a.getDepth() - b.getDepth();
    });
    ctatdebug("CTATExampleTracerPath --\x3e out of getSortedLinks, returning " + f);
    return f;
  };
  this.isDonePath = function() {
    ctatdebug("CTATExampleTracerPath --\x3e in isDonePath");
    if (null !== g && "undefined" !== typeof g) {
      return g;
    }
    var a = !1;
    l.getLinks().forEach(function(b) {
      !0 !== a && !0 === b.isDone() && (a = g = !0);
    });
    if (!0 === a) {
      return !0;
    }
    g = !1;
    ctatdebug("CTATExampleTracerPath --\x3e out of isDonePath");
    return !1;
  };
  this.addLink = function(a) {
    ctatdebug("CTATExampleTracerPath --\x3e in addLink (" + a + ")");
    b.add(a);
    h = g = c = d = e = f = null;
    ctatdebug("CTATExampleTracerPath --\x3e out of addLink");
  };
  this.getNumberOfPreferredLinks = function() {
    ctatdebug("CTATExampleTracerPath --\x3e in getNumberOfPreferredLinks");
    if (null !== d && "undefined" !== typeof d) {
      return d;
    }
    var a = 0;
    l.getLinks().forEach(function(b) {
      !0 === b.getIsPreferredLink() && a++;
    });
    d = a;
    ctatdebug("CTATExampleTracerPath --\x3e out of getNumberOfPreferredLinks");
    return a;
  };
  this.subpath = function(a) {
    for (var b = new CTATExampleTracerPath, c = l.getSortedLinks(), d = 0;d < c.length;++d) {
      if (b.addLink(c[d]), c[d].getNextNode() == a.getNodeID()) {
        return b;
      }
    }
    return null;
  };
  this.toString = function() {
    var a = "CTATExampleTracerPath: links";
    l.getSortedLinks().forEach(function(b) {
      a += " " + b;
    });
    return a;
  };
  CTATExampleTracerPath.getDeepestLink = function(a) {
    ctatdebug("CTATExampleTracerPath --\x3e in getDeepestLink");
    var b = null;
    a.forEach(function(a) {
      if (null === b || "undefined" === typeof b || b.getDepth() < a.getDepth()) {
        b = a;
      }
    });
    ctatdebug("CTATExampleTracerPath --\x3e out of getDeepestLink");
    return b;
  };
  CTATExampleTracerPath.getBestPath = function(a) {
    ctatdebug("CTATExampleTracerPath --\x3e in getBestPath");
    var b = null, c = new CTATExampleTracerPathComparator;
    a.forEach(function(a) {
      ctatdebug("CTATExampleTracerPath --\x3e in getBestPath loop");
      if (null === b || "undefined" === typeof b || 0 < c.compare(b, a)) {
        b = a;
      }
    });
    ctatdebug("CTATExampleTracerPath --\x3e out of getBestPath");
    return b;
  };
};
CTATExampleTracerPath.prototype = Object.create(CTATBase.prototype);
CTATExampleTracerPath.prototype.constructor = CTATExampleTracerPath;
"undefined" !== typeof module && (module.exports = CTATExampleTracerPath);
var CTATLinkGroup = function() {
  CTATBase.call(this, "CTATLinkGroup", "");
};
CTATLinkGroup.prototype = Object.create(CTATBase.prototype);
CTATLinkGroup.prototype.constructor = CTATLinkGroup;
"undefined" !== typeof module && (module.exports = CTATLinkGroup);
var CTATDefaultLinkGroup = function(a, b, f, e) {
  CTATLinkGroup.call(this, "CTATDefaultLinkGroup", a);
  var d = a, c = b, g = f, h = new Set;
  null !== e && "undefined" !== typeof e && e.forEach(function(a) {
    h.add(a);
  });
  var l = new Set, m = null, q = null, p = this;
  p.ctatdebug("CTATDefaultLinkGroup constructor group name: " + a);
  p.ctatdebug("CTATDefaultLinkGroup constructor group isOrdered: " + b);
  p.ctatdebug("CTATDefaultLinkGroup constructor group isReenterable: " + f);
  this.setOrdered = function(a) {
    p.ctatdebug("CTATDefaultLinkGroup --\x3e in setOrdered group name: " + d);
    p.ctatdebug("CTATDefaultLinkGroup --\x3e in setOrdered:: " + a);
    c = a;
  };
  this.setName = function(a) {
    p.ctatdebug("CTATDefaultLinkGroup --\x3e in setName: " + a);
    d = a;
  };
  this.containsLink = function(a) {
    p.ctatdebug("CTATDefaultLinkGroup --\x3e in containsLink: " + a.getUniqueID());
    return h.has(a);
  };
  this.removeLink = function(a) {
    p.ctatdebug("CTATDefaultLinkGroup --\x3e in removeLink: " + a.getUniqueID());
    return h["delete"](a);
  };
  this.getParent = function() {
    p.ctatdebug("CTATDefaultLinkGroup --\x3e in getParent");
    return m;
  };
  this.addLink = function(a) {
    p.ctatdebug("CTATDefaultLinkGroup --\x3e in addLink: " + a.getUniqueID());
    h.add(a);
  };
  this.getIsOrdered = function() {
    p.ctatdebug("CTATDefaultLinkGroup --\x3e in getIsOrdered: " + c);
    return c;
  };
  this.getIsReenterable = function() {
    p.ctatdebug("CTATDefaultLinkGroup --\x3e in getIsReenterable: " + g);
    return g;
  };
  this.getSubgroups = function() {
    p.ctatdebug("CTATDefaultLinkGroup --\x3e in getSubgroups");
    return l;
  };
  this.getLinks = function() {
    p.ctatdebug("CTATDefaultLinkGroup --\x3e in getLinks");
    return h;
  };
  this.setReenterable = function(a) {
    p.ctatdebug("CTATDefaultLinkGroup --\x3e in setReenterable: " + a);
    g = a;
  };
  this.setParent = function(a) {
    p.ctatdebug("CTATDefaultLinkGroup --\x3e in setParent: " + a.getName());
    m = a;
  };
  this.addSubgroup = function(a) {
    p.ctatdebug("CTATDefaultLinkGroup --\x3e in addSubgroup groupName: " + a.getName());
    l.add(a);
  };
  this.getName = function() {
    return d;
  };
  this.getDefaultBuggyMsg = function() {
    return q;
  };
  this.setDefaultBuggyMsg = function(a) {
    q = "" == a ? null : a;
  };
  this.toString = function() {
    return "Group Name: " + this.getName();
  };
};
CTATDefaultLinkGroup.prototype = Object.create(CTATLinkGroup.prototype);
CTATDefaultLinkGroup.prototype.constructor = CTATDefaultLinkGroup;
"undefined" !== typeof module && (module.exports = CTATDefaultLinkGroup);
InternalGroupIterator = function(a, b) {
  CTATBase.call(this, "InternalGroupIterator", a);
  var f = this, e = b.length, d = [], c = 0;
  a.getSubgroups().forEach(function(a) {
    a && d.push(a);
  });
  b.push(f);
  f.ctatdebug("InternalGroupIterator() constructor group " + a + ", stack.length " + b.length + ", sgList.length " + d.length);
  this.toString = function() {
    return "{" + a + " at " + e + " with " + d.length + " subgroups}";
  };
  this.next = function() {
    return c >= d.length ? (b.pop(), f.ctatdebug("InternalGroupIterator at deepest next() returning " + a + " with stack.length " + b.length), {value:a, done:!1}) : (new InternalGroupIterator(d[c++], b)).next();
  };
};
InternalGroupIterator.prototype = Object.create(CTATBase.prototype);
InternalGroupIterator.prototype.constructor = InternalGroupIterator;
var CTATGroupIterator = function(a) {
  CTATBase.call(this, "CTATGroupIterator", a);
  this.ctatdebug("CTATGroupIterator(" + a + ") begin constructor");
  var b = null;
  this.next = function() {
    null === b && (b = [], new InternalGroupIterator(a, b));
    return 0 >= b.length ? {value:null, done:!0} : b[b.length - 1].next();
  };
};
CTATGroupIterator.prototype = Object.create(CTATBase.prototype);
CTATGroupIterator.prototype.constructor = CTATGroupIterator;
"undefined" !== typeof module && (module.exports = CTATGroupIterator);
var CTATGroupModel = function() {
  CTATBase.call(this, "CTATGroupModel", "");
  var a = this;
  this.clear = function() {
  };
  this.setDefaultReenterable = function(a) {
  };
  this.setGroupOrdered = function(a, f) {
  };
  this.getTopLevelGroup = function() {
  };
  this.setGroupName = function(a, f) {
  };
  this.addLinkToGroup = function(a, f) {
  };
  this.isGroupOrdered = function(a) {
  };
  this.isGroupReenterable = function(a) {
  };
  this.isLinkInGroup = function() {
  };
  this.getGroupsContainingLink = function(a) {
  };
  this.getGroupLinkCount = function(b) {
    return a.getGroupLinks(b).size;
  };
  this.getLowestLevelGroupOfLink = function(a) {
  };
  this.getGroupSubgroups = function(a) {
  };
  this.getUniqueLinks = function(a) {
  };
  this.getGroupLinks = function(a) {
  };
  this.removeLinkFromGroup = function(a, f) {
  };
  this.getGroupParent = function(a) {
  };
  this.addGroup = function(a, f, e) {
  };
  this.setGroupReenterable = function(a, f) {
  };
};
CTATGroupModel.prototype = Object.create(CTATBase.prototype);
CTATGroupModel.prototype.constructor = CTATGroupModel;
"undefined" !== typeof module && (module.exports = CTATGroupModel);
var CTATDefaultGroupModel = function() {
  function a(a, c, d) {
    l.ctatdebug("CTATDefaultGroupModel --\x3e in internalRemoveLinkFromGroupRecursive");
    !0 === a.containsLink(c) && (l.getGroupSubgroups(a).forEach(function(a) {
      l.removeLinkFromGroup(a, c);
    }), (a !== g || d) && b(a, c));
  }
  function b(a, b) {
    l.ctatdebug("CTATDefaultGroupModel --\x3e in internalRemoveLinkFromGroup");
    return a.removeLink(b);
  }
  function f(a, b) {
    l.ctatdebug("CTATDefaultGroupModel --\x3e in getImmediateGroupOfLink");
    var c = null, d = !1, e = null;
    l.getGroupSubgroups(b).forEach(function(b) {
      !0 !== d && !0 === l.isLinkInGroup(b, a) && (c = f(a, b), e = null !== c && "undefined" !== typeof c ? c : b, d = !0);
    });
    return !0 === d ? e : null;
  }
  function e(a, b) {
    l.ctatdebug("CTATDefaultGroupModel --\x3e in getNaturalContainingGroup");
    if (b.size === l.getGroupLinks(a).size) {
      throw l.getGroupLinks(a).forEach(function(c) {
        if (!1 === b.has(c)) {
          throw new CTATExampleTracerException("Invalid link selection: Partial overlap with existing group: " + a);
        }
      }), new CTATExampleTracerException("Group containing this set of links already exists: " + a);
    }
    if (b.size >= l.getGroupLinks(a).size) {
      throw new CTATExampleTracerException("Invalid link selection: Partial overlap with existing group: " + a);
    }
    var c = !1, d = null;
    b.forEach(function(g) {
      if (!0 !== c) {
        if (!1 === l.isLinkInGroup(a, g)) {
          throw new CTATExampleTracerException("Invalid link selection: Partial overlap with existing group: " + a);
        }
        l.getGroupSubgroups(a).forEach(function(f) {
          !0 !== c && !0 === l.isLinkInGroup(f, g) && (l.getGroupLinkCount(f) >= b.size ? (d = e(f, b), c = !0) : l.getGroupLinks(f).forEach(function(c) {
            if (!1 === b.has(c)) {
              throw new CTATExampleTracerException("Invalid link selection: Partial overlap with existing group: " + a);
            }
          }));
        });
      }
    });
    return !0 === c ? d : a;
  }
  function d(a, b) {
    l.ctatdebug("CTATDefaultGroupModel --\x3e in addSubgroupPreserveSanity parent: " + a.getName());
    l.ctatdebug("CTATDefaultGroupModel --\x3e in addSubgroupPreserveSanity child: " + b.getName());
    l.ctatdebug("CTATDefaultGroupModel --\x3e in addSubgroupPreserveSanity size: " + l.getGroupSubgroups(a).size);
    l.getGroupSubgroups(a).forEach(function(d) {
      var e = l.getGroupLinks(d);
      if (0 === e.size) {
        l.getGroupSubgroups(a)["delete"](d), c(b, d);
      } else {
        var g = null, f = !1;
        e.forEach(function(a) {
          !1 === f && (g = a, f = !0);
        });
        !0 === l.isLinkInGroup(b, g) && (l.getGroupSubgroups(a)["delete"](d), c(b, d));
      }
    });
    c(a, b);
  }
  function c(a, b) {
    l.ctatdebug("CTATDefaultGroupModel --\x3e in addSubgroup");
    a.addSubgroup(b);
    b.setParent(a);
  }
  CTATGroupModel.call(this);
  var g = null, h = !1, l = this;
  this.clear = function() {
    l.ctatdebug("CTATDefaultGroupModel --\x3e in clear");
    g = new CTATDefaultLinkGroup("defaultName", !0, h, null);
  };
  this.setDefaultReenterable = function(a) {
    l.ctatdebug("CTATDefaultGroupModel --\x3e in setDefaultReenterable");
    h = a;
  };
  this.setGroupOrdered = function(a, b) {
    l.ctatdebug("CTATDefaultGroupModel --\x3e in setGroupOrdered");
    a.setOrdered(b);
  };
  this.getTopLevelGroup = function() {
    ctatdebug("CTATDefaultGroupModel --\x3e in getTopLevelGroup");
    return g;
  };
  this.setGroupName = function(a, b) {
    l.ctatdebug("CTATDefaultGroupModel --\x3e in setGroupName");
    a.setName(b);
  };
  this.addLinkToGroup = function(a, b) {
    l.ctatdebug("CTATDefaultGroupModel --\x3e in addLinkToGroup");
    for (l.removeLinkFromGroup(g, b);null !== a && "undefined" !== typeof a;a = l.getGroupParent(a)) {
      var c = a, d = b;
      l.ctatdebug("CTATDefaultGroupModel --\x3e in internalAddLinkToGroup");
      c.addLink(d);
    }
  };
  this.isGroupOrdered = function(a) {
    l.ctatdebug("CTATDefaultGroupModel --\x3e in isGroupOrdered group name: " + a.getName());
    l.ctatdebug("CTATDefaultGroupModel --\x3e in isGroupOrdered: " + a.getIsOrdered());
    return a.getIsOrdered();
  };
  this.isGroupReenterable = function(a) {
    l.ctatdebug("CTATDefaultGroupModel --\x3e in isGroupReenterable");
    return a.getIsReenterable();
  };
  this.isLinkInGroup = function(a, b) {
    l.ctatdebug("CTATDefaultGroupModel --\x3e in isLinkInGroup");
    return a.containsLink(b);
  };
  this.getGroupsContainingLink = function(a) {
    l.ctatdebug("CTATDefaultGroupModel --\x3e in getGroupsContainingLink(" + a + "): TopLevel " + g + ", typeof(TopLevel) " + typeof g);
    var b = new Set, c = new CTATGroupIterator(g);
    l.ctatdebug("CTATDefaultGroupModel --\x3e in getGroupsContainingLink before loop: groupIter " + c + ", typeof(groupIter) " + typeof c);
    for (var d = c.next();!d.done;d = c.next()) {
      d = d.value, !0 === l.isLinkInGroup(d, a) && b.add(d);
    }
    l.ctatdebug("CTATDefaultGroupModel --\x3e in getGroupsContainingLink returning groups.size " + b.size);
    return b;
  };
  this.getLowestLevelGroupOfLink = function(a) {
    l.ctatdebug("CTATDefaultGroupModel --\x3e in getLowestLevelGroupOfLink");
    var b = f(a, g);
    return null !== b && "undefined" !== typeof b ? b : !0 === l.isLinkInGroup(g, a) ? g : null;
  };
  this.getGroupSubgroups = function(a) {
    l.ctatdebug("CTATDefaultGroupModel --\x3e in getGroupSubgroups");
    return null !== a && "undefined" !== typeof a ? a.getSubgroups() : null;
  };
  this.getUniqueLinks = function(a) {
    l.ctatdebug("CTATDefaultGroupModel --\x3e in getUniqueLinks");
    var b = new Set;
    l.getGroupLinks(a).forEach(function(a) {
      b.add(a);
    });
    l.getGroupSubgroups(a).forEach(function(a) {
      l.getGroupLinks(a).forEach(function(a) {
        b["delete"](a);
      });
    });
    return b;
  };
  this.getGroupLinks = function(a) {
    l.ctatdebug("CTATDefaultGroupModel --\x3e in getGroupLinks: " + a.getName());
    return a.getLinks();
  };
  this.removeLinkFromGroup = function(b, c) {
    l.ctatdebug("CTATDefaultGroupModel --\x3e in removeLinkFromGroup");
    a(b, c, !1);
  };
  this.getGroupParent = function(a) {
    l.ctatdebug("CTATDefaultGroupModel --\x3e in getGroupParent");
    return a.getParent();
  };
  this.addGroup = function(a, b, c) {
    l.ctatdebug("CTATDefaultGroupModel --\x3e in addGroup");
    var f = null;
    try {
      f = e(g, c);
    } catch (x) {
      return x.toString();
    }
    a = new CTATDefaultLinkGroup(a, b, h, c);
    l.ctatdebug("CTATDefaultGroupModel --\x3e in addGroup after creating new group");
    d(f, a);
    return "";
  };
  this.setGroupReenterable = function(a, b) {
    l.ctatdebug("CTATDefaultGroupModel --\x3e in setGroupReenterable");
    a.setReenterable(b);
  };
  this.createIdToLinkMap = function() {
    l.ctatdebug("CTATDefaultGroupModel --\x3e in createIdToLinkMap");
    var a = {};
    l.getGroupLinks(g).forEach(function(b) {
      a[b.getUniqueID()] = b;
    });
    return a;
  };
  this.getGroupByName = function(a) {
    l.ctatdebug("CTATDefaultGroupModel --\x3e in getGroupByName TopLevel has: " + g.getSubgroups().size);
    for (var b = new CTATGroupIterator(g), c = b.next();!c.done;c = b.next()) {
      if (c = c.value, l.getGroupName(c).toString() === a.toString()) {
        return c;
      }
    }
    return null;
  };
  this.getGroupName = function(a) {
    return a.getName();
  };
  l.clear();
};
CTATDefaultGroupModel.prototype = Object.create(CTATGroupModel.prototype);
CTATDefaultGroupModel.prototype.constructor = CTATDefaultGroupModel;
"undefined" !== typeof module && (module.exports = CTATDefaultGroupModel);
var CTATMatcherComparator = function() {
  CTATBase.call(this, "CTATMatcherComparator", "");
  CTATMatcherComparator.compare = function(a, b) {
    ctatdebug("CTATMatcherComparator--\x3e in compare");
    var f = CTATMatcherComparator.compareBasedOnType(a, b);
    if (0 !== f || !1 === a instanceof CTATVectorMatcher && !1 === b instanceof CTATVectorMatcher) {
      return f;
    }
    f = CTATMatcherComparator.compareBasedOnType(a.getSingleMatcher("input"), b.getSingleMatcher("input"));
    if (0 !== f) {
      return f;
    }
    f = CTATMatcherComparator.compareBasedOnType(a.getSingleMatcher("selection"), b.getSingleMatcher("selection"));
    return 0 !== f ? f : CTATMatcherComparator.compareBasedOnType(a.getSingleMatcher("action"), b.getSingleMatcher("action"));
  };
  CTATMatcherComparator.compareBasedOnType = function(a, b) {
    ctatdebug("CTATMatcherComparator --\x3e in compareBasedOnType");
    for (var f in CTATMatcherComparator.matcherPrecedenceOrder) {
      if (CTATMatcherComparator.matcherPrecedenceOrder.hasOwnProperty(f) && a instanceof CTATMatcherComparator.matcherPrecedenceOrder[f]) {
        break;
      }
    }
    for (var e in CTATMatcherComparator.matcherPrecedenceOrder) {
      if (CTATMatcherComparator.matcherPrecedenceOrder.hasOwnProperty(e) && b instanceof CTATMatcherComparator.matcherPrecedenceOrder[e]) {
        break;
      }
    }
    return f < e ? 1 : f > e ? -1 : 0;
  };
};
Object.defineProperty(CTATMatcherComparator, "matcherPrecedenceOrder", {enumerable:!1, configurable:!1, writable:!1, value:{0:CTATExactMatcher, 1:CTATRangeMatcher, 2:CTATExpressionMatcher, 3:CTATWildcardMatcher, 4:CTATRegexMatcher, 5:CTATAnyMatcher}});
CTATMatcherComparator.prototype = Object.create(CTATBase.prototype);
CTATMatcherComparator.prototype.constructor = CTATMatcherComparator;
"undefined" !== typeof module && (module.exports = CTATMatcherComparator);
new CTATMatcherComparator;
var CTATExampleTracerLinkComparator = function(a, b) {
  CTATBase.call(this, "CTATExampleTracerLinkComparator", "");
  this.compare = function(f, e) {
    ctatdebug("CTATExampleTracerLinkComparator --\x3e in compare l1.getUniqueID(): " + f.getUniqueID());
    ctatdebug("CTATExampleTracerLinkComparator --\x3e in compare l2.getUniqueID(): " + e.getUniqueID());
    var d = f.getType(), c = e.getType(), d = CTATExampleTracerLink.compareLinkTypes(d, c);
    if (0 !== d) {
      return ctatdebug("CTATExampleTracerLinkComparator --\x3e in compare m: " + d), d;
    }
    d = b.nonEmptyHints(f, a.getVariableTable());
    c = b.nonEmptyHints(e, a.getVariableTable());
    ctatdebug("CTATExampleTracerLinkComparator --\x3e in compare h1, h2: " + d + ", " + c);
    if (0 < d && 0 >= c) {
      return -1;
    }
    if (0 >= d && 0 < c) {
      return 1;
    }
    ctatdebug("CTATExampleTracerLinkComparator --\x3e in compare l1.getDepth(), l2.getDepth(): " + f.getDepth() + ", " + e.getDepth());
    if (f.getDepth() < e.getDepth()) {
      return -1;
    }
    if (f.getDepth() > e.getDepth()) {
      return 1;
    }
    d = a.getTraversalCount(f) - f.getMinTraversals();
    c = a.getTraversalCount(e) - e.getMinTraversals();
    ctatdebug("CTATExampleTracerLinkComparator --\x3e in compare tc1, tc2: " + d + ", " + c);
    if (0 > d && 0 <= c) {
      return -1;
    }
    if (0 <= d && 0 > c) {
      return 1;
    }
    ctatdebug("CTATExampleTracerLinkComparator --\x3e in compare l1.getIsPreferredLink(): " + f.getIsPreferredLink());
    ctatdebug("CTATExampleTracerLinkComparator --\x3e in compare l2.getIsPreferredLink(): " + e.getIsPreferredLink());
    if (f.getIsPreferredLink()) {
      return -1;
    }
    if (e.getIsPreferredLink()) {
      return 1;
    }
    if (0 !== (d = CTATMatcherComparator.compare(f.getMatcher(), e.getMatcher()))) {
      return d;
    }
    ctatdebug("CTATExampleTracerLinkComparator --\x3e in compare l1.getUniqueID(): " + f.getUniqueID());
    ctatdebug("CTATExampleTracerLinkComparator --\x3e in compare l2.getUniqueID(): " + e.getUniqueID());
    return f.getUniqueID() < e.getUniqueID() ? -1 : 1;
  };
};
CTATExampleTracerLinkComparator.prototype = Object.create(CTATBase.prototype);
CTATExampleTracerLinkComparator.prototype.constructor = CTATExampleTracerLinkComparator;
"undefined" !== typeof module && (module.exports = CTATExampleTracerLinkComparator);
var CTATExampleTracerEvent = function(a, b, f) {
  CTATBase.call(this, "CTATExampleTracerEvent", b ? b.toString() : "null");
  var e = "", d = !1, c = CTATExampleTracerLink.NO_MODEL, g = !1, h = null, l = null, m = "student", q = null, p = null, n = "", x = null, u = null, w = null, z = null, t = null, D = [], C = !1, H = null, E = null, A = this;
  this.getActor = function() {
    return m;
  };
  this.setActor = function(a) {
    A.ctatdebug("CTATExampleTracerEvent --\x3e setActor(" + a + ")");
    m = a;
  };
  this.getStudentSAI = function() {
    A.ctatdebug("CTATExampleTracerEvent.getStudentSAI() returning type " + typeof h + ", value " + h);
    return h;
  };
  this.setStudentSAI = function(a) {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in setStudentSAI(" + a + ")");
    null !== a && "undefined" !== typeof a && (h = a);
    A.ctatdebug("CTATExampleTracerEvent --\x3e out of setStudentSAI");
  };
  this.getPreloadedLinkMatches = function() {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in getPreloadedLinkMatches");
    return u;
  };
  this.setTutorSAI = function(a) {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in setTutorSAI");
    null !== a && "undefined" !== typeof a && (l = a);
    A.ctatdebug("CTATExampleTracerEvent --\x3e out of setTutorSAI");
  };
  this.setNumberOfInterpretations = function(a) {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in setNumberOfInterpretations( " + a + " )");
  };
  this.getTransactionID = function() {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in getTransactionID() returning " + e);
    return e;
  };
  this.setTransactionID = function(a) {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in setTransactionID( " + a + " )");
    e = a;
  };
  this.setDoneStepFailed = function(a) {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in setDoneStepFailed( " + a + " )");
    d = a;
  };
  this.setHintRequest = function(a) {
    g = a;
  };
  this.getHintRequest = function() {
    return g;
  };
  this.setResult = function(a) {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in setResult( " + a + " )");
    c = a;
  };
  this.isSolverResult = function() {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in isSolverResult");
    return !1;
  };
  this.getResult = function() {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in getResult() returning " + c);
    return c;
  };
  this.setReportableLink = function(a) {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in setReportableLink(" + a + ")");
    q = a;
  };
  this.setReportableInterpretation = function(a) {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in setReportableInterpretation(" + a + ")");
    p = a;
  };
  this.setStepID = function(a) {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in setStepID(" + a + ")");
    n = a ? a.toString() : "";
  };
  this.setReportableVariableTable = function(a) {
    z = a.clone();
  };
  this.setSuccessOrBuggyMsg = function(a) {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in setSuccessOrBuggyMsg(" + a + ")");
    t = a;
  };
  this.setReportableHints = function(a) {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in setReportableHints(" + a + ")");
    D = Array.isArray(a) && 0 < a.length ? a : [];
  };
  this.getWantReportableHints = function() {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in getWantReportableHints() returning " + C);
    return C;
  };
  this.setOutOfOrder = function(a) {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in setOutOfOrder(" + a + ")");
    x = a;
  };
  this.isOutOfOrder = function() {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in getOutOfOrder() returning " + x);
    return x;
  };
  this.setEvaluatedInput = function(a) {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in setEvaluatedInput(" + a + ")");
    if (null === w || "undefined" === typeof w) {
      w = [];
    }
    w.push(a);
  };
  this.addPreloadedLinkMatch = function(a) {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in addPreloadedLinkMatch(" + a + ")");
    if (null === u || "undefined" === typeof u) {
      u = [];
    }
    u.push(a);
  };
  this.setInterpolatedSAI = function(a) {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in setInterpolatedSAI(" + a + ")");
    a && (H = a);
  };
  this.getInterpolatedSAI = function() {
    return H ? H : A.getStudentSAI();
  };
  this.setInterpolatedHints = function(a) {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in setInterpolatedHints(" + a + ")");
    null !== E && "undefined" !== typeof E && (E.length = 0);
    null !== a && "undefined" !== typeof a && (E = a.slice(0));
    A.ctatdebug("CTATExampleTracerEvent --\x3e out of setInterpolatedHints");
  };
  this.setWantReportableHints = function(a) {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in setWantReportableHints(" + a + ")");
    C = a;
  };
  this.getSuccessOrBuggyMsg = function() {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in getSuccessOrBuggyMsg() returning " + t);
    return t;
  };
  this.getReportableHints = function() {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in getReportableHints() returning " + D);
    return D;
  };
  this.getReportableLink = function() {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in getReportableLink() returning " + q);
    return q;
  };
  this.getReportableVariableTable = function() {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in getReportableVariableTable() returning " + z);
    return z;
  };
  this.getReportableInterpretation = function() {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in getReportableInterpretation() returning " + p);
    return p;
  };
  this.getStepID = function() {
    A.ctatdebug("CTATExampleTracerEvent --\x3e in getStepID() returning " + n);
    return n;
  };
  this.getTutorSelection = function() {
    return null === l || "undefined" === typeof l ? null : l.getSelectionArray();
  };
  this.getTutorAction = function() {
    return null === l || "undefined" === typeof l ? null : l.getActionArray();
  };
  this.getTutorInput = function() {
    return null !== w && "undefined" !== typeof w ? A.getEvaluatedInputArray() : null !== l && "undefined" !== typeof l ? l.getInputArray() : null;
  };
  this.getEvaluatedInputArray = function() {
    return w;
  };
  this.toString = function() {
    var a;
    a = "[" + A.getResult();
    null !== A.getStudentSAI() && "undefined" !== typeof A.getStudentSAI() && (a += ", StudentSAI " + A.getStudentSAI());
    null !== A.getReportableLink() && "undefined" !== typeof A.getReportableLink() && (a += ", reportableLink " + A.getReportableLink());
    !0 === A.isDoneStepFailed() && (a += ", doneStepFailed");
    null !== A.getTutorSAI() && "undefined" !== typeof A.getTutorSAI() && (a += ", TutorSAI " + A.getTutorSAI());
    return a + "]";
  };
  this.isDoneStepFailed = function() {
    return d;
  };
  this.getTutorSAI = function() {
    return l;
  };
  this.setStudentSAI(b);
  this.setActor(f);
};
CTATExampleTracerEvent.prototype = Object.create(CTATBase.prototype);
CTATExampleTracerEvent.prototype.constructor = CTATExampleTracerEvent;
"undefined" !== typeof module && (module.exports = CTATExampleTracerEvent);
var CTATExampleTracerInterpretation = function(a) {
  CTATBase.call(this, "CTATExampleTracerInterpretation", "");
  var b = [], f = {}, e = new CTATVariableTable, d = new Set;
  a.forEach(function(a) {
    d.add(a);
  });
  var c = CTATExampleTracerLink.CORRECT_ACTION, g = null, h = this;
  this.getVariableTable = function() {
    return e;
  };
  this.setVariableTable = function(a) {
    e = a;
  };
  this.getTraversalCount = function(a) {
    a = f[a.getUniqueID()];
    return "undefined" === typeof a || null === a ? 0 : a[0];
  };
  this.getPaths = function() {
    return d;
  };
  this.clone = function() {
    var a = new CTATExampleTracerInterpretation(d);
    a.addTraversedLinks(b);
    for (var h in f) {
      f.hasOwnProperty(h) && a.putInlinkIdTraversalCountMap(h, f[h].slice());
    }
    a.setWorstLinkType(c);
    h = e.clone();
    a.setVariableTable(h);
    g && a.setPathToDone(new CTATExampleTracerPath(g.getLinks()));
    ctatdebug("CTATExampleTracerInterpretation --\x3e out of clone");
    return a;
  };
  this.addTraversedLinks = function(a) {
    b = b.concat(a);
  };
  this.putInlinkIdTraversalCountMap = function(a, b) {
    ctatdebug("CTATExampleTracerInterpretation --\x3e in putInlinkIdTraversalCountMap");
    ctatdebug("CTATExampleTracerInterpretation --\x3e in putInlinkIdTraversalCountMap key: " + a);
    ctatdebug("CTATExampleTracerInterpretation --\x3e in putInlinkIdTraversalCountMap value: " + b);
    f[a] = b;
  };
  this.setWorstLinkType = function(a) {
    c = a;
  };
  this.addLink = function(a) {
    !a.isTraversable() || g && g.getLinks().has(a) || (g = null);
    ctatdebug("CTATExampleTracerInterpretation.addLink(" + (a && a.getUniqueID()) + ") pathToDone " + (g && g.size()));
    b.push(a);
    var d = a.getMatcher(), d = null === d || "undefined" === typeof d ? 1 : d.getTraversalIncrement(), e = f[a.getUniqueID()];
    null !== e && "undefined" !== typeof e ? e[0] += d : (e = [], e.push(d), f[a.getUniqueID()] = e);
    a = a.getType();
    0 > CTATExampleTracerLink.compareLinkTypes(c, a) && (c = a);
  };
  this.setPathToDone = function(a) {
    g = a;
  };
  this.getPathToDone = function(a) {
    if (g) {
      return g;
    }
    var c = a.getStartNode();
    c && a.getDoneStates().forEach(function(d) {
      g || (g = a.getBestSubpath(c, d, b));
    });
    return g;
  };
  this.countStepsForScore = function(a) {
    var b = Number.MAX_VALUE;
    (a = h.getPathToDone(a)) && a.getLinks() && (b = 0, a.getLinks().forEach(function(a) {
      if (!CTATMatcher.isTutorActor(a.getActor(), !0)) {
        var c = h.getTraversalCount(a);
        a = a.getMinTraversals();
        b = c > a ? b + c : b + a;
      }
    }));
    return b;
  };
  this.updateVariableTable = function(a, b, c) {
    var d = a, g = a.getInput();
    null !== b && "undefined" !== typeof b && (g = b, d = new CTATSAI(a.getSelection(), a.getAction(), g));
    e.put("link" + c.getUniqueID() + ".selection", a.getSelection());
    e.put("link" + c.getUniqueID() + ".action", a.getAction());
    b = "link" + c.getUniqueID() + ".input";
    e.put(b, g);
    e.put(CTATVariableTable.nameAsString(b), CTATVariableTable.valueAsString(g));
    if (CTATExampleTracerLink.CORRECT_ACTION.toString().toUpperCase() === c.getActionType().toString().toUpperCase() || CTATExampleTracerLink.FIREABLE_BUGGY_ACTION.toString().toUpperCase() === c.getActionType().toString().toUpperCase()) {
      a = a.getSelection(), null !== a && "undefined" !== typeof a && 0 < a.length && e.put(a, g);
    }
    return d;
  };
  this.getLastMatchedLink = function() {
    return 0 === b.length ? null : b[b.length - 1];
  };
  this.getMatchedLinks = function() {
    return b;
  };
  this.getType = function() {
    return c;
  };
  this.isTraversed = function(a, b) {
    ctatdebug("CTATExampleTracerInterpretation --\x3e in isTraversed: " + a.getUniqueID());
    var c = f[a.getUniqueID()];
    if (null === c || "undefined" === typeof c) {
      return ctatdebug("CTATExampleTracerInterpretation --\x3e in isTraversed in if condition (traversalCount === null): " + (null === c)), ctatdebug("CTATExampleTracerInterpretation --\x3e in isTraversed in if condition (typeof(traversalCount) === 'undefined'): " + ("undefined" === typeof c)), !0 === b ? 0 >= a.getMinTraversals() : !1;
    }
    ctatdebug("CTATExampleTracerInterpretation --\x3e in isTraversed out of if condition traversalCount[0]: " + c[0]);
    ctatdebug("CTATExampleTracerInterpretation --\x3e in isTraversed out of if condition link.getMinTraversals(): " + a.getMinTraversals());
    return c[0] >= a.getMinTraversals();
  };
  this.toString = function() {
    var a = "{";
    b.forEach(function(b) {
      a += b.getUniqueID() + ", ";
    });
    a.substring(a.length - 2, a.length).toString() === ", ".toString() && (a = a.substring(0, a.length - 2));
    a += " (" + (null === d || "undefined" === typeof d ? -1 : d.size) + " paths)";
    a += " var tbl " + e;
    return a += "}";
  };
};
CTATExampleTracerInterpretation.prototype = Object.create(CTATBase.prototype);
CTATExampleTracerInterpretation.prototype.constructor = CTATExampleTracerInterpretation;
"undefined" !== typeof module && (module.exports = CTATExampleTracerInterpretation);
var CTATExampleTracerInterpretationComparator = function() {
  CTATBase.call(this, "CTATExampleTracerInterpretationComparator", "");
  var a = this;
  this.compare = function(b, f) {
    a.ctatdebug("CTATExampleTracerInterpretationComparator --\x3e in compare");
    var e = b.getType(), d = CTATExampleTracerLink.compareLinkTypes(e, f.getType());
    ctatdebug("CTATExampleTracerInterpretationComparator comparing i1Type: " + b.getType());
    ctatdebug("CTATExampleTracerInterpretationComparator comparing i2Type: " + f.getType());
    ctatdebug("CTATExampleTracerInterpretationComparator comparing link types result: " + d);
    if (0 !== d) {
      return ctatdebug("CTATExampleTracerInterpretationComparator result is not equal to 0"), 0 > d ? 1 : -1;
    }
    if (CTATExampleTracerLink.BUGGY_ACTION.toString().toUpperCase() === e.toString().toUpperCase() && (ctatdebug("CTATExampleTracerInterpretationComparator checking for buggy actions"), e = b.getLastMatchedLink(), d = f.getLastMatchedLink(), e = CTATMatcherComparator.compare(e.getMatcher(), d.getMatcher()), 0 !== e)) {
      return e;
    }
    var d = CTATExampleTracerPath.getBestPath(b.getPaths()), e = CTATExampleTracerPath.getBestPath(f.getPaths()), c = new Set;
    c.add(d);
    c.add(e);
    d = CTATExampleTracerPath.getBestPath(c);
    ctatdebug("CTATExampleTracerInterpretationComparator found best path: " + (d === e));
    d.getLinks().forEach(function(b) {
      a.ctatdebug("My best link==: " + b.getUniqueID());
    });
    return d === e ? -1 : 1;
  };
};
CTATExampleTracerInterpretationComparator.prototype = Object.create(CTATBase.prototype);
CTATExampleTracerInterpretationComparator.prototype.constructor = CTATExampleTracerInterpretationComparator;
"undefined" !== typeof module && (module.exports = CTATExampleTracerInterpretationComparator);
var CTATExampleTracerTracer_count = 0, CTATExampleTracerTracer = function(a, b) {
  function f(a, b, c) {
    if (!a) {
      return a;
    }
    b = new CTATFormulaParser(b);
    r.ctatdebug("CTATETT.interpolate(" + a + ",vt," + c + ")");
    var d = c.getSelection(), e = c.getAction();
    c = c.getInput();
    c = CTATVariableTable.standardizeType(c);
    r.ctatdebug("CTATETT.interpolate() calling CTATFP.interpolate(" + a + ", " + d + ", " + e + ", " + c);
    a = b.interpolate(a, d, e, c);
    r.ctatdebug("CTATETT.interpolate() returning " + a);
    return a;
  }
  function e(a, b, c, d, e, g) {
    null == d && (d = e.getLastMatchedLink());
    if (b) {
      r.ctatdebug("finishEvaluate -- in if Branch doUpdate()");
      C.push(a.getStudentSAI());
      d != e.getLastMatchedLink() && (e.addLink(d), a.setResult(d.getActionType()));
      if (c.toString() === CTATExampleTracerLink.CORRECT_ACTION.toString() || c.toString() === CTATExampleTracerLink.FIREABLE_BUGGY_ACTION.toString()) {
        r.ctatdebug("In evaluate -- in first branch doUpdate()");
        g.forEach(function(a) {
          a.getLastMatchedLink().getType().toString() === CTATExampleTracerLink.BUGGY_ACTION.toString() && (r.ctatdebug("In evaluate -- deleting an incorrect interp"), g["delete"](a));
        });
        r.ctatdebug("In evaluate -- to call setInterpretations(), if 0 < newInterps.size " + g.size);
        0 < g.size && p(g);
        for (var h in D) {
          D.hasOwnProperty(h) && delete D[h];
        }
        r.ctatdebug("In evaluate -- out of DoUpdate if branch");
      } else {
        r.ctatdebug("In evaluate -- in else branch of doUpdate");
        a.setNumberOfInterpretations(0);
        for (var l in D) {
          D.hasOwnProperty(l) && delete D[l];
        }
        g.forEach(function(a) {
          D[a.getLastMatchedLink().getUniqueID()] = a.getLastMatchedLink();
        });
      }
      c.toString() === CTATExampleTracerLink.BUGGY_ACTION.toString() && C.splice(C.length - 1, 1);
    }
    a.isSolverResult() || (r.ctatdebug("In evaluate inside the solver result if condition + " + c), a.setResult(c));
    r.ctatdebug("In evaluate out the solver result if condition");
    a.setReportableLink(d);
    a.setReportableInterpretation(e);
    a.setReportableVariableTable(e.getVariableTable());
    a.getHintRequest() || (b = d.getTutorSAI(a.getInterpolatedSAI(), e.getVariableTable()), r.ctatdebug("In evaluate -- TUTORSAI: " + b + ", studentSAI was " + a.getStudentSAI()), a.setTutorSAI(b));
    b = c == CTATExampleTracerLink.CORRECT_ACTION ? d.getSuccessMsg() : d.getBuggyMsg();
    a.setSuccessOrBuggyMsg(f(b, e.getVariableTable(), a.getStudentSAI()));
    a.getHintRequest() && (e = d.interpolateHints(e.getVariableTable()), a.setInterpolatedHints(e), r.ctatdebug("In evaluate after calling setInterpolatedHints"), Array.isArray(e) && 0 < e.length ? a.setReportableHints(e) : a.setReportableHints(d.getHints()), r.ctatdebug("In evaluate --\x3e after setReportableHints"));
    r.ctatdebug("In evaluate after fireExampleTracerEvent");
    r.ctatdebug("CTATExampleTracerTracer --\x3e out of finishEvaluate");
    return c.toString() !== CTATExampleTracerLink.BUGGY_ACTION.toString();
  }
  function d(a, b, c, d) {
    r.ctatdebug("checkDoneStep() hintTrace " + b + ", sai " + a.getStudentSAI() + ", exitOnIncorrectDone " + H.exitOnIncorrectDone() + ", hideButRequireSteps " + H.hideButRequireSteps() + ", nInterps " + d.size);
    if (!a.getStudentSAI().isDone()) {
      return r.ctatdebug("checkDoneStep() not isDone(), so setDoneStepFailed(false) & return null "), null;
    }
    if (H.exitOnIncorrectDone()) {
      return a.setDoneStepFailed(!1), r.ctatdebug("checkDoneStep() exitOnIncorrectDone() with setDoneStepFailed(false), so return null "), null;
    }
    if (!b && H.hideButRequireSteps()) {
      b = H.getDoneLinks();
      r.ctatdebug("checkDoneStep getDoneLinks().size " + b.size);
      b = b.values();
      for (var g;!(g = b.next()).done;) {
        if (H.pathToLinkIsSubset(g.value, y)) {
          return a.setDoneStepFailed(!1), 1 > d.size ? e(a, c, CTATExampleTracerLink.CORRECT_ACTION, g.value, r.getBestInterpretation(), r.getInterpretationsInternal()) : e(a, c, CTATExampleTracerLink.CORRECT_ACTION, g.value, q(d), d);
        }
      }
    }
    1 > d.size && a.setDoneStepFailed(!0);
    return null;
  }
  function c(a, b, c) {
    r.ctatdebug("CTATExampleTracerTracer --\x3e _evaluate(" + a + ", " + b + ", " + c + ")");
    E = a;
    var f = new Set, n = a.getPreloadedLinkMatches();
    r.ctatdebug("interps # : " + t.length);
    r.ctatdebug("interps: " + t);
    t.forEach(function(d) {
      r.ctatdebug("In evaluate -- entered the interpretations loop");
      if ("undefined" === typeof n || null === n) {
        r.ctatdebug("In evaluate -- entered if check for saiLinkMatches"), n = h(a.getStudentSAI(), a.getActor(), b, d.getVariableTable(), a), r.ctatdebug("In evaluate -- exiting if check for saiLinkMatches");
      } else {
        for (var e = 0;e < n.length;++e) {
          g(a.getStudentSAI(), !0, n[e], n[e].getActor(), d.getVariableTable());
        }
      }
      r.ctatdebug("Link matches # : " + n.length);
      n.forEach(function(b) {
        r.ctatdebug("In evaluate -- entered the saiLinkMatches loop + " + b);
        if (!H.relaxOrderConstraints() && d.getTraversalCount(b) >= b.getMaxTraversals()) {
          return r.ctatdebug("In evaluate -- skipped a saiLinkMatches loop \n Skipped due to max traversals" + b.getMaxTraversals()), !1;
        }
        var e = d.clone();
        r.ctatdebug("In evaluate size of getPaths " + e.getPaths().size);
        e.getPaths().forEach(function(c) {
          r.ctatdebug("In evaluate -- looping through the newInterp.getPaths()\n Examining path: " + c);
          !1 === l(b, e, c, !1, a) && (r.ctatdebug("In evaluate -- in if condition, checking if isPathOK"), e.getPaths()["delete"](c), r.ctatdebug("In evaluate -- out of if condition, checking if isPathOK\n Tried to delete path."));
        });
        r.ctatdebug("In evaluate -- done looping through the newInterp.getPaths(), size " + e.getPaths().size);
        if (0 < e.getPaths().size) {
          r.ctatdebug("In evaluate -- if number of paths is greater than 0");
          e.addLink(b);
          r.ctatdebug("In evaluate -- new link added");
          if (!0 === c) {
            r.ctatdebug("In evaluate -- we are in the doUpdate if condition");
            var g = m(b, a.getStudentSAI(), e);
            r.ctatdebug("In evaluate -- updatingVariable table");
            a.setInterpolatedSAI(e.updateVariableTable(a.getStudentSAI(), g, b));
            r.ctatdebug("In evaluate -- done updatingVariable table: " + e.getVariableTable());
          }
          f.add(e);
          r.ctatdebug("In evaluate -- added new interp");
        }
        r.ctatdebug("In evaluate -- out of saiLinkMatches loop");
      });
      r.ctatdebug("In evaluate -- out of interpretation loops");
    });
    a.setNumberOfInterpretations(f.size);
    r.ctatdebug("In evaluate -- number of interpretations " + f.size + " set");
    var p = d(a, b, c, f);
    if (null !== p) {
      return p;
    }
    if (0 === f.size) {
      return r.ctatdebug("In evaluate -- if condition no new interpretations"), 0 !== n.length && !0 === n[0].isDone() && a.setDoneStepFailed(!0), a.setResult(CTATExampleTracerLink.NO_MODEL), r.ctatdebug("In evaluate -- if condition no new interpretations returning false"), !1;
    }
    p = q(f);
    r.ctatdebug("In evaluate -- just found bestInterp");
    var u = null;
    !0 === a.isSolverResult() ? (r.ctatdebug("In evaluate -- in if branch of isSolverResult"), u = CTATExampleTracerLink.NO_MODEL.toString().toUpperCase() === a.getResult().toString().toUpperCase() ? CTATExampleTracerLink.BUGGY_ACTION.toString() : a.getResult().toString()) : (r.ctatdebug("In evaluate -- in else branch of isSolverResult"), u = p.getLastMatchedLink().getType());
    return e(a, c, u, null, p, f);
  }
  function g(a, b, c, d, e) {
    var g = b && c.isCorrect();
    if ("undefined" != typeof y[c.getUniqueID()] || c.matchesSAIforHint(a, d, null, e)) {
      y[c.getUniqueID()] = g;
    }
    r.ctatdebug("updateMatchedSelections(): link " + c.getUniqueID() + ", matched " + b + ", newResult " + g + ", matchedSelections[link] " + y[c.getUniqueID()]);
  }
  function h(a, b, c, d, e) {
    r.ctatdebug("CTATExampleTracerTracer --\x3e in findSAIMatchingLinks(" + a + ", " + b + ", " + c + ")");
    var f = [];
    H.getLinks().forEach(function(h) {
      if (!1 === c) {
        r.ctatdebug("Calling link.matchesSAI() on link " + h + ", sai " + a);
        var l = h.matchesSAI(a, b, d);
        r.ctatdebug("Result from link.matchesSAI() on link " + h + ": " + l + ", typeof " + typeof l);
        !0 === l && f.push(h);
        H.hideButRequireSteps() && g(a, l, h, b, d);
      } else {
        !0 === h.matchesSAIforHint(a, b, e, d) && f.push(h);
      }
    });
    r.ctatdebug("CTATExampleTracerTracer --\x3e out of findSAIMatchingLinks: #matchingLinks " + f.length);
    return f;
  }
  function l(a, b, c, d, e) {
    r.ctatdebug("CTATExampleTracerTracer --\x3e in isPathOK");
    var g = null;
    if (!0 === d) {
      r.ctatdebug("CTATExampleTracerTracer --\x3e in isPathOK in demonstrate mode");
      var f = b.getMatchedLinks().slice();
      f.push(a);
      g = c.getLinksRestricted(f);
    } else {
      r.ctatdebug("CTATExampleTracerTracer --\x3e in isPathOK NOT in demonstrate mode"), g = c.getLinks();
    }
    r.ctatdebug("CTATExampleTracerTracer --\x3e in isPathOK path.getLinks() " + c.getLinks().size);
    r.ctatdebug("CTATExampleTracerTracer --\x3e in isPathOK pathLinks " + g.size);
    if (!0 === d) {
      var h = [], l = !0;
      b.getMatchedLinks().forEach(function(a) {
        !1 !== l && (!1 === H.observesOrderingConstraints(h, a, g, e) || !1 === x(b, a, g) ? (r.ctatdebug("CTATExampleTracerTracer --\x3e in isPathOK returning false1"), l = !1) : h.push(a));
      });
      if (!1 === l) {
        return r.ctatdebug("CTATExampleTracerTracer --\x3e in isPathOK returning false2"), !1;
      }
    }
    if (a.getType().toString() === CTATExampleTracerLink.BUGGY_ACTION.toString()) {
      if (!1 === H.isIncorrectLinkOK(b.getMatchedLinks(), a, g, b)) {
        return r.ctatdebug("CTATExampleTracerTracer --\x3e in isPathOK returning false3"), !1;
      }
    } else {
      if (!1 === H.observesOrderingConstraints(b.getMatchedLinks(), a, g, e)) {
        return r.ctatdebug("CTATExampleTracerTracer --\x3e in isPathOK returning false4"), !1;
      }
      if (!1 === x(b, a, g)) {
        return r.ctatdebug("CTATExampleTracerTracer --\x3e in isPathOK returning false5"), !1;
      }
    }
    r.ctatdebug("CTATExampleTracerTracer --\x3e out of isPathOK returning true");
    return !0;
  }
  function m(a, b, c) {
    r.ctatdebug("CTATExampleTracerTracer.replaceInput(" + a + ", " + b + ", ...)");
    if (null === a || "undefined" === typeof a || !1 === a.replaceInput()) {
      return r.ctatdebug("replaceInput false, returning null"), null;
    }
    a = a.evaluateReplacement(b, c.getVariableTable(), r);
    r.ctatdebug("CTATExampleTracerTracer.replaceInput() returning " + a);
    return a;
  }
  function q(a) {
    r.ctatdebug("CTATExampleTracerTracer --\x3e in findBestInterpretation");
    var b = new CTATExampleTracerInterpretationComparator, c = null;
    a.forEach(function(a) {
      r.ctatdebug("CTATExampleTracerTracer --\x3e in findBestInterpretation iteration");
      null === c || "undefined" === typeof c ? (r.ctatdebug("CTATExampleTracerTracer --\x3e in findBestInterpretation first if condition"), c = a) : (r.ctatdebug("CTATExampleTracerTracer --\x3e in findBestInterpretation else of first if condition"), 0 < b.compare(a, c) && (r.ctatdebug("CTATExampleTracerTracer --\x3e in findBestInterpretation second if condition"), c = a));
    });
    r.ctatdebug("CTATExampleTracerTracer --\x3e out of findBestInterpretation");
    return c;
  }
  function p(a) {
    r.ctatdebug("CTATExampleTracerTracer --\x3e in setInterpretations");
    t.length = 0;
    0 === a.size ? r.ctatdebug("CTATExampleTracerTracer --\x3e returning from setInterpretations") : (r.ctatdebug("CTATExampleTracerTracer --\x3e setInterpretations c.size: " + a.size), a.forEach(function(a) {
      t.push(a);
    }), A = null, r.ctatdebug("CTATExampleTracerTracer --\x3e out of setInterpretations"));
  }
  function n() {
    r.ctatdebug("CTATExampleTracerTracer --\x3e in getAllPaths");
    var a = H.findAllPaths();
    r.ctatdebug("CTATExampleTracerTracer --\x3e in getAllPaths: #paths " + a.size);
    a.forEach(function(a) {
      r.ctatdebug("CTATExampleTracerTracer --\x3e in getAllPaths loopring through paths");
      r.ctatdebug("CTATExampleTracerTracer --\x3e in getAllPaths size of path" + a.getLinks().size);
    });
    return a;
  }
  function x(a, b, c) {
    r.ctatdebug("CTATExampleTracerTracer --\x3e in doneStepOK: link " + b + ", isDone() " + b.isDone());
    if (null === b || "undefined" === typeof b || !1 === b.isDone()) {
      return r.ctatdebug("doneStepOK in first if condition"), !0;
    }
    if (b.isDone() && H.exitOnIncorrectDone()) {
      return !0;
    }
    if (b.getType().toString() === CTATExampleTracerLink.BUGGY_ACTION.toString()) {
      return r.ctatdebug("doneStepOK in second if condition"), !0;
    }
    r.ctatdebug("doneStepOK before loop");
    var d = !0;
    c.forEach(function(c) {
      if (!1 === d) {
        r.ctatdebug("CTATExampleTracerTracer --\x3e we are breaking from the loop");
      } else {
        if (c.getUniqueID() === b.getUniqueID()) {
          r.ctatdebug("CTATExampleTracerTracer --\x3e inside second if condition");
        } else {
          var e = a.getTraversalCount(c);
          H.hideButRequireSteps() && (0 < e || 1 > c.getMinTraversals()) || !(e < c.getMinTraversals()) || (r.ctatdebug("CTATExampleTracerTracer --\x3e we should return false from the second if condition"), d = !1);
        }
      }
    });
    if (!1 === d) {
      return r.ctatdebug("CTATExampleTracerTracer --\x3e out of doneStepOK returning false"), !1;
    }
    r.ctatdebug("CTATExampleTracerTracer --\x3e out of doneStepOK returning true");
    return !0;
  }
  function u(a, b) {
    r.ctatdebug("CTATExampleTracerTracer --\x3e in _getBestNextLink");
    var c = null !== b && "undefined" !== typeof b && null !== b[0] && "undefined" !== typeof b[0] ? b[0] : null;
    if (null === c || "undefined" === typeof c) {
      r.ctatdebug("CTATExampleTracerTracer --\x3e in _getBestNextLink first if condition"), c = r.getBestInterpretation();
    }
    null !== b && "undefined" !== typeof b && (b[0] = c);
    r.ctatdebug("CTATExampleTracerTracer --\x3e in _getBestNextLink interp.getPaths(): " + c.getPaths().size);
    var d = CTATExampleTracerPath.getBestPath(c.getPaths());
    r.ctatdebug("CTATExampleTracerTracer --\x3e in _getBestNextLink path: " + d);
    var e = w(c, d, a, !1);
    r.ctatdebug("CTATExampleTracerTracer --\x3e in _getBestNextLink highestLink: " + e);
    if (null !== e && "undefined" !== typeof e) {
      return r.ctatdebug("CTATExampleTracerTracer --\x3e in _getBestNextLink returning highestLink"), e;
    }
    var g = null;
    r.ctatdebug("CTATExampleTracerTracer --\x3e in _getBestNextLink returning path.getLinks() " + d.getLinks().size);
    r.ctatdebug("CTATExampleTracerTracer --\x3e in _getBestNextLink returning path.getSortedLinks() " + d.getSortedLinks());
    var f = !1, h = null;
    d.getSortedLinks().forEach(function(b) {
      !0 !== f && (r.ctatdebug("CTATExampleTracerTracer --\x3e in _getBestNextLink in for loop" + b), g = b, c.getTraversalCount(b) < b.getMaxTraversals() && (!1 === a || 0 < r.nonEmptyHints(b, c.getVariableTable())) && H.observesOrderingConstraints(c.getMatchedLinks(), b, d.getLinks(), null) && x(c, b, d.getLinks()) && (r.ctatdebug("CTATExampleTracerTracer --\x3e in _getBestNextLink in link: " + b), h = b, f = !0));
    });
    if (!0 === f) {
      return h;
    }
    r.ctatdebug("CTATExampleTracerTracer --\x3e out of _getBestNextLink, returning: " + g);
    return null;
  }
  function w(a, b, c, d) {
    r.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink");
    var e = new CTATExampleTracerEvent(r, null, CTATMsgType.DEFAULT_STUDENT_ACTOR), g = !0, f = [];
    b.getSortedLinks().forEach(function(b) {
      r.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink in loop link.getUniqueID(): " + b.getUniqueID());
      r.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink in loop interp.isTraversed(link, countOptionalAsTraversed): " + a.isTraversed(b, d));
      r.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink in loop isNoOp(link): " + z(b));
      !0 === a.isTraversed(b, d) || !0 === z(b) ? (r.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink in if condition"), g = !0) : (!0 === g && (r.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink in second if condition"), H.getNode(b.getPrevNode()).getOutLinks().forEach(function(b) {
        c && 1 > r.nonEmptyHints(b, a.getVariableTable()) || a.getTraversalCount(b) >= b.getMaxTraversals() || (r.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink pushing outlink: " + b.getUniqueID()), f.push(b));
      })), g = null === b || "undefined" === typeof b ? !1 : b.getMinTraversals() <= a.getTraversalCount(b));
    });
    f.sort(function(b, c) {
      return (new CTATExampleTracerLinkComparator(a, r)).compare(b, c);
    });
    r.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink before sorting");
    var h = !1, n = null;
    f.forEach(function(c) {
      !0 !== h && (r.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink after sorting in fro loop"), !0 === l(c, a, b, !1, e) ? (r.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink after sorting first if"), n = c, h = !0) : a.getPaths().forEach(function(d) {
        !0 !== h && (r.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink after sorting in inner loop"), b !== d && (r.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink after sorting second if"), !0 === l(c, a, d, !1, e) && (r.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink after sorting third if"), n = c, h = !0)));
      }));
    });
    if (!0 === h) {
      return r.ctatdebug("CTATExampleTracerTracer --\x3e in getHighestUntraversedLink returning: " + n.getUniqueID()), n;
    }
    r.ctatdebug("CTATExampleTracerTracer --\x3e out of getHighestUntraversedLink");
    return null;
  }
  function z(a) {
    return null === a || "undefined" === typeof a ? !1 : 1 > a.getMinTraversals() && 1 > a.getMaxTraversals();
  }
  CTATBase.call(this, "CTATExampleTracerTracer", a);
  var t = null, D = null, C = null, H = a, E = null;
  CTATExampleTracerTracer_count++;
  var A = null, y = {}, r = this;
  this.goToState = function(a, b) {
    if (!a) {
      return !1;
    }
    var c = "done" == a.toString().toLowerCase(), d = null;
    if (!c && !(d = H.findNode(a))) {
      return !1;
    }
    var e = r.getBestInterpretation();
    if (e && (c ? r.goToDone(e, H, b) : r.advanceToNode(d, H, b))) {
      return !0;
    }
    for (var g = 0;g < t.length;++g) {
      var f = t[g];
      if (f != e && (c ? r.goToDone(f, H, b) : r.advanceToNode(d, H, b))) {
        return !0;
      }
    }
    return !1;
  };
  this.goToDone = function(a, b, c) {
    return (a = a.getPathToDone(b)) ? c.traceLinks(a.getSortedLinks()) : !1;
  };
  this.advanceToNode = function(a, b, c) {
    a = b.getBestSubpath(b.getStartNode(), a);
    r.ctatdebug("advanceToNode() path " + a);
    a && (a = a.getSortedLinks(), results = c.traceLinks(a), r.ctatdebug("advanceToNode() results " + results));
  };
  this.getMatchedSelections = function() {
    return y;
  };
  this.getLastResult = function() {
    r.ctatdebug("CTATExampleTracerTracer --\x3e in getResult");
    return E;
  };
  this.resetTracer = function() {
    r.ctatdebug("CTATExampleTracerTracer --\x3e in resetTracer entering");
    null === t || "undefined" === typeof t ? (r.ctatdebug("CTATExampleTracerTracer --\x3e in resetTracer making interpretations array"), t = []) : (r.ctatdebug("CTATExampleTracerTracer --\x3e in resetTracer clearing interpretations array"), t.length = 0);
    var a = new CTATExampleTracerInterpretation(n());
    r.ctatdebug("CTATExampleTracerTracer tempInterp--\x3e in resetTracer tempInterp " + a);
    null !== b && "undefined" !== typeof b && (r.ctatdebug("CTATExampleTracerTracer --\x3e in resetTracer startStateVT if condition"), a.setVariableTable(b));
    t.push(a);
    A = a;
    if (null === D || "undefined" === typeof D) {
      r.ctatdebug("CTATExampleTracerTracer --\x3e in resetTracer incorrectActionMatches if condition"), D = {};
    } else {
      r.ctatdebug("CTATExampleTracerTracer --\x3e in resetTracer else branch of incorrectActionMatches if condition");
      for (var c in D) {
        D.hasOwnProperty(c) && delete D[c];
      }
    }
    y = {};
    null === C || "undefined" === typeof C ? (r.ctatdebug("CTATExampleTracerTracer --\x3e in resetTracer last if condition"), C = []) : (r.ctatdebug("CTATExampleTracerTracer --\x3e in resetTracer else branch of last if condition"), C.length = 0);
    r.ctatdebug("CTATExampleTracerTracer --\x3e in resetTracer before iterating over all the links in the graphs");
    H.getLinks().forEach(function(a) {
      a.getMatcher().resetMatcher();
    });
    r.ctatdebug("CTATExampleTracerTracer --\x3e out of resetTracer");
  };
  this.evaluate = function(a) {
    r.ctatdebug("CTATExampleTracerTracer --\x3e in public evaluate(), calling private _evaluate; given event " + a);
    return c(a, !1, !0);
  };
  this.nonEmptyHints = function(a, b) {
    r.ctatdebug("CTATExampleTracerTracer --\x3e in nonEmptyHints");
    if (null === a || "undefined" === typeof a) {
      return 0;
    }
    var c = a.interpolateHints(b);
    r.ctatdebug("CTATExampleTracerTracer --\x3e in nonEmptyHints: link.interpolateHints() " + a.interpolateHints().length);
    if (null === c || "undefined" === typeof c || 1 > c.length) {
      return 0;
    }
    for (var d = 0, e = 0;e < c.length;++e) {
      0 < String(c[e]).trim().length && d++;
    }
    r.ctatdebug("CTATExampleTracerTracer --\x3e returning from nonEmptyHints " + d);
    return d;
  };
  this.traceForHint = function(a) {
    r.ctatdebug("CTATExampleTracerTracer --\x3e in traceForHint");
    var b = c(a, !0, !1);
    r.ctatdebug("CTATExampleTracerTracer --\x3e in traceForHint return from evaluate " + b);
    r.ctatdebug("CTATExampleTracerTracer --\x3e in traceForHint result from evaluate " + a.getResult().toString());
    r.ctatdebug("CTATExampleTracerTracer --\x3e in traceForHint link   from evaluate " + a.getReportableLink());
    if (a.getResult().toString() === CTATExampleTracerLink.CORRECT_ACTION.toString()) {
      return b = a.getReportableLink(), a.setTutorSAI(new CTATSAI(a.getStudentSAI().getSelection(), b.getDefaultSAI().getAction(), b.getDefaultSAI().getInput())), a.setActor(CTATMsgType.DEFAULT_STUDENT_ACTOR), r.ctatdebug("CTATExampleTracerTracer --\x3e traceForHint returning hintLink " + b + ", result " + a), b;
    }
    r.ctatdebug("CTATExampleTracerTracer --\x3e out of traceForHint, returning null");
    return null;
  };
  this.matchForHint = function(a) {
    r.ctatdebug("CTATExampleTracerTracer --\x3e in matchForHint");
    var b;
    b = null === a.getStudentSAI() || "undefined" === typeof a.getStudentSAI() ? null : a.getStudentSAI().getSelectionArray();
    if (null !== b && "undefined" !== typeof b && 0 < b.length && (r.ctatdebug("CTATExampleTracerTracer --\x3e in matchForHint first if"), a.setWantReportableHints(!0), b = r.traceForHint(a), null !== b && "undefined" !== typeof b && 0 < a.getReportableHints().length)) {
      return r.ctatdebug("CTATExampleTracerTracer --\x3e matchForHint via traceForHint returning " + b + ", result " + a), b;
    }
    b = r.getBestNextLink(!0, a);
    r.ctatdebug("CTATExampleTracerTracer --\x3e matchForHint() traceForHint via getBestNextLink returning " + b);
    return b;
  };
  this.getBestNextLink = function(a, b) {
    r.ctatdebug("CTATExampleTracerTracer --\x3e in getBestNextLink");
    var c = [], d = u(a, c);
    if (null === d || "undefined" === typeof d) {
      return r.ctatdebug("CTATExampleTracerTracer --\x3e in getBestNextLink returning null"), null;
    }
    if (d.getType().toString() === CTATExampleTracerLink.BUGGY_ACTION.toString()) {
      return r.ctatdebug("CTATExampleTracerTracer --\x3e in getBestNextLink return null no correct suboptimal step"), null;
    }
    r.ctatdebug("CTATExampleTracerTracer --\x3e in getBestNextLink else branch");
    r.ctatdebug("CTATExampleTracerTracer --\x3e in getBestNextLink got interp " + (null == c ? "null" : c[0]));
    if (b) {
      var e = d.interpolateHints(c[0].getVariableTable());
      b.setInterpolatedHints(e);
      r.ctatdebug("CTATExampleTracerTracer --\x3e in getBestNextLink setInterpolatedHints");
      Array.isArray(e) && 0 < e.length ? b.setReportableHints(e) : b.setReportableHints(d.getHints());
      r.ctatdebug("In evaluate --\x3e after setReportableHints");
      b.setReportableLink(d);
      b.setReportableInterpretation(c[0]);
      b.setResult(d.getType());
      b.setTutorSAI(d.getDefaultSAI());
    }
    r.ctatdebug("CTATExampleTracerTracer --\x3e in getBestNextLink return etLink");
    return d;
  };
  this.doHint = function(a, b, c, d, e, g) {
    r.ctatdebug("CTATExampleTracerTracer --\x3e in doHint");
    var f = c = null;
    if (g && null !== b && "undefined" !== typeof b && 1 < b.length && b[1].toString() === CTATMsgType.PREVIOUS_FOCUS.toString() && null !== a && "undefined" !== typeof a && 1 < a.length && null !== a[1] && "undefined" !== typeof a[1] && a[1].toString() !== "null".toString() && (r.ctatdebug("CTATExampleTracerTracer --\x3e in doHint first if condition"), c = [], c.push(a[1]), 2 < b.length)) {
      for (r.ctatdebug("CTATExampleTracerTracer --\x3e in doHint inner if condition"), f = [], a = 2;a < b.length;a++) {
        r.ctatdebug("CTATExampleTracerTracer --\x3e in doHint for loop " + a), f.push(b[a]);
      }
    }
    r.ctatdebug("CTATExampleTracerTracer --\x3e in doHint out of if condition");
    d = new CTATExampleTracerEvent(r, new CTATSAI(c, f, null), d);
    d.setHintRequest(!0);
    r.ctatdebug("CTATExampleTracerTracer --\x3e in doHint result: " + d);
    b = r.matchForHint(d);
    Array.isArray(e) && (r.ctatdebug("CTATExampleTracerTracer --\x3e in doHint last if condition"), e.push(d));
    r.ctatdebug("CTATExampleTracerTracer --\x3e returning from doHint: " + b);
    return b;
  };
  this.getBestInterpretation = function() {
    r.ctatdebug("CTATExampleTracerTracer --\x3e in getBestInterpretation");
    if (null === A || "undefined" === typeof A) {
      r.ctatdebug("CTATExampleTracerTracer --\x3e in getBestInterpretation in if condition"), A = q(r.getInterpretationsInternal());
    }
    r.ctatdebug("CTATExampleTracerTracer --\x3e out of getBestInterpretation " + (null === A || void 0 === A));
    return A;
  };
  this.getInterpretationsInternal = function() {
    r.ctatdebug("CTATExampleTracerTracer --\x3e in getInterpretationsInternal");
    return t;
  };
  this.toString = function() {
    var a = "TracerState\n";
    null === t ? a += "(no interpretations)\n" : t.forEach(function(b) {
      a += b.toString() + "\n";
    });
    return a;
  };
  this.addInterfaceVariablesFromEvent = function(a) {
    if (a) {
      var b = a.getTutorSelection();
      a = a.getTutorInput();
      r.addInterfaceVariables(b, a);
    }
  };
  this.addInterfaceVariables = function(a, c) {
    r.ctatdebug("CTATExampleTracerTracer.addInterfaceVariables(" + a + ", " + c + ")");
    if (a && c) {
      var d = a.length;
      d > c.length && (d = c.length);
      for (var e = 0;e < d;e++) {
        a[e] && (b.put(a[e], CTATVariableTable.standardizeType(c[e])), b.put(CTATVariableTable.nameAsString(a[e]), CTATVariableTable.valueAsString(c[e])));
      }
      r.ctatdebug("CTATExampleTracerTracer.addInterfaceVariables() startStateVT " + b);
      t && t.forEach(function(b) {
        if (b = b.getVariableTable()) {
          for (var e = 0;e < d;e++) {
            a[e] && (b.put(a[e], CTATVariableTable.standardizeType(c[e])), b.put(CTATVariableTable.nameAsString(a[e]), CTATVariableTable.valueAsString(c[e])));
          }
          r.ctatdebug("CTATExampleTracerTracer.addInterfaceVariables() interp.vt " + b);
        }
      });
    }
  };
  this.findCurrentState = function() {
    r.ctatdebug("Entering findCurrentState");
    var a = r.getBestInterpretation();
    return a && a.getLastMatchedLink() && a.getLastMatchedLink().isDone() ? a.getLastMatchedLink().getNextNode() : (a = u(!1, [a])) ? a.getPrevNode() : H ? H.getStartNode() : null;
  };
};
CTATExampleTracerTracer.prototype = Object.create(CTATBase.prototype);
CTATExampleTracerTracer.prototype.constructor = CTATExampleTracerTracer;
"undefined" !== typeof module && (module.exports = CTATExampleTracerTracer);
var CTATExampleTracerGraph = function(a, b, f) {
  function e(a, b, d) {
    B.ctatdebug("CTATExampleTracerGraph --\x3e in isOrderOK");
    if (B.relaxOrderConstraints() || b.isDone() && B.exitOnIncorrectDone()) {
      return !0;
    }
    for (var e = c(b), f = 0;f < e.length;f++) {
      var l = e[f];
      if (!0 === G.isGroupOrdered(l)) {
        if (f !== e.length - 1) {
          if (!1 === g(l, h(e[f + 1], d), a, d)) {
            return !1;
          }
        } else {
          if (!1 === g(l, b, a, d)) {
            return !1;
          }
        }
      }
    }
    B.ctatdebug("CTATExampleTracerGraph --\x3e out of isOrderOK");
    return !0;
  }
  function d(a, b, d) {
    B.ctatdebug("CTATExampleTracerGraph --\x3e in isReenteringOK");
    if (B.relaxOrderConstraints() || b.isDone() && B.exitOnIncorrectDone()) {
      return !0;
    }
    b = c(b);
    for (var e = !0, g = 0;g < b.length;g++) {
      if (!0 === e && !1 === G.isGroupReenterable(b[g])) {
        for (var e = !1, f = 0;f < a.length;f++) {
          if (!0 === G.isLinkInGroup(b[g], a[f])) {
            e = !0;
          } else {
            if (!0 === e) {
              return !1;
            }
          }
        }
      } else {
        if (!1 === e) {
          break;
        }
      }
    }
    if (0 !== a.length) {
      var h = c(a[a.length - 1]);
      B.ctatdebug("CTATExampleTracerGraph --\x3e in isReentrableOK: exitedGroups null? " + (null === h));
      B.ctatdebug("CTATExampleTracerGraph --\x3e in isReentrableOK: exitedGroups undefined? " + ("undefined" === typeof h));
      B.ctatdebug("CTATExampleTracerGraph --\x3e in isReentrableOK: exitedGroups last traversedLink " + a[a.length - 1].getUniqueID());
      B.ctatdebug("CTATExampleTracerGraph --\x3e in isReentrableOK: exitedGroups length " + (h ? h.length : null));
      b.forEach(function(a) {
        a = h.indexOf(a);
        0 <= a && h.splice(a, 1);
      });
      B.ctatdebug("CTATETGraph.isReentrableOK: exitedGroups.length after removing newLink's groups: " + h.length);
      for (k = h.length - 1;0 <= k;k--) {
        G.isGroupReenterable(h[k]) && h.splice(k, 1);
      }
      B.ctatdebug("CTATETGraph --\x3e in isReentrableOK: exitedGroups after removing reenterables: " + h.length);
      B.ctatdebug("CTATETGraph --\x3e in isReentrableOK: traversedLinks: " + a + ", path: " + d);
      var n = !0;
      h.forEach(function(b) {
        !1 !== n && d.forEach(function(c) {
          !1 !== n && l(a, c) < c.getMinTraversals() && !0 === G.isLinkInGroup(b, c) && (n = !1);
        });
      });
      if (!1 === n) {
        return !1;
      }
    }
    B.ctatdebug("CTATExampleTracerGraph --\x3e out of isReenteringOK");
    return !0;
  }
  function c(a) {
    B.ctatdebug("in findGroupsOfLink(link " + a + "): typeof(groupModel) " + typeof G);
    a = G.getGroupsContainingLink(a);
    B.ctatdebug("in findGroupsOfLink groupsSet.size " + a.size);
    var b = [];
    a.forEach(function(a) {
      B.ctatdebug("in findGroupsOfLink group element " + a.getName());
      b.push(a);
    });
    b.sort(function(a, b) {
      return G.getGroupLinkCount(b) - G.getGroupLinkCount(a);
    });
    return b;
  }
  function g(a, b, c, d) {
    var e = -1, g = null, f = Number.MAX_VALUE, m = null;
    G.getGroupSubgroups(a).forEach(function(a) {
      if (!1 === G.isLinkInGroup(a, b) && 0 !== G.getGroupLinkCount(a)) {
        var l = h(a, d);
        null !== l && "undefined" !== typeof l && (l = l.getDepth(), l < b.getDepth() && l > e && (!1 === q(a) || !0 === p(a, c)) && (e = l, g = a), l > b.getDepth() && l < f && (!1 === q(a) || !0 === p(a, c)) && (f = l, m = a));
      }
    });
    G.getUniqueLinks(a).forEach(function(a) {
      if (!0 === d.has(a)) {
        var h = a.getDepth();
        h < b.getDepth() && h > e && (0 < a.getMinTraversals() || -1 < c.indexOf(a)) && (e = h, g = a);
        h > b.getDepth() && h < f && (0 < a.getMinTraversals() || -1 < c.indexOf(a)) && (f = h, m = a);
      }
    });
    if (null !== g && "undefined" !== typeof g) {
      if (g instanceof CTATExampleTracerLink) {
        if (l(c, g) < g.getMinTraversals()) {
          return !1;
        }
      } else {
        if (g instanceof CTATLinkGroup && !1 === n(g, c, d)) {
          return !1;
        }
      }
    }
    return null !== m && "undefined" !== typeof m && (m instanceof CTATExampleTracerLink && -1 < c.indexOf(m) || m instanceof CTATLinkGroup && !0 === p(m, c)) ? !1 : !0;
  }
  function h(a, b) {
    var c = Number.MAX_VALUE, d = null;
    G.getGroupLinks(a).forEach(function(a) {
      a.getDepth() < c && !0 === b.has(a) && (c = a.getDepth(), d = a);
    });
    return d;
  }
  function l(a, b) {
    for (var c = 0, d = 0;d < a.length;d++) {
      b === a[d] && c++;
    }
    B.ctatdebug("CTATETGraph.getTraversalCount(" + b + "): " + c);
    return c;
  }
  function m(a, b, c) {
    var d = !1, e = !0, g = !1;
    (new CTATExampleTracerPath(b)).getSortedLinks().forEach(function(b) {
      if (!1 !== e && !0 !== g) {
        if (!1 === d) {
          !0 === G.isLinkInGroup(a, b) && (d = !0);
        } else {
          if (!1 === G.isLinkInGroup(a, b)) {
            g = !0;
            return;
          }
        }
        c.getTraversalCount(b) < b.getMaxTraversals() && (e = !1);
      }
    });
    return !1 === e ? !1 : !0;
  }
  function q(a) {
    var b = !0;
    G.getGroupLinks(a).forEach(function(a) {
      !1 !== b && 0 !== a.getMinTraversals() && (b = !1);
    });
    return !1 === b ? !1 : !0;
  }
  function p(a, b) {
    for (var c = 0;c < b.length;c++) {
      if (!0 === G.isLinkInGroup(a, b[c])) {
        return !0;
      }
    }
    return !1;
  }
  function n(a, b, c) {
    var d = !0;
    G.getGroupLinks(a).forEach(function(a) {
      !1 !== d && !0 === c.has(a) && l(b, a) < a.getMinTraversals() && (d = !1);
    });
    return !1 === d ? !1 : !0;
  }
  function x() {
    for (var a = 0;a < t.length;a++) {
      t[a].clearInLinks();
    }
    var b = B.getStartNode();
    null !== b && "undefined" !== typeof b && null !== b.getOutLinks() && "undefined" !== typeof b.getOutLinks() && (a = 0, b.getOutLinks().forEach(function(b) {
      u(b, a++);
    }));
  }
  function u(a, b) {
    ctatdebug("updateInLinkSubGraph(" + a + ", " + b + ")");
    var c = B.getNode(a.getNextNode());
    if (null !== c && "undefined" !== typeof c) {
      c.addInLink(a);
      var d = 0;
      c.getOutLinks().forEach(function(a) {
        u(a, d++);
      });
    }
  }
  function w(a) {
    var b = B.getNode(a.getPrevNode());
    if (null !== b && "undefined" !== typeof b) {
      var c = -1;
      b.getInLinks().forEach(function(a) {
        -1 === a.getDepth() && w(a);
        a.getDepth() > c && (c = a.getDepth());
      });
      a.setDepth(c + 1);
    }
  }
  CTATBase.call(this, "CTATExampleTracerGraph", "visualdata");
  var z = null, t = null, D = null, C = null, H = null, E = null, A = new Set, y = new Set, r = null, G = null, F = CTATMsgType.SHOW_ALL_FEEDBACK, B = this;
  this.getFeedbackPolicy = function() {
    return F;
  };
  this.setFeedbackPolicy = function(a) {
    B.ctatdebug("Graph.setFeedbackPolicy(" + a + ") old policy " + F);
    F = "false" === a ? CTATMsgType.SHOW_ALL_FEEDBACK : "true" === a ? CTATMsgType.HIDE_ALL_FEEDBACK : a;
  };
  this.hideButRequireSteps = function() {
    return F == CTATMsgType.HIDE_BUT_COMPLETE;
  };
  this.hideAllFeedback = function() {
    return F == CTATMsgType.HIDE_ALL_FEEDBACK;
  };
  this.relaxOrderConstraints = function() {
    return B.hideAllFeedback() || B.hideButRequireSteps() || F == CTATMsgType.DELAY_FEEDBACK;
  };
  this.exitOnIncorrectDone = function() {
    switch(F) {
      case CTATMsgType.HIDE_ALL_FEEDBACK:
      ;
      case CTATMsgType.HIDE_BUT_ENFORCE:
        return !0;
      default:
        return !1;
    }
  };
  this.getDefaultBuggyMsg = function() {
    return G.getTopLevelGroup() ? G.getTopLevelGroup().getDefaultBuggyMsg() : null;
  };
  this.getLinks = function() {
    B.ctatdebug("CTATExampleTracerGraph --\x3e in getLinks");
    return D;
  };
  this.addLink = function(a, b) {
    B.ctatdebug("CTATExampleTracerGraph --\x3e in addLink");
    D.push(a);
    a.isDone() ? y.add(a) : y["delete"](a);
    null === b || "undefined" === typeof b ? G.addLinkToGroup(G.getTopLevelGroup(), a) : G.addLinkToGroup(b, a);
    B.ctatdebug("CTATExampleTracerGraph --\x3e out of addLink");
  };
  this.addNode = function(a) {
    B.ctatdebug("CTATExampleTracerGraph --\x3e in addNode");
    t.push(a);
    C[a.getNodeID()] = a;
    B.ctatdebug("CTATExampleTracerGraph --\x3e out of addNode");
  };
  this.findAllPaths = function() {
    ctatdebug("CTATExampleTracerGraph --\x3e in findAllPaths " + B.getStartNode().getNodeID());
    return B.findPathsFromNode(B.getStartNode());
  };
  this.pathToLinkIsSubset = function(a, b) {
    var c = B.getNode(a.getPrevNode());
    B.ctatdebug("pathToLinkIsSubset(" + a + ") sourceNode " + c.getNodeID());
    if (0 < a.getMinTraversals() && "undefined" == typeof b[a.getUniqueID()]) {
      return !1;
    }
    if (c == B.getStartNode()) {
      return !0;
    }
    for (c = c.getInLinks().values();!(c = c.next()).done;) {
      return B.pathToLinkIsSubset(c.value, b);
    }
    return !1;
  };
  this.observesOrderingConstraints = function(a, b, c, g) {
    B.ctatdebug("CTATExampleTracerGraph --\x3e in observesOrderingConstraints");
    null !== g && "undefined" !== typeof g && (B.ctatdebug("CTATExampleTracerGraph --\x3e in observesOrderingConstraints initializing out of order false"), g.setOutOfOrder(!1));
    if (null === c || "undefined" === typeof c || 0 === c.size || null === b || "undefined" === typeof b) {
      return B.ctatdebug("CTATExampleTracerGraph --\x3e returning first true observesOrderingConstraints"), !0;
    }
    if (b.isDone() && B.exitOnIncorrectDone()) {
      return B.ctatdebug("CTATExampleTracerGraph.observesOrderingConstraints --\x3e returning true for doneStep && exitOnIncorrectDone"), !0;
    }
    if (!0 === c.has(b) && !0 === e(a, b, c) && !0 === d(a, b, c)) {
      return B.ctatdebug("CTATExampleTracerGraph.observesOrderingConstraints --\x3e returning isOrderOK true && isisReenteringOK() true"), !0;
    }
    null !== g && "undefined" !== typeof g && (B.ctatdebug("CTATExampleTracerGraph --\x3e in observesOrderingConstraints setting out of order true"), g.setOutOfOrder(!0));
    B.ctatdebug("CTATExampleTracerGraph --\x3e returning false observesOrderingConstraints");
    return !1;
  };
  this.isIncorrectLinkOK = function(a, b, c, d) {
    B.ctatdebug("CTATExampleTracerGraph --\x3e in isIncorrectLinkOK");
    var g = !1, f = null, h = !0, l = !1;
    B.getNode(b.getPrevNode()).getOutLinks().forEach(function(b) {
      !0 !== l && !1 !== h && b.getType().toString() !== CTATExampleTracerLink.BUGGY_ACTION.toString() && !0 === c.has(b) && (g = !0, !1 === e(a, b, c) ? h = !1 : (f = b, l = !0));
    });
    if (!1 === h || null === f || "undefined" === typeof f) {
      return !1;
    }
    if (!1 === g) {
      return B.ctatdebug("isIncorrectLinkOK(): no siblings of link in path"), !1;
    }
    if (!0 === g && (b = B.getSmallestContainingGroup(b), !0 === G.isLinkInGroup(b, f) && !1 === G.isGroupOrdered(b) && !0 === m(b, c, d))) {
      return !1;
    }
    B.ctatdebug("CTATExampleTracerGraph --\x3e out of isIncorrectLinkOK");
    return !0;
  };
  this.getNode = function(a) {
    B.ctatdebug("CTATExampleTracerGraph --\x3e in getNode(" + a + ") returning " + C[a]);
    return C[a];
  };
  this.findNode = function(a) {
    if (a) {
      a = a.toLowerCase();
      for (var b in C) {
        if (C[b].getNodeName().toLowerCase() == a) {
          return B.getNode(b);
        }
      }
    }
    return null;
  };
  this.findPathsFromNode = function(a) {
    B.ctatdebug("CTATExampleTracerGraph --\x3e in findPathsFromNode outlinks " + a.getOutLinks().size);
    var b = new Set;
    if (!a || 0 === a.getOutLinks().size) {
      return b.add(new CTATExampleTracerPath(null)), b;
    }
    B.ctatdebug("CTATExampleTracerGraph --\x3e before forEach ");
    a.getOutLinks().forEach(function(a) {
      B.ctatdebug("CTATExampleTracerGraph --\x3e in forEach " + a.getType().toString());
      if (a.getType().toString() != CTATExampleTracerLink.BUGGY_ACTION.toString()) {
        var c = B.findPathsFromNode(B.getNode(a.getNextNode()));
        B.ctatdebug("findPathsFromNode childPaths.size " + c.size);
        c.forEach(function(c) {
          B.ctatdebug("findPathsFromNode childPath.size " + c.size + ", outLink " + a);
          c.addLink(a);
          b.add(c);
        });
      }
    }, a);
    0 === b.size && b.add(new CTATExampleTracerPath(null));
    B.ctatdebug("CTATExampleTracerGraph --\x3e out of findPathsFromNode " + b.size);
    return b;
  };
  this.getDoneStates = function() {
    return A;
  };
  this.checkForDoneState = function(a) {
    if (a.isDone() && a.isTraversable()) {
      var b = B.getNode(a.getNextNode());
      B.ctatdebug("CTATExampleTracerGraph.addDoneState(linkID " + a.getUniqueID() + ") adding destNode " + b);
      A.add(b);
    }
  };
  this.getBestSubpath = function(a, b, c) {
    if (!a || !b) {
      return null;
    }
    var d = B.findPathsFromNode(a), e = new Set;
    d.forEach(function(a) {
      a = a.subpath(b);
      !a || c && !a.containsAll(c) || e.add(a);
    });
    B.ctatdebug("CTATExampleTracerGraph.getBestSubpath(" + a + ", " + b + ", [" + (c ? c.length : -1) + "]) pathsFrom " + d.size + ", pathsFromTo " + e.size);
    return 1 > e.size ? null : CTATExampleTracerPath.getBestPath(e);
  };
  this.getStartNode = function() {
    B.ctatdebug("CTATExampleTracerGraph --\x3e in getStartNode() returning " + H);
    return H;
  };
  this.getLinkByID = function(a) {
    B.ctatdebug("CTATExampleTracerGraph --\x3e in getLinkByID");
    for (var b = 0;b < D.length;b++) {
      if (D[b].getUniqueID() === a) {
        return D[b];
      }
    }
    B.ctatdebug("CTATExampleTracerGraph --\x3e out of getLinkByID");
    return null;
  };
  this.setStartNode = function(a) {
    B.ctatdebug("CTATExampleTracerGraph --\x3e in setStartNode(" + a + ")");
    H = a;
  };
  this.getStudentStartsHereNode = function() {
    B.ctatdebug("CTATExampleTracerGraph --\x3e getStudentStartsHereNode() returns " + E);
    return E;
  };
  this.setStudentStartsHereNode = function(a) {
    B.ctatdebug("CTATExampleTracerGraph --\x3e in setStudentStartsHereNode(" + a + ")");
    E = a;
  };
  this.getExampleTracer = function() {
    B.ctatdebug("CTATExampleTracerGraph --\x3e in getExampleTracer() returning " + z);
    return z;
  };
  this.forDebugging = function() {
    B.ctatdebug("CTATExampleTracerGraph --\x3e in forDebugging");
    B.ctatdebug("Nodes in the graph -- ids");
    t.forEach(function(a) {
      B.ctatdebug(a.getNodeID());
    });
    B.ctatdebug("Links in the graph -- ids, from, to");
    D.forEach(function(a) {
      B.ctatdebug(a);
    });
  };
  this.getSmallestContainingGroup = function(a) {
    return G.getLowestLevelGroupOfLink(a);
  };
  this.redoLinkDepths = function() {
    x();
    B.getLinks().forEach(function(a) {
      a.setDepth(-1);
    });
    B.getLinks().forEach(function(a) {
      -1 === a.getDepth() && w(a);
    });
  };
  this.getGroupModel = function() {
    return G;
  };
  this.setVisualData = function(a) {
    B.ctatdebug("CTATExampleTracerGraph --\x3e in setVisualData");
    r = a;
  };
  this.getVisualData = function() {
    B.ctatdebug("CTATExampleTracerGraph --\x3e in getVisualData() returning " + r);
    return r;
  };
  this.getDoneLinks = function() {
    return y;
  };
  (function(a, b) {
    B.ctatdebug("CTATExampleTracerGraph --\x3e in initGraph (" + a + " , " + b);
    D = [];
    t = [];
    C = {};
    if (null === G || "undefined" === typeof G) {
      G = new CTATDefaultGroupModel, B.ctatdebug("CTATExampleTracerGraph --\x3e created a group model from here");
    }
    G.clear();
    G.setDefaultReenterable(!b);
    G.setGroupOrdered(G.getTopLevelGroup(), a);
    G.setGroupName(G.getTopLevelGroup(), CTATExampleTracerGraph.TOP_LEVEL);
    z = new CTATExampleTracerTracer(B, f);
    B.ctatdebug("CTATExampleTracerGraph --\x3e out of initGraph");
  })(!a, b);
};
Object.defineProperty(CTATExampleTracerGraph, "TOP_LEVEL", {enumerable:!1, configurable:!1, writable:!1, value:"Top Level"});
CTATExampleTracerGraph.prototype = Object.create(CTATBase.prototype);
CTATExampleTracerGraph.prototype.constructor = CTATExampleTracerGraph;
"undefined" !== typeof module && (module.exports = CTATExampleTracerGraph);
var CTATGraphParser = function() {
  function a(a) {
    ctatdebug("processEdge()");
    for (var d = new CTATExampleTracerLink(null, null, null), e = g.getElementChildren(a), f, h, l, n, m, p = a = -1, A = CTATMsgType.DEFAULT_ACTOR, y = !1, r = 0;r < e.length;r++) {
      "sourceID" === g.getElementName(e[r]) && (a = parseInt(g.getNodeTextValue(e[r])), d.setPrevNode(a));
      "destID" === g.getElementName(e[r]) && (p = parseInt(g.getNodeTextValue(e[r])), d.setNextNode(p));
      if ("rule" === g.getElementName(e[r])) {
        for (var G = g.getElementChildren(e[r]), F = 0;F < G.length;F++) {
          "text" === g.getElementName(G[F]) && d.addSkillName(g.getNodeTextValue(G[F]).toString());
        }
      }
      if ("actionLabel" === g.getElementName(e[r])) {
        for (d.setIsPreferredLink("false" != g.getElementAttr(e[r], "preferPathMark")), d.setMinTraversalsStr(g.getElementAttr(e[r], "minTraversals")), d.setMaxTraversalsStr(g.getElementAttr(e[r], "maxTraversals")), G = g.getElementChildren(e[r]), F = 0;F < G.length;F++) {
          "uniqueID" === g.getElementName(G[F]) && (m = g.getNodeTextValue(G[F]), d.setUniqueID(parseInt(g.getNodeTextValue(G[F]))));
          "message" === g.getElementName(G[F]) && (n = new CTATMessage(G[F]));
          "actionType" === g.getElementName(G[F]) && d.setActionType(g.getNodeTextValue(G[F]));
          "buggyMessage" === g.getElementName(G[F]) && d.setBuggyMsg(g.getNodeTextValue(G[F]));
          "successMessage" === g.getElementName(G[F]) && d.setSuccessMsg(g.getNodeTextValue(G[F]));
          "hintMessage" === g.getElementName(G[F]) && d.addHint(g.getNodeTextValue(G[F]));
          if ("matchers" === g.getElementName(G[F])) {
            for (var B = g.getElementChildren(G[F]), I = 0;I < B.length;I++) {
              "Selection" === g.getElementName(B[I]) && (f = b(B[I], 0)), "Action" === g.getElementName(B[I]) && (h = b(B[I], 1)), "Input" === g.getElementName(B[I]) && (l = b(B[I], 2)), "Actor" === g.getElementName(B[I]) && (A = g.getNodeTextValue(B[I]), y = (y = g.getElementAttr(B[I], "linkTriggered")) && "false" != y.toLowerCase().trim() ? !0 : !1);
            }
          }
          if ("matcher" === g.getElementName(G[F])) {
            h = G[F];
            f = g.getElementAttr(h, "replacementFormula");
            h = g.getElementChildren(h);
            var I = B = void 0, K = CTATMsgType.DEFAULT_ACTOR;
            l = new CTATExactMatcher(CTATMatcher.SELECTION, null);
            for (var A = new CTATExactMatcher(CTATMatcher.ACTION, null), J = 0;J < h.length;J++) {
              if ("matcherType" === g.getElementName(h[J]) && ("ExactMatcher" === g.getNodeTextValue(h[J]) && (I = CTATExactMatcher), "RegexMatcher" === g.getNodeTextValue(h[J]) && (I = CTATRegexMatcher), "AnyMatcher" === g.getNodeTextValue(h[J]) && (I = CTATAnyMatcher), "RangeMatcher" === g.getNodeTextValue(h[J]) && (I = CTATRangeMatcher), "WildcardMatcher" === g.getNodeTextValue(h[J]) && (I = CTATWildcardMatcher), "ExpressionMatcher" === g.getNodeTextValue(h[J]) && (I = CTATExpressionMatcher)), 
              "matcherParameter" === g.getElementName(h[J])) {
                var N = g.getElementAttr(h[J], "name");
                "selection" == N && l.setParameter(g.getNodeTextValue(h[J]));
                "action" == N && A.setParameter(g.getNodeTextValue(h[J]));
                "input" == N && (B = B ? B : new I(CTATMatcher.INPUT, null), B.setParameter(g.getNodeTextValue(h[J])));
                "actor" == N && (K = g.getNodeTextValue(h[J]));
                "minimum" == N && (B = B ? B : new I(CTATMatcher.INPUT, null), B.setParameter(g.getNodeTextValue(h[J]), "minimum"));
                "maximum" == N && (B = B ? B : new I(CTATMatcher.INPUT, null), B.setParameter(g.getNodeTextValue(h[J]), "maximum"));
              }
            }
            B.setReplacementFormula(f);
            A = [[l], [A], [B], K];
            f = A[0];
            h = A[1];
            l = A[2];
            A = A[3];
          }
        }
      }
    }
    c.getStartNode() && p == c.getStartNode().getNodeID() && console.log("***WARNING*** edge " + m + " destination is graph startNode " + c.getStartNode());
    m = new CTATVectorMatcher(f, h, l, A);
    m.setDefaultSAI(n.getSAI());
    m.setCaseInsensitive(q);
    m.setLinkTriggered(y);
    d.setMatcher(m);
    ctatdebug("GraphParser.processEdge() " + a + "->" + p + ", edge " + d);
    c.getNode(a).addOutLink(d);
    c.checkForDoneState(d);
    return d;
  }
  function b(a, b) {
    e.ctatdebug("processMatchers()");
    for (var c = g.getElementChildren(a), d = [], f = 0;f < c.length;f++) {
      if ("matcher" === g.getElementName(c[f])) {
        for (var h = null, l = g.getElementAttr(c[f], "replacementFormula"), m = g.getElementChildren(c[f]), n = 0;n < m.length;n++) {
          if ("matcherType" === g.getElementName(m[n])) {
            switch(h = g.getNodeTextValue(m[n]), e.ctatdebug("CTATGraphParser.processMatchers() matcherType[" + n + "] = " + h), h) {
              case "ExactMatcher":
                h = new CTATExactMatcher(b, null);
                break;
              case "RegexMatcher":
                h = new CTATRegexMatcher(b, null);
                break;
              case "AnyMatcher":
                h = new CTATAnyMatcher(b, null);
                break;
              case "RangeMatcher":
                h = new CTATRangeMatcher(b, null);
                break;
              case "WildcardMatcher":
                h = new CTATWildcardMatcher(b, null);
                break;
              case "ExpressionMatcher":
                h = new CTATExpressionMatcher(b, null);
                break;
              default:
                console.log("CTATGraphParser.processMatchers() unknown matcherType[" + n + "] = " + h + "; using CTATExactMatcher"), h = new CTATExactMatcher(b, null);
            }
          }
          if ("matcherParameter" === g.getElementName(m[n])) {
            var p = g.getElementAttr(m[n], "name");
            "single" === p ? h.setParameter(g.getNodeTextValue(m[n])) : "minimum" === p ? h.setParameter(g.getNodeTextValue(m[n]), "minimum") : "maximum" === p ? h.setParameter(g.getNodeTextValue(m[n]), "maximum") : h.setParameter(m[n], p, g);
          }
        }
        h && h.setReplacementFormula(l);
        d.push(h);
      }
    }
    return d;
  }
  function f(a, b) {
    var c = new Set;
    if ("group" !== g.getElementName(a)) {
      return c;
    }
    var d = g.getElementAttr(a, "name");
    ctatdebug("readGroupFromXML group name: " + d);
    var e = "true" === g.getElementAttr(a, "ordered"), h = "true" === g.getElementAttr(a, "reenterable");
    ctatdebug("readGroupFromXML group isOrdered typeof: " + typeof e);
    ctatdebug("readGroupFromXML group isOrdered: " + e);
    for (var l = function(a) {
      c.add(a);
    }, n = g.getElementChildren(a), p = 0;p < n.length;p++) {
      if ("link" === g.getElementName(n[p])) {
        var q = Number(g.getElementAttr(n[p], "id")), y = b[q];
        if (null !== y || void 0 !== y) {
          ctatdebug("Added link ID : " + q), c.add(y);
        }
      }
      "group" === g.getElementName(n[p]) && (ctatdebug("encountered a subgroup"), f(n[p], b).forEach(l));
    }
    m.addGroup(d, e, c);
    m.setGroupReenterable(m.getGroupByName(d), h);
    return c;
  }
  CTATBase.call(this, "CTATGraphParser", "__undefined__");
  var e = this, d, c, g = new CTATXML, h = null, l = [];
  new XMLSerializer;
  var m, q = !0, p = !0, n = [];
  this.getLockWidget = function() {
    return p;
  };
  this.parseGraph = function(b, e) {
    ctatdebug("parseBRD()");
    var w = 0, z = g.getElementAttr(b, "startStateNodeName"), t = "true" === g.getElementAttr(b, "unordered");
    q = "false" != String(g.getElementAttr(b, "caseInsensitive")).toLowerCase();
    p = g.getElementAttr(b, "lockWidget");
    var D = new CTATVariableTable;
    c = new CTATExampleTracerGraph(t, !1, D);
    var C = g.getElementChildren(b), D = g.getElementAttr(b, "suppressStudentFeedback");
    if (null === D || void 0 === D) {
      D = CTATMsgType.SHOW_ALL_FEEDBACK;
    }
    c.setFeedbackPolicy(D);
    e.setFeedbackSuppressed(D);
    D = g.getElementAttr(b, "highlightRightSelection");
    e.setHighlightRightSelection("false" != D);
    var H = g.getElementAttr(b, "confirmDone");
    "true" !== H && "false" !== H && (H = c.getFeedbackPolicy() === CTATMsgType.HIDE_ALL_FEEDBACK ? "true" : "false");
    e.setHintPolicy(g.getElementAttr(b, "hintPolicy"));
    e.setOutOfOrderMessage(g.getElementAttr(b, "outOfOrderMessage"));
    for (var E = null, A = 0;A < C.length;A++) {
      switch(g.getElementName(C[A])) {
        case "startNodeMessages":
          l = g.getElementChildren(C[A]);
          break;
        case "node":
          w++;
          var y;
          y = C[A];
          ctatdebug("processNode(" + y + ")");
          var r = g.getElementChildren(y), G = -1;
          y = "";
          for (var F = 0;F < r.length;F++) {
            switch(g.getElementName(r[F])) {
              case "uniqueID":
                G = parseInt(g.getNodeTextValue(r[F]));
                break;
              case "text":
                y = g.getNodeTextValue(r[F]);
            }
          }
          r = new CTATExampleTracerNode(G, new Set);
          "" !== y && r.setNodeName(y);
          y = r;
          c.addNode(y);
          1 == w && (c.setStartNode(y), c.setStudentStartsHereNode(y));
          y.getNodeName() == z && c.setStudentStartsHereNode(y);
          break;
        case "edge":
          c.addLink(a(C[A]));
          break;
        case "EdgesGroups":
          E = C[A];
          break;
        case "productionRule":
          var B = C[A];
          ctatdebug("processSkill()");
          for (var r = y = "", F = G = null, B = g.getElementChildren(B), I = 0;I < B.length;I++) {
            var K = g.getElementName(B[I]);
            "ruleName" == K && (y = g.getNodeTextValue(B[I]), ctatdebug("ruleName=" + y));
            "productionSet" == K && (r = g.getNodeTextValue(B[I]), ctatdebug("productionSet=" + r));
            "label" == K && (G = g.getNodeTextValue(B[I]), ctatdebug("label=" + G));
            "description" == K && (F = g.getNodeTextValue(B[I]), ctatdebug("description=" + F));
          }
          y && (B = new CTATExampleTracerSkill(r, y, CTATExampleTracerSkill.DEFAULT_P_GUESS, CTATExampleTracerSkill.DEFAULT_P_KNOWN, CTATExampleTracerSkill.DEFAULT_P_SLIP, CTATExampleTracerSkill.DEFAULT_P_LEARN, CTATExampleTracerSkill.DEFAULT_HISTORY), null != G ? B.setLabel(G) : B.setLabel(y), null != F ? B.setDescription(F) : B.setDescription(y + (r ? " " + r : "")), n.push(B));
      }
    }
    if (E) {
      w = g.getElementAttr(E, "ordered");
      if (null === w || "undefined" == typeof isordered) {
        w = !t;
      }
      ctatdebug("parseGraph() value of isOrdered = " + w);
      ctatdebug("parseGraph() value of isUnordered = " + t);
      ctatdebug("parseGraph() typeof isOrdered: " + typeof w);
      ctatdebug("parseGraph()typeof isUnordered: " + typeof t);
      z = E;
      C = w;
      ctatdebug("processGroup()");
      m = c.getGroupModel();
      w = m.createIdToLinkMap();
      m.setGroupOrdered(m.getTopLevelGroup(), C);
      ctatdebug("processGroup() name of group: " + m.getGroupName(m.getTopLevelGroup()));
      ctatdebug("processGroup() group isOrdered?: " + m.isGroupOrdered(m.getTopLevelGroup()));
      ctatdebug("processGroup() order of group: isOrdered= " + C);
      ctatdebug("processGroup() order of group: isOrdered typeof= " + typeof C);
      z = g.getElementChildren(z);
      for (C = 0;C < z.length;C++) {
        switch(g.getElementName(z[C])) {
          case "group":
            f(z[C], w);
            break;
          case "outOfOrderMessage":
            m.getTopLevelGroup().setDefaultBuggyMsg(g.getNodeTextValue(z[C]));
        }
      }
    }
    w = e.getSkillBarVector(!1, !0);
    if (!w || 1 > w.length) {
      ctatdebug("No existing skills. Add skills from BRD."), e.addGraphSkills(n), w = e.getSkillBarVector();
    }
    h = (new CTATTutorMessageBuilder).createStateGraphMessage(q, t, p, e.isFeedbackSuppressed(), D, H, w);
    c.redoLinkDepths();
    d = c.getExampleTracer();
    d.resetTracer();
    c.forDebugging();
    ctatdebug("Graph loaded.");
    return {gr:c, tracer:d, ssm:l, sgMsg:h};
  };
};
CTATGraphParser.prototype = Object.create(CTATBase.prototype);
CTATGraphParser.prototype.constructor = CTATGraphParser;
"undefined" !== typeof module && (module.exports = CTATGraphParser);
var CTATProblemStateStatus = function() {
  var a = "empty";
  this.getStatus = function() {
    return a;
  };
  this.setStatus = function(b) {
    a = b;
  };
};
Object.defineProperty(CTATProblemStateStatus, "empty", {enumerable:!1, configurable:!1, writable:!1, value:"empty"});
Object.defineProperty(CTATProblemStateStatus, "incompleteStartState", {enumerable:!1, configurable:!1, writable:!1, value:"incompleteStartState"});
Object.defineProperty(CTATProblemStateStatus, "startState", {enumerable:!1, configurable:!1, writable:!1, value:"startState"});
Object.defineProperty(CTATProblemStateStatus, "incomplete", {enumerable:!1, configurable:!1, writable:!1, value:"incomplete"});
Object.defineProperty(CTATProblemStateStatus, "goingToState", {enumerable:!1, configurable:!1, writable:!1, value:"goingToState"});
Object.defineProperty(CTATProblemStateStatus, "normalFeedback", {enumerable:!1, configurable:!1, writable:!1, value:"normalFeedback"});
Object.defineProperty(CTATProblemStateStatus, "complete", {enumerable:!1, configurable:!1, writable:!1, value:"complete"});
CTATProblemStateStatus.prototype = Object.create(CTATBase.prototype);
CTATProblemStateStatus.prototype.constructor = CTATProblemStateStatus;
CTATProblemStateStatus.prototype.isSendingSavedMsgsForRestore = function() {
  switch(this.getStatus()) {
    case CTATProblemStateStatus.normalFeedback:
    ;
    case CTATProblemStateStatus.complete:
      return !0;
    default:
      return !1;
  }
};
CTATProblemStateStatus.prototype.mustSaveForRestore = function() {
  switch(this.getStatus()) {
    case CTATProblemStateStatus.incomplete:
    ;
    case CTATProblemStateStatus.incompleteStartState:
    ;
    case CTATProblemStateStatus.goingToState:
      return !1;
    default:
      return !0;
  }
};
CTATProblemStateStatus.prototype.isOutputSuppressed = function() {
  switch(this.getStatus()) {
    case CTATProblemStateStatus.goingToState:
      return !0;
    default:
      return !1;
  }
};
CTATProblemStateStatus.prototype.isComplete = function() {
  return this.getStatus() == CTATProblemStateStatus.complete;
};
CTATProblemStateStatus.prototype.isIncomplete = function() {
  switch(this.getStatus()) {
    case CTATProblemStateStatus.incompleteStartState:
    ;
    case CTATProblemStateStatus.incomplete:
      return !0;
    default:
      return !1;
  }
};
CTATProblemStateStatus.prototype.mustRetrieveProblemState = function() {
  switch(this.getStatus()) {
    case CTATProblemStateStatus.incompleteStartState:
    ;
    case CTATProblemStateStatus.incomplete:
    ;
    case CTATProblemStateStatus.complete:
      return !0;
    default:
      return !1;
  }
};
CTATProblemStateStatus.prototype.transition = function(a, b) {
  var f = this.getStatus();
  if (CTATProblemStateStatus.complete != f) {
    switch(a) {
      case CTATMsgType.SET_PREFERENCES:
        CTATProblemStateStatus[b] && (CTATProblemStateStatus.incomplete == CTATProblemStateStatus[b] ? this.setStatus(CTATProblemStateStatus.incompleteStartState) : CTATProblemStateStatus.complete == CTATProblemStateStatus[b] ? this.setStatus(CTATProblemStateStatus.complete) : this.setStatus(CTATProblemStateStatus.startState));
        break;
      case CTATMsgType.STATE_GRAPH:
        this.getStatus() == CTATProblemStateStatus.incomplete || this.getStatus() == CTATProblemStateStatus.incompleteStartState ? this.setStatus(CTATProblemStateStatus.incompleteStartState) : this.setStatus(CTATProblemStateStatus.startState);
        break;
      case CTATMsgType.START_STATE_END:
        this.getStatus() == CTATProblemStateStatus.incompleteStartState ? this.setStatus(CTATProblemStateStatus.incomplete) : this.setStatus(CTATProblemStateStatus.normalFeedback);
        break;
      case CTATMsgType.PROBLEM_RESTORE_END:
      ;
      case CTATMsgType.END_GO_TO_STATE:
        this.setStatus(CTATProblemStateStatus.normalFeedback);
        break;
      case CTATMsgType.BEGIN_GO_TO_STATE:
        this.setStatus(CTATProblemStateStatus.goingToState);
    }
    ctatdebug("CTATProblemStateStatus.transition(" + a + ", " + b + ") old " + f + " => new " + this.getStatus());
    return this.getStatus();
  }
};
CTATProblemStateStatus.prototype.toString = function() {
  return "{" + this.getStatus() + "}";
};
var CTATMessageTank = function(a, b) {
  function f(a) {
    p.ctatdebug("entering updateProblemSummary()");
    a && g.forEach(function(b) {
      if (b.msgType == CTATMsgType.ASSOCIATED_RULES) {
        var d = b.evt;
        p.ctatdebug("entering updateProblemSummaryWithEvent(" + d + ")");
        if (d) {
          b = d.getResult();
          d.getHintRequest() && (b = CTATExampleTracerLink.HINT_ACTION);
          var e = CTATMsgType.CompletionValue[0];
          a.setCompletionStatus(e, CTATGlobals.confirmDone);
          var g = b && b == CTATExampleTracerLink.CORRECT_ACTION, f = !1, h = null, l = d.getStudentSAI();
          l && (h = l.getSelection()) && (f = "done" == String(h).toLowerCase());
          p.ctatdebug("updateProblemSummary() Completion status " + e + ", doneStep " + f + ", correct " + g);
          f && (e = g ? CTATMsgType.CompletionValue[1] : CTATMsgType.CompletionValue[0], a.setCompletionStatus(e, !0));
          e == CTATMsgType.CompletionValue[1] ? (a.stopTimer(), c && c.setOutputStatus(CTATProblemStateStatus.complete)) : a.restartTimer();
          e = d.getActor();
          p.ctatdebug("updateProblemSummmary() actor " + e + ", indicatorObj " + b);
          CTATMatcher.isTutorActor(e) || (d = d.getStepID(), CTATTutorMessageBuilder.isHint(b) ? a.addHint(d) : CTATTutorMessageBuilder.isCorrect(b) ? null !== b && "undefined" !== typeof b && a.addCorrect(d) : a.addError(d));
        }
      }
    });
  }
  function e(a) {
    switch(p.suppressFeedback(a, c.getFeedbackPolicy())) {
      case CTATMsgType.SHOW_ALL_FEEDBACK:
        return !1;
      case CTATMsgType.DELAY_FEEDBACK:
        a = a.msg;
        var b = CTATMsgType.getProperty(a, "Selection");
        p.ctatdebug("CTATMessageTank.addToDelayedFeedbackTank(\n  " + a + ") selection " + b);
        b && (c.getDelayedFeedback()[b.toLowerCase()] = a);
        return !0;
      case CTATMsgType.HIDE_ALL_FEEDBACK:
        return !0;
      case CTATMsgType.HIDE_BUT_COMPLETE:
        return !0;
      case CTATMsgType.HIDE_BUT_ENFORCE:
        return !0;
      default:
        return !1;
    }
  }
  function d(a, b) {
    for (var c = new CTATMessageTank(a, null), d = 0;d < b.length;++d) {
      var e = b[d];
      p.ctatdebug("sendNewTankful() mto[" + d + "] msgType " + e.msgType);
      c.addToMessageTank(e.msgType, e.msg, e.evt, null);
    }
    c.flushMessageTank(null, !0);
  }
  CTATBase.call(this, "CTATMessageTank", b);
  var c = a, g = null, h = null, l = null, m = new Set;
  m.add("SuccessMessage");
  m.add("BuggyMessage");
  m.add("HighlightMsg");
  m.add("NotDoneMessage");
  var q = b, p = this, n = /^([^:]+):([0-9]+)$/;
  this.toString = function() {
    p.ctatdebug("toString tank " + g);
    if (!g || 1 > g.length) {
      return "MessageTank empty";
    }
    var a = "";
    g.forEach(function(b) {
      a += b.msgType + ", ";
    });
    return "MessageTank[" + a.substr(0, a.length - 2) + "]";
  };
  this.setTransaction_id = function(a) {
    q = a;
  };
  this.enqueueToolActionToStudent = function(a, b, d, e) {
    p.ctatdebug("Entering enqueueToolActionToStudent(" + a + ", " + b + ", " + d + ", " + e + ")");
    var g = CTATMsgType.INTERFACE_ACTION;
    p.ctatdebug("entering enqueueMessageToStudent()");
    var f = CTATMessage.makeTransactionId();
    a = new CTATSAI(a, b, d);
    b = (new CTATTutoringServiceMessageBuilder).createInterfaceActionMessage(f, a);
    b = CTATMsgType.setProperty(b, CTATTutorMessageBuilder.TRIGGER, "DATA");
    b = CTATMsgType.setProperty(b, CTATTutorMessageBuilder.SUBTYPE, null === e || "undefined" === typeof e || 1 > e.length ? CTATTutorMessageBuilder.TUTOR_PERFORMED : e);
    e = new CTATExampleTracerEvent(c, a, CTATMsgType.DEFAULT_TOOL_ACTOR);
    e.setTransactionID(f);
    p.addToMessageTank(g, b, e, a);
    return f;
  };
  this.addToMessageTank = function(a, b, c, d) {
    p.ctatdebug("Entering addToMessageTank(" + a + ", " + b + ", " + c + ")");
    if (b) {
      g || (g = [], h = {}, l = {});
      var e = {};
      e.msgType = a;
      e.msg = b;
      e.evt = c;
      e.sai = d;
      g.push(e);
      h[a] = h[a] ? h[a] + 1 : 1;
      a = c.getResult();
      c.getHintRequest() && (a = CTATExampleTracerLink.HINT_ACTION);
      l[a] = l[a] ? l[a] + 1 : 1;
      p.ctatdebug("Exiting addToMessageTank() this " + p.toString());
    }
  };
  this.flushMessageTank = function(a, b) {
    p.ctatdebug("Entering flushMessageTank(" + a + ", " + b + ")");
    if (g && !(1 > g.length)) {
      f(a);
      p.ctatdebug("flushMessageTank() after updateProblemSummary; messageTank.length " + g.length + ", transaction_id " + q);
      for (var m = [], z = [], t = 0;t < g.length;++t) {
        var D = g[t];
        if (D.msg) {
          var C = D.msgType, H = D.evt;
          p.ctatdebug("entering processInterfaceVariables() msgType " + C + ", evt " + H);
          C && (p.ctatdebug("entering processInterfaceVariables() et " + c + ", tracer " + (c ? c.getTracer() : null)), C = C.toLowerCase(), 0 !== C.indexOf("correct") && 0 !== C.indexOf("interfaceaction") || c.getTracer().addInterfaceVariablesFromEvent(H));
          if (!(C = e(D))) {
            var C = D, H = z, E = void 0, A = void 0;
            if (!(C && C.sai && (E = C.sai.getAction()) && (A = n.exec(E))) || 3 > A.length || 1 >= A[2]) {
              C = !1;
            } else {
              var y = H.length - 1, y = 0 > y ? null : H[y];
              C.msg = C.msg.replace(E, A[1]);
              y && y.timeout == A[2] ? y.msgTuples.push(C) : H.push({timeout:Number(A[2]), msgTuples:[C]});
              C = !0;
            }
          }
          C || m.push(D.msg);
        }
      }
      p.ctatdebug("flushMessageTank(): msgBundle.length " + m.length + ", delayedMsgsBundle.length " + z.length);
      for (t = 0;t < z.length;++t) {
        D = z[t], p.ctatdebug("processDelayedMsgs() delayedMsgs.timeout " + D.timeout + ", .msgTuples.length " + D.msgTuples.length), setTimeout(d, D.timeout, c, D.msgTuples);
      }
      0 < m.length && (p.ctatdebug("Bottom of flushMessageTank(); to send bundle of length " + m.length + " via " + c), c.sendBundle(m) && (p.ctatdebug("CTATMessageTank.shouldSaveNow() resultTypes " + l + ", msgTypes " + h), (l[CTATExampleTracerLink.CORRECT_ACTION] || l[CTATExampleTracerLink.FIREABLE_BUGGY_ACTION] || h.CorrectAction || h.InterfaceAction || h.UntutoredAction || c.isFeedbackSuppressed() && h.AssociatedRules) && c.isSendingSavedMsgsForRestore() && (CTATGlobalFunctions.isInstructorMode() ? 
      p.ctatdebug("We're in reviewer mode: we shouldn't save as we go") : c.getProblemStateSaver().saveAsYouGo(a))), p.ctatdebug("Exiting flushMessageTank() #CorrectAction " + h.CorrectAction + ", #InterfaceAction " + h.InterfaceAction + ", #UntutoredAction " + h.UntutoredAction));
      h = g = q = null;
    }
  };
  this.flushDelayedFeedback = function() {
    p.ctatdebug("Entering flushDelayedFeedback()");
    var a = c.getDelayedFeedback(), b;
    for (b in a) {
      a.hasOwnProperty(b) && CTAT.ToolTutor.sendToInterface(a[b]);
    }
    c.clearDelayedFeedback();
  };
  this.suppressFeedback = function(a, b) {
    p.ctatdebug("CTATMessageTank.suppressFeedback(" + a.msgType + ", " + b + ")");
    var c;
    b == CTATMsgType.SHOW_ALL_FEEDBACK ? (p.ctatdebug("if.1"), c = b) : CTATMsgType.hasTextFeedback(a.msgType) ? (p.ctatdebug("if.2"), b == CTATMsgType.HIDE_ALL_FEEDBACK || b == CTATMsgType.HIDE_BUT_ENFORCE ? (p.ctatdebug("if.2.1"), c = b) : (p.ctatdebug("if.2.2"), (c = CTATMsgType.getProperty(a.msg, CTATMsgType.BUGGY_MSG)) && -1 != c.toLowerCase().indexOf(CTATMsgType.NOT_DONE_MSG.toLowerCase()) ? (p.ctatdebug("if.2.2.1"), c = CTATMsgType.SHOW_ALL_FEEDBACK) : (p.ctatdebug("if.2.2.2"), c = CTATMsgType.HIDE_ALL_FEEDBACK))) : 
    CTATMsgType.isCorrectOrIncorrect(a.msgType) ? (p.ctatdebug("if.3: " + a.msg), CTATMsgType.isDoneMessage(a.msg) ? (p.ctatdebug("if.3.1"), c = CTATMsgType.SHOW_ALL_FEEDBACK) : (p.ctatdebug("if.3.2"), c = b)) : (p.ctatdebug("if.4"), c = CTATMsgType.SHOW_ALL_FEEDBACK);
    p.ctatdebug("CTATMessageTank.suppressFeedback() returning " + c);
    return c;
  };
};
Object.defineProperty(CTATMessageTank, "END_OF_TRANSACTION", {enumerable:!1, configurable:!1, writable:!1, value:"end_of_transaction"});
CTATMessageTank.prototype = Object.create(CTATBase.prototype);
CTATMessageTank.prototype.constructor = CTATMessageTank;
"undefined" !== typeof module && (module.exports = CTATMessageTank);
var CTATStep = function(a, b) {
  CTATBase.call(this, "CTATStep", a);
  var f = 0, e = null, d = 0, c = 0;
  this.ctatdebug("entering CTATStep(" + a + ", " + b + ") constructor");
  this.incrementFirstHints = function() {
    f++;
  };
  this.incrementNCorrect = function() {
    d++;
  };
  this.incrementErrors = function() {
    c++;
  };
  this.setLastResult = function(a) {
    e = a;
  };
  this.getLastResult = function() {
    return e;
  };
  this.getResult = function() {
    return b;
  };
  this.getNCorrect = function() {
    return d;
  };
  this.getNErrors = function() {
    return c;
  };
  this.getNFirstHints = function() {
    return f;
  };
  this.ctatdebug("in CTATStep(" + a + ", " + b + ") constructor");
  switch(b) {
    case CTATStep.StepResult[3]:
      this.incrementNCorrect();
      break;
    case CTATStep.StepResult[1]:
      this.incrementErrors();
      break;
    case CTATStep.StepResult[2]:
      this.incrementFirstHints();
  }
  this.ctatdebug("exiting CTATStep constructor");
};
Object.defineProperty(CTATStep, "StepResult", {enumerable:!1, configurable:!1, writable:!1, value:["UNTRIED", "INCORRECT", "HINT", "CORRECT"]});
CTATStep.prototype = Object.create(CTATBase.prototype);
CTATStep.prototype.constructor = CTATStep;
"undefined" !== typeof module && (module.exports = CTATStep);
var CTATProblemSummary = function(a, b, f) {
  CTATBase.call(this, "CTATProblemSummary", "");
  if (null === a || "undefined" === typeof a || 1 > a.length) {
    throw new CTATExampleTracerException("problemName null or empty");
  }
  var e = Number.MAX_VALUE, d = b, c = f, g = 0, h = new Date, l = {}, m = 0, q = 0, p = 0, n = 0, x = 0, u = 0, w = 0, z = CTATMsgType.CompletionValue[0], t = this;
  this.getCountOnlyLastResults = function() {
    return c;
  };
  this.setCountOnlyLastResults = function(a) {
    c = a;
  };
  this.getTimeElapsed = function() {
    return g;
  };
  this.getUniqueErrors = function() {
    if (!t.getCountOnlyLastResults()) {
      return w;
    }
    var a = 0, b;
    for (b in l) {
      l[b].getLastResult() == CTATStep.StepResult[1] && a++;
    }
    return a;
  };
  this.getUniqueCorrect = function() {
    if (!t.getCountOnlyLastResults()) {
      return x;
    }
    var a = 0, b;
    for (b in l) {
      l[b].getLastResult() == CTATStep.StepResult[3] && a++;
    }
    return a;
  };
  this.getUniqueCorrectUnassisted = function() {
    return u;
  };
  this.getHintsOnly = function() {
    var a = 0, b;
    for (b in l) {
      CTATStep.StepResult[2] == l[b].getResult() && 1 > l[b].getNErrors() && ++a;
    }
    return a;
  };
  this.getErrorsOnly = function() {
    var a = 0, b;
    for (b in l) {
      CTATStep.StepResult[1] == l[b].getResult() && 1 > l[b].getNFirstHints() && ++a;
    }
    return a;
  };
  this.getUniqueSteps = function() {
    var a = 0, b;
    for (b in l) {
      a++;
    }
    return a;
  };
  this.getRequiredSteps = function() {
    return e == Number.MAX_VALUE ? 0 : e;
  };
  this.setRequiredSteps = function(a) {
    e = a;
  };
  this.getCorrect = function() {
    return m;
  };
  this.toXML = function(b) {
    var c;
    c = "" + (' ProblemName="' + a + '"');
    c += ' CompletionStatus="' + z + '"';
    c += ' Correct="' + m + '"';
    c += ' UniqueCorrect="' + t.getUniqueCorrect() + '"';
    c += ' UniqueCorrectUnassisted="' + u + '"';
    c += ' Hints="' + q + '"';
    c += ' UniqueHints="' + n + '"';
    c += ' HintsOnly="' + t.getHintsOnly() + '"';
    c += ' Errors="' + p + '"';
    c += ' UniqueErrors="' + t.getUniqueErrors() + '"';
    c += ' ErrorsOnly="' + t.getErrorsOnly() + '"';
    c += ' UniqueSteps="' + t.getUniqueSteps() + '"';
    c += ' RequiredSteps="' + t.getRequiredSteps() + '"';
    c += ' TimeElapsed="' + g + '"';
    var d = t.getSkills() ? t.getSkills().toXML(b) : "";
    return b ? "&lt;ProblemSummary" + c + "&gt;" + d + "&lt;/ProblemSummary&gt;" : "<ProblemSummary" + c + ">" + d + "</ProblemSummary>";
  };
  this.getSkills = function() {
    return d;
  };
  this.setSkills = function(a) {
    d = a;
  };
  this.stopTimer = function() {
    var a = new Date;
    g += a.getTime() - h.getTime();
    return a;
  };
  this.restartTimer = function() {
    h = t.stopTimer();
    return g;
  };
  this.addHint = function(a) {
    t.ctatdebug("addHint(" + a + ")");
    var b = l[a];
    null !== b && "undefined" !== typeof b ? (1 > b.getNFirstHints() && ++n, b.incrementFirstHints()) : (b = new CTATStep(a, CTATStep.StepResult[2]), l[a] = b, n++);
    q++;
    b.setLastResult(CTATStep.StepResult[2]);
    t.ctatdebug("exiting addHint() hint count " + q + ", trial " + b);
  };
  this.addError = function(a) {
    t.ctatdebug("addError(" + a + ")");
    var b = l[a];
    null !== b && "undefined" !== typeof b ? (1 > b.getNCorrect() && 1 > b.getNErrors() && ++w, b.incrementErrors()) : (b = new CTATStep(a, CTATStep.StepResult[1]), l[a] = b, w++);
    p++;
    b.setLastResult(CTATStep.StepResult[1]);
    t.ctatdebug("exiting addError() error count " + p + ", trial " + b);
  };
  this.addCorrect = function(a) {
    var b = l[a];
    t.ctatdebug("entering addCorrect(" + a + ") trial " + b);
    b ? (1 > b.getNCorrect() && 1 > b.getNErrors() && (++x, 1 > b.getNFirstHints() && u++), b.incrementNCorrect()) : (t.ctatdebug("to call CTATStep(" + a + ", StepResult " + CTATStep.StepResult[3]), b = new CTATStep(a, CTATStep.StepResult[3]), l[a] = b, x++, u++);
    m++;
    b.setLastResult(CTATStep.StepResult[3]);
    t.ctatdebug("exiting addCorrect() correct count " + m + ", trial " + b);
  };
  this.setCompletionStatus = function(a, b) {
    t.ctatdebug("setCompletionStatus(" + a + ", " + b + ")");
    if (CTATMsgType.CompletionValue[1] != z || b) {
      z = a;
    }
  };
  this.getCompletionStatus = function() {
    return z;
  };
};
CTATProblemSummary.prototype = Object.create(CTATBase.prototype);
CTATProblemSummary.prototype.constructor = CTATProblemSummary;
"undefined" !== typeof module && (module.exports = CTATProblemSummary);
var CTATSkills = function(a) {
  CTATBase.call(this, "CTATSkills", a ? String(a.length) : "");
  var b = {}, f = 0;
  a.forEach(function(a) {
    b[a.getSkillName().toLowerCase()] = a;
  });
  var e = new Set, d = this;
  this.toXML = function(a, d) {
    d || (d = "");
    var e = a ? "&lt;Skills&gt;" : "<Skills>", f = e.length, m;
    for (m in b) {
      b.hasOwnProperty(m) && b[m] && (e += d + b[m].toXML(a));
    }
    e += d && e.length > f ? "\n" : "";
    return e + (a ? "&lt;/Skills&gt;" : "</Skills>");
  };
  this.updateSkill = function(a, b, h) {
    var l = null, m = d.getSkill(b);
    null !== m && "undefined" !== typeof m && (m.setTransactionNumber(f), b = h + " " + b, e.has(b) || (e.add(b), m.updatePKnown(a), m.updateHistory(a), m.changeOpportunityCount(1)), CTATExampleTracerSkill.CORRECT.toString().toUpperCase() === a.toString().toUpperCase() && e["delete"](b), l = m);
    return l;
  };
  this.startTransaction = function() {
    ++f;
  };
  this.getSkill = function(a) {
    var e = null === a || "undefined" === typeof a ? null : a.toLowerCase(), e = b[e];
    d.ctatdebug("CTATSkills.getSkill(" + a + ") returns " + e);
    return e;
  };
  this.getSkillBarVector = function(a, d) {
    var e = [], l;
    for (l in b) {
      !0 === b.hasOwnProperty(l) && (!0 !== d && b[l].getTransactionNumber() !== f || e.push(b[l].getSkillBarString(a)));
    }
    return e;
  };
  this.setExternallyDefined = function(a) {
  };
  this.setVersion = function(a) {
    for (var d in b) {
      !0 === b.hasOwnProperty(d) && b[d].setVersion(a);
    }
  };
};
CTATSkills.prototype = Object.create(CTATBase.prototype);
CTATSkills.prototype.constructor = CTATSkills;
"undefined" !== typeof module && (module.exports = CTATSkills);
var ProblemStateSaver = function(a) {
  CTATBase.call(this, "ProblemStateSaver", a);
  this.tracer = a;
  var b = this, f = [], e = null, d = "", c = "", g = 0;
  this.saveAsYouGo = function(e) {
    b.ctatdebug("saveAsYouGo() curriculum_service_url " + d + ", tracer " + a);
    if (a && e) {
      var l = {};
      l.session_id = a.getSessionID();
      l.authenticity_token = c;
      l.summary = e.toXML(!1);
      l.problem_state = ProblemStateSaver.MESSAGES_TAG;
      for (var m = 0;m < f.length;++m) {
        l.problem_state += f[m];
      }
      l.problem_state += ProblemStateSaver.MESSAGES_TAG.replace("<", "</");
      ++g;
      b.ctatdebug("saveAsYouGo[" + g + "] to send problem_state length " + l.problem_state.length);
      CTATLMS.saveProblemState(l);
      CTATLMS.gradeStudent(parseInt(e.getCorrect()), parseInt(e.getRequiredSteps()));
    } else {
      b.ctatdebug("Error: no tracer or no problem summary available, aborting save as you go");
    }
  };
  this.setCurriculumServiceUrl = function(a) {
    b.ctatdebug("ProblemStateSaver.setCurriculumServiceUrl() old " + d + ", new " + a);
    d = a;
  };
  this.setAuthenticityToken = function(a) {
    b.ctatdebug("ProblemStateSaver.setAuthenticityToken() old " + c + ", new " + a);
    a && (c = a);
  };
  this.getStepToIndexMap = function() {
    null === e && (e = new Map);
    return e;
  };
  this.getProblemState = function() {
    return f;
  };
  this.getProblemStateLength = function() {
    return f.length;
  };
};
ProblemStateSaver.prototype = Object.create(CTATBase.prototype);
ProblemStateSaver.prototype.constructor = ProblemStateSaver;
ProblemStateSaver.prototype.replaceInProblemState = function(a, b, f, e) {
  b.mustSaveForRestore() && ProblemStateSaver.mustSaveForRestore(CTATMsgType.getMessageType(a)) && (b = this.getProblemState(), a = this.editForProblemState(a), e || (f = ProblemStateSaver.makeStepKey(f), this.getStepToIndexMap().has(f) && (e = this.getStepToIndexMap().get(f), b.splice(e, 1)), this.getStepToIndexMap().set(f, b.length)), b.push(a));
};
ProblemStateSaver.prototype.appendToProblemState = function(a, b, f) {
  if (f || b.mustSaveForRestore() && ProblemStateSaver.mustSaveForRestore(CTATMsgType.getMessageType(a))) {
    b = this.getProblemState(), a = this.editForProblemState(a), b.push(a);
  }
};
Object.defineProperty(ProblemStateSaver, "XML_PROLOGUE", {enumerable:!1, configurable:!1, writable:!1, value:/<\? *[xX][mM][lL][^?]*\?>/});
Object.defineProperty(ProblemStateSaver, "LEADING_WHITE_SPACE", {enumerable:!1, configurable:!1, writable:!1, value:/^\s+</m});
Object.defineProperty(ProblemStateSaver, "MESSAGES_TAG", {enumerable:!1, configurable:!1, writable:!1, value:"<messages>"});
ProblemStateSaver.prototype.editForProblemState = function(a) {
  var b = a.split(ProblemStateSaver.XML_PROLOGUE), f = b[0], e;
  for (e = 1;e < b.length;++e) {
    f += b[e];
  }
  b = f.split(ProblemStateSaver.LEADING_WHITE_SPACE);
  f = b[0];
  for (e = 1;e < b.length;++e) {
    f.endsWith("\n") && (f = f.slice(0, -1)), f.endsWith("\r") && (f = f.slice(0, -1)), f += "<" + b[e];
  }
  this.ctatdebug("ProblemStateSaver.editForProblemState(" + a + ")\n returns " + f);
  return f;
};
ProblemStateSaver.omitFromRestore = {init:!1};
ProblemStateSaver.mustSaveForRestore = function(a) {
  ProblemStateSaver.omitFromRestore.init || (ProblemStateSaver.omitFromRestore[CTATMsgType.ASSOCIATED_RULES.toLowerCase()] = !0, ProblemStateSaver.omitFromRestore[CTATMsgType.BUGGY_MESSAGE.toLowerCase()] = !0, ProblemStateSaver.omitFromRestore[CTATMsgType.CORRECT_ACTION.toLowerCase()] = !0, ProblemStateSaver.omitFromRestore[CTATMsgType.INCORRECT_ACTION.toLowerCase()] = !0, ProblemStateSaver.omitFromRestore[CTATMsgType.INTERFACE_IDENTIFICATION.toLowerCase()] = !0, ProblemStateSaver.omitFromRestore[CTATMsgType.PROBLEM_RESTORE_END.toLowerCase()] = 
  !0, ProblemStateSaver.omitFromRestore[CTATMsgType.PROBLEM_SUMMARY_REQUEST.toLowerCase()] = !0, ProblemStateSaver.omitFromRestore[CTATMsgType.PROBLEM_SUMMARY_RESPONSE.toLowerCase()] = !0, ProblemStateSaver.omitFromRestore[CTATMsgType.SET_PREFERENCES.toLowerCase()] = !0, ProblemStateSaver.omitFromRestore[CTATMsgType.SHOW_HINTS_MESSAGE.toLowerCase()] = !0, ProblemStateSaver.omitFromRestore[CTATMsgType.SUCCESS_MESSAGE.toLowerCase()] = !0, ProblemStateSaver.omitFromRestore.init = !0);
  return a && ProblemStateSaver.omitFromRestore[a.toLowerCase()] ? !1 : !0;
};
ProblemStateSaver.prototype.forwardToInterface = function(a, b, f) {
  var e = CTATMsgType.getMessageType(a);
  this.ctatdebug("PSS.forwardToInterface(" + e + ") problemState.length " + this.getProblemState().length + ", outputStatus " + f);
  if (f && f.isOutputSuppressed()) {
    return !1;
  }
  CTAT.ToolTutor.sendToInterface(a, b);
  f && f.transition(CTATMsgType.getMessageType(a));
  return !0;
};
ProblemStateSaver.prototype.processMessage = function(a) {
  this.ctatdebug("ProblemStateSaver.processMessage(" + a + ")");
};
ProblemStateSaver.makeStepKey = function(a) {
  if (!a) {
    return " ";
  }
  var b = a.getSelection();
  a = a.getAction();
  b = "string" != typeof b || 1 > b.length ? " " : b;
  a = "string" != typeof a || 1 > a.length ? " " : a;
  return b + " " + a;
};
"undefined" !== typeof module && (module.exports = ProblemStateSaver);
var ProblemStateRestorer = function(a) {
  CTATBase.call(this, "ProblemStateRestorer", a);
  var b = this, f = null;
  this.getRestoreProblemUrl = function() {
    return f;
  };
  this.setRestoreProblemUrl = function(a) {
    f = a;
  };
  this.toString = function() {
    return "[" + f + ": 0]";
  };
  this.retrieveMessages = function(e) {
    console.log("retrieveMessages(" + e + ", ...)");
    e.mustRetrieveProblemState() ? (a.stopWorking(1), CTATLMS.getProblemState(b.process)) : console.log("Retrieval status indicates that we should not retrieve");
  };
  this.process = function(e) {
    if ("string" != typeof e) {
      console.log("ProblemStateRestorer.process() called with parameter not a string: ", typeof e), a.enqueueForRestore([]);
    } else {
      if (e.slice(0, ProblemStateSaver.MESSAGES_TAG.length) != ProblemStateSaver.MESSAGES_TAG) {
        console.log("ProblemStateRestorer.process() called with unrecognized string: ", e.slice(0, 20)), a.enqueueForRestore([]);
      } else {
        var d = [];
        if ("string" == typeof e && (e = e.split(/<\/?messages>/), b.ctatdebug("msgsArr.length " + e.length + ", msgsArr[1].length " + (e[1] ? e[1].length : -1)), !(2 > e.length))) {
          e = e[1].split("<message>");
          b.ctatdebug("problemStateArr.length " + e.length);
          for (var c = 0, f = !1, h = 1;h < e.length;++h) {
            var l = "<message>" + e[h], m = CTATMsgType.getMessageType(l);
            CTATMsgType.STATE_GRAPH == m ? f = !0 : CTATMsgType.START_STATE_END == m ? f = !1 : f ? c++ : (a.getProblemStateSaver().appendToProblemState(l, null, !0), d.push(l));
            b.ctatdebug("problemStateArr[" + h + "] " + (f ? "omit " : "keep ") + m + " omitted " + c + " kept " + d.length);
          }
        }
        a.enqueueForRestore(d);
      }
    }
  };
};
ProblemStateRestorer.prototype = Object.create(CTATBase.prototype);
ProblemStateRestorer.prototype.constructor = ProblemStateRestorer;
"undefined" !== typeof module && (module.exports = ProblemStateRestorer);
var SCORMProblemSummary = function() {
  CTATBase.call(this, "SCORMProblemSummary", "");
};
Object.defineProperty(SCORMProblemSummary, "LESSON_STATUS", {enumerable:!1, configurable:!1, writable:!1, value:"cmi.core.lesson_status"});
Object.defineProperty(SCORMProblemSummary, "RAW_SCORE", {enumerable:!1, configurable:!1, writable:!1, value:"cmi.core.score.raw"});
Object.defineProperty(SCORMProblemSummary, "EXIT", {enumerable:!1, configurable:!1, writable:!1, value:"cmi.core.exit"});
Object.defineProperty(SCORMProblemSummary, "SESSION_TIME", {enumerable:!1, configurable:!1, writable:!1, value:"cmi.core.session_time"});
Object.defineProperty(SCORMProblemSummary, "ExitReason", {enumerable:!1, configurable:!1, writable:!1, value:{timeout:"time-out", suspend:"suspend", logout:"logout", done:" "}});
Object.defineProperty(SCORMProblemSummary, "LessonStatus", {enumerable:!1, configurable:!1, writable:!1, value:{passed:"passed", completed:"completed", failed:"failed", incomplete:"incomplete", browsed:"browsed", notAttempted:"not attempted"}});
SCORMProblemSummary.getLessonStatus = function(a) {
  return CTATMsgType.CompletionValue[1] == a.getCompletionStatus() ? SCORMProblemSummary.LessonStatus.completed : SCORMProblemSummary.LessonStatus.incomplete;
};
SCORMProblemSummary.getRawScore = function(a) {
  var b = a.getUniqueSteps();
  return 0 == b ? 0 : parseInt(100 * (a.getUniqueCorrectUnassisted() / b + .005));
};
SCORMProblemSummary.getExitReason = function(a) {
  return SCORMProblemSummary.ExitReason.suspend;
};
SCORMProblemSummary.getSessionTime = function(a) {
  var b = a.getTimeElapsed();
  a = b % 1E3;
  var b = (b - a) / 1E3, f = b / 60, e = f / 60, b = b % 60;
  9999 < e && (e = 9999, f = b = 99, a = 990);
  return sprintf("%04d:%02d:%02d.%02d", e, f, b, a / 10);
};
SCORMProblemSummary.getProblemSummaryElements = function(a) {
  var b = sprintf("<%s>%s</%s>", SCORMProblemSummary.LESSON_STATUS, SCORMProblemSummary.getLessonStatus(a), SCORMProblemSummary.LESSON_STATUS), f = sprintf("<%s>%d</%s>", SCORMProblemSummary.RAW_SCORE, SCORMProblemSummary.getRawScore(a), SCORMProblemSummary.RAW_SCORE), e = sprintf("<%s>%s</%s>", SCORMProblemSummary.EXIT, SCORMProblemSummary.getExitReason(a), SCORMProblemSummary.EXIT);
  a = sprintf("<%s>%s</%s>", SCORMProblemSummary.SESSION_TIME, SCORMProblemSummary.getSessionTime(a), SCORMProblemSummary.SESSION_TIME);
  return b + f + e + a;
};
CTATMsgType.prototype = Object.create(CTATBase.prototype);
CTATMsgType.prototype.constructor = SCORMProblemSummary;
"undefined" !== typeof module && (module.exports = SCORMProblemSummary);
var CTATExampleTracer = function() {
  function a(a, c) {
    c ? K |= 1 << a : (K &= -65537 >> 16 - a, b());
  }
  function b() {
    n.ctatdebug("workTheQueue() working " + K + ", workQueue.length " + I.length + ", restoreQueue.length " + B.length);
    if (0 == K) {
      for (;0 != (K = 0 < I.length | (0 < B.length) << 1);) {
        var a, b = !1;
        0 < B.length ? (a = B.shift(), b = !0) : a = I.shift();
        if (!f(a, b)) {
          n.ctatdebug("workTheQueue() suspending workQueue.length " + I.length + ", restoreQueue.length " + B.length);
          n.stopWorking(b ? 1 : 0);
          break;
        }
        n.ctatdebug("workTheQueue() bottom workQueue.length " + I.length + ", restoreQueue.length " + B.length);
      }
    }
  }
  function f(a, b) {
    n.lastMessageAsString = a;
    var f = n.lastMessageAsXML = (new CTATXML).parseXML(a), g = n.lastMessage = new CTATMessage(f), h = g.getMessageType();
    n.ctatdebug("CTATExampleTracer.handleMessageFromInterface(msgType " + h + ")");
    switch(h) {
      case CTATMsgType.SET_PREFERENCES:
        return e(a, g, t, f), !1;
      case CTATMsgType.INTERFACE_IDENTIFICATION:
        return !0;
      case CTATMsgType.UNTUTORED_ACTION:
        return b && n.sendBundle([a]), d(a, g, t, f), !0;
      case CTATMsgType.INTERFACE_ACTION:
        return b && n.sendBundle([a]), c(a, g, t, f), !0;
      case CTATMsgType.PROBLEM_SUMMARY_REQUEST:
        return setTimeout(function(a) {
          a = n.getProblemSummary();
          n.ctatdebug("CTATExampleTracer.ProblemSummaryRequest getProblemSummary() " + n.getProblemSummary());
          var c = "<message><verb>NotePropertySet</verb><properties><MessageType>" + CTATMsgType.PROBLEM_SUMMARY_RESPONSE + "</MessageType>", c = c + SCORMProblemSummary.getProblemSummaryElements(a), c = c + ("<ProblemSummary>" + a.toXML(!0) + "</ProblemSummary>"), c = c + "<end_of_transaction>true</end_of_transaction></properties></message>", d = [];
          d.push(c);
          n.sendBundle(d);
          F.transition(CTATMsgType.PROBLEM_SUMMARY_RESPONSE, a.getCompletionStatus());
          n.ctatdebug("CTATExampleTracer.handleProblemSummaryRequest() sent result '" + c + "';");
          n.startWorking(b ? 1 : 0);
        }, 4E3), !1;
      case CTATMsgType.START_STATE_END:
        return F.transition(CTATMsgType.START_STATE_END), !0;
      case CTATMsgType.PROBLEM_RESTORE_END:
        return p(), !0;
      default:
        return console.log("CTATExampleTracer.handleMessageFromInterface(restoring " + b + ") " + (b ? "sending" : "unprocessed") + " message, type " + h + "\n  " + a), b && n.sendBundle([a]), !0;
    }
  }
  function e(a, b, c, d) {
    n.ctatdebug("handleSetPreferences ()");
    J = !1;
    y = b.getProperty("problem_name");
    n.ctatdebug("SetPreferences.problem_name = " + y);
    a = c.getElementChildren(c.getElementChildren(d)[1]);
    for (b = 0;b < a.length;b++) {
      if (d = c.getElementName(a[b]), n.ctatdebug("SetPreferences eltName " + d), d) {
        switch(d.toLowerCase()) {
          case "question_file":
            x = c.getNodeTextValue(a[b]);
            break;
          case "skills":
            n.ctatdebug(" parseSkills(" + a[b] + ")");
            d = [];
            for (var e = t.getElementChildren(a[b]), f = 0;f < e.length;f++) {
              var g = t.getElementName(e[f]);
              if (g && "skill" == g.toLowerCase()) {
                var h = t.getElementAttr(e[f], "name");
                if (h && "" != h.trim()) {
                  var g = t.getElementAttr(e[f], "label"), l = t.getElementAttr(e[f], "pSlip"), m = t.getElementAttr(e[f], "description"), p = t.getElementAttr(e[f], "pKnown"), q = t.getElementAttr(e[f], "category"), u = t.getElementAttr(e[f], "pLearn"), w = t.getElementAttr(e[f], "pGuess"), z = t.getElementAttr(e[f], "history"), h = new CTATExampleTracerSkill(q, h, w, p, l, u, z);
                  h.setLabel(g);
                  h.setDescription(m);
                  d.push(h);
                }
              }
            }
            n.getProblemSummary().setSkills(new CTATSkills(d));
            break;
          case "problem_state_status":
            F.transition(CTATMsgType.SET_PREFERENCES, c.getNodeTextValue(a[b]));
            G || (G = new ProblemStateRestorer(n));
            n.ctatdebug("SetPreferences problemStateRestorer " + G);
            break;
          case "curriculum_service_url":
            CTATConfiguration.set("curriculum_service_url", c.getNodeTextValue(a[b]));
            break;
          case "restore_problem_url":
            G || (G = new ProblemStateRestorer(n));
            n.ctatdebug("SetPreferences problemStateRestorer " + G);
            CTATConfiguration.set("restoreProblemUrl", c.getNodeTextValue(a[b]));
            break;
          case "session_id":
            N = c.getNodeTextValue(a[b]);
            break;
          case "authenticity_token":
            r.setAuthenticityToken(c.getNodeTextValue(a[b]));
        }
      }
    }
    n.ctatdebug("outputStatus " + F + ", problemStateRestorer " + G);
    a = x;
    n.ctatdebug("retrieveBRD (" + a.indexOf("data:file/brd;base64,") + ")");
    0 == a.indexOf("data:file/brd;base64,") && (n.ctatdebug("Found Base 64 encoded data in question file, decoding and processing ..."), c = a.substring(21), b = window.atob(c), b = (c = new CTATXML).parseXML(b), n.processXML(b));
    n.ctatdebug("Using network retrieval to obtain BRD ...");
    S.retrieveXMLFile(a, c, n);
    G && G.retrieveMessages(F);
  }
  function d(a, b, c, d) {
    b = b.getTransactionID();
    n.ctatdebug("UntutoredAction (" + a + "), getTransactionID " + b);
    r.appendToProblemState(a, n.getOutputStatus(), !1);
    if (!J) {
      return !1;
    }
    n.setVariablesFromSAI(d, c);
    return !0;
  }
  function c(a, b, c, d) {
    n.ctatdebug("Interface action received.");
    c = b.getTransactionID();
    if (!J) {
      return !1;
    }
    n.messageTank = new CTATMessageTank(n, c);
    n.ctatdebug("MessageTank " + n.messageTank);
    n.ctatdebug("InterfaceAction (" + a + "), getTransactionID " + c);
    var e = b.getSelectionArray().slice(0);
    d = b.getActionArray().slice(0);
    n.ctatdebug("selectionArray " + e + ", message.getSelectionArray() " + b.getSelectionArray());
    if (e[0] && "_tutor" == e[0].toLowerCase()) {
      return n.ctatdebug("handleInterfaceAction tutor cmd SAI " + b.getSAI() + ";"), d[0] && "function" === typeof n[d[0]] && (c = b.getSAI().getInput(), n[d[0]](c)), !0;
    }
    !e[0] || "hint" != e[0].toLowerCase() && "help" != e[0].toLowerCase() ? (n.ctatdebug("calling doNewExampleTrace(null, " + b.getSAI() + ") sai.selectionArray " + b.getSAI().getSelectionArray() + " msg.selectionArray " + b.getSelectionArray()), m(null, b.getSAI(), "student", !0, c, a)) : (n.ctatdebug("handleInterfaceAction() hint request: hintPolicy " + C + ", errorSAI " + D), C === CTATHintPolicyEnum.HINTS_UNBIASED ? (1 < e.length && (e[1] = ""), 1 < d.length && (d[1] = "")) : C !== CTATHintPolicyEnum.HINTS_BIASED_BY_CURRENT_SELECTION_ONLY && 
    (C === CTATHintPolicyEnum.HINTS_BIASED_BY_PRIOR_ERROR_ONLY ? D && D.getSelection() ? (e.splice(1, 0, D.getSelection()), d.splice(1, 0, "PreviousFocus")) : (e[1] = "", d[1] = "") : C === CTATHintPolicyEnum.HINTS_BIASED_BY_ALL && D && D.getSelection() && (e.splice(1, 0, D.getSelection()), d[1] = CTATMsgType.PREVIOUS_FOCUS.toString())), n.startSkillTransaction(), a = [], d = u.doHint(e, d, b.getInputArray(), "student", a, !0), b = a[0], a = b.getReportableHints(), e = d ? "" + d.getUniqueID() : 
    "", b.setStepID(e), n.updateSkills(CTATExampleTracerSkill.HINT, d ? d.getSkillNames() : [], e), n.ctatdebug("Before building hint message: tutorSAI " + b.getTutorSAI() + ", hints " + a + ", edge # " + e), d = (new CTATTutorMessageBuilder).createHintMessage(a, b.getTutorSAI(), e, c), n.messageTank.addToMessageTank(CTATMsgType.SHOW_HINTS_MESSAGE, d, b, null), c = (new CTATTutorMessageBuilder).createAssociatedRulesMessageForHint(a, b.getTutorSAI(), q(CTATMsgType.DEFAULT_STUDENT_ACTOR), n.getSkillBarVector(!0), 
    e, c), n.messageTank.addToMessageTank(CTATMsgType.ASSOCIATED_RULES, c, b, null), c = n.getProblemSummary(b.getReportableInterpretation()), n.messageTank.flushMessageTank(c, !0), n.ctatdebug("handleInterfaceAction() sent hint result " + b), D = null);
    return !0;
  }
  function g(a, b, c) {
    var d = {tutorAdvice:null, msg:null, msgType:null};
    if (a.getReportableLink()) {
      return d.tutorAdvice = a.getSuccessOrBuggyMsg(), d.tutorAdvice && d.tutorAdvice.trim() ? (d.msg = c.createBuggyMessage(a.getTransactionID(), d.tutorAdvice), d.msgType = "BuggyMessage") : d.tutorAdvice = null, d;
    }
    n.ctatdebug("CTATET.createBuggyMessage() past getReportableLink()");
    if (a.isDoneStepFailed()) {
      return d.tutorAdvice = CTATMsgType.NOT_DONE_MSG, d.msg = c.createBuggyMessage(a.getTransactionID(), d.tutorAdvice), d.msgType = "BuggyMessage", d;
    }
    n.ctatdebug("CTATET.createBuggyMessage() past isDoneStepFailed()");
    var e = b && b.getTutorSAI() ? b.getTutorSAI().getSelection() : null, e = e && "" !== e.trim() ? e : null, f = a.getStudentSAI() ? a.getStudentSAI().getSelection() : null, f = f && "" !== f.trim() ? f : null;
    n.ctatdebug("CTATET.createBuggyMessage() past hintSelection0 " + e + ", studentSelection0 " + f);
    if (a.getResult() == CTATExampleTracerLink.NO_MODEL && a.isOutOfOrder() && e && e != f) {
      return n.ctatdebug("CTATET.createBuggyMessage() to create out of order"), n.isHighlightRightSelection() ? (d.tutorAdvice = n.getOutOfOrderMessage(), d.msg = c.createHighlightWidgetMessage(e, b.getTutorSAI().getAction(), d.tutorAdvice, a.getTransactionID()), d.msgType = "HighlightMsg", n.ctatdebug("createBuggyMessage() out of order with highlight; rtn: " + d)) : (d.tutorAdvice = CTATGlobals.languageManager.getString("OUTOFORDER"), d.msg = c.createBuggyMessage(a.getTransactionID, d.tutorAdvice), 
      d.msgType = "BuggyMessage", n.ctatdebug("createBuggyMessage() out of order without highlight; rtn: " + d)), d;
    }
    if (b = z.getDefaultBuggyMsg()) {
      return d.tutorAdvice = b, d.msg = c.createBuggyMessage(a.getTransactionID, d.tutorAdvice), d.msgType = "BuggyMessage", n.ctatdebug("createBuggyMessage() default buggy msg: " + d), d;
    }
    n.ctatdebug("createBuggyMessage() no buggy msg: " + d);
    return d;
  }
  function h(a, b, c, d) {
    n.ctatdebug("checkForTutorAction(" + a + ", " + b + ", " + c + ", " + d + ")");
    var e = [];
    e[0] = l(z.getNode(a), !0);
    e[1] = l(z.getNode(b), !1);
    n.ctatdebug("checkForTutorAction() links[0] " + e[0] + ", links[1] " + e[1] + ";");
    a = 0;
    if (e[0] === e[1]) {
      e[1] = null;
    } else {
      if (null === e[0] || "undefined" === typeof e[0]) {
        a = 1;
      }
    }
    b = null;
    n.messageTank || (n.messageTank = new CTATMessageTank(n, null));
    for (;a < e.length && null !== e[a] && "undefined" !== typeof e[a];++a) {
      if (null == c || "undefined" == typeof c) {
        b = m(e[a], e[a].getDefaultSAI(), e[a].getActor(), !0, null);
      } else {
        b = e[a].getEvaluatedInput(c, d.getReportableVariableTable());
        var f = e[a].getDefaultSAI().clone();
        f.setInput(b);
        b = m(e[a], f, e[a].getActor(), !0, null);
      }
    }
    n.ctatdebug("checkForTutorAction() returning " + b + ";");
    return b;
  }
  function l(a, b) {
    if (null === a || "undefined" === typeof a || 1 !== a.getCorrectOutDegree()) {
      return null;
    }
    var c = null;
    a.getCorrectOutLinks().forEach(function(a) {
      null === c && a.isTutorPerformed(b) && 0 < a.getMaxTraversals() && (c = a);
    });
    return c;
  }
  function m(a, b, c, d, e, f) {
    n.ctatdebug("doNewExampleTrace (link " + a + ", sai " + b + ", actor " + c + ", doTutorPerformedSteps " + d + ", transactionID " + e + ", origMsgTxt " + f);
    n.startSkillTransaction();
    var l = new CTATExampleTracerEvent(n, b, c);
    a && l.addPreloadedLinkMatch(a);
    var m = u.evaluate(l);
    n.ctatdebug("Evaluate returned : " + m + ", given link " + a + ", result " + l);
    a ? (n.ctatdebug("result.getTutorSelection() " + l.getTutorSelection()), n.ctatdebug("result.getTutorAction() " + l.getTutorAction()), n.ctatdebug("result.getTutorInput() " + l.getTutorInput()), n.ctatdebug("typeof(messageTank) " + typeof messageTank), e = l.getTutorSelection(), f = l.getTutorAction(), m = l.getTutorInput(), (e = n.messageTank.enqueueToolActionToStudent(e, f, m, CTATTutorMessageBuilder.TUTOR_PERFORMED)) && n.messageTank.setTransaction_id(e)) : n.isFeedbackSuppressed() ? r.replaceInProblemState(f, 
    n.getOutputStatus(), l.getStudentSAI(), z.getFeedbackPolicy() == CTATMsgType.HIDE_BUT_ENFORCE) : l.getResult() != CTATExampleTracerLink.CORRECT_ACTION && l.getResult() != CTATExampleTracerLink.FIREABLE_BUGGY_ACTION || r.appendToProblemState(f, n.getOutputStatus(), !1);
    l.setTransactionID(e);
    n.ctatdebug("finishNewExampleTrace(" + l + ", " + b + ", " + c + ", " + d + ")");
    f = l.getStudentSAI();
    var m = l.getTutorSAI(), p = l.getTransactionID(), t = new CTATTutorMessageBuilder, w = "", x = [];
    null !== l.getReportableLink() && "undefined" !== typeof l.getReportableLink() ? x[0] = l.getReportableLink() : x[0] = null;
    x = x[0];
    if (l.isSolverResult()) {
      l.getResult();
    } else {
      if (l.getResult() === CTATExampleTracerLink.CORRECT_ACTION) {
        w = x ? "" + x.getUniqueID() : "", l.setStepID(w), CTATMsgType.UNGRADED_TOOL_ACTOR.toUpperCase() != c.toUpperCase() && n.messageTank.addToMessageTank(CTATMsgType.CORRECT_ACTION, t.createCorrectActionMessage(p, m), l, m), null !== x && "undefined" !== typeof x && n.updateSkills(CTATExampleTracerSkill.CORRECT, x.getSkillNames(), x.getUniqueID()), w = l.getSuccessOrBuggyMsg(), n.messageTank.addToMessageTank(CTATMsgType.ASSOCIATED_RULES, t.createAssociatedRulesMessageForAction(l.getResult(), 
        m, q(c), f, n.getSkillBarVector(!0, c), x.getUniqueID(), p, w), l, m), n.ctatdebug("finishNewExampleTrace() successMsg " + w), w && n.messageTank.addToMessageTank("SuccessMessage", t.createSuccessMessage(p, w), l, null), D = null, d && (m = h(x ? x.getNextNode() : null, u.findCurrentState(!1, !1), n.lastMessage ? n.lastMessage.getSAI() : null, l)) && (l = m);
      } else {
        n.messageTank.addToMessageTank(CTATMsgType.INCORRECT_ACTION, t.createInCorrectActionMessage(p, l.getInterpolatedSAI()), l, null);
        n.ctatdebug("about to do silent traceForHint(" + f + "), selectionArray " + f.getSelectionArray());
        var y = n.lastSilentHintResult = new CTATExampleTracerEvent(n, f, c);
        y.setHintRequest(!0);
        var A = u.traceForHint(y);
        n.ctatdebug("silent hint result: " + y + "; hintLink " + A);
        A || (A = u.getBestNextLink(!1, y), n.ctatdebug("getBestNextLink result: " + y + "; hintLink " + A));
        m = null;
        A && ((m = y.getTutorSAI()) && m.getSelection() && l.setTutorSAI(m), w = "" + A.getUniqueID(), l.setStepID(w));
        y = g(l, y, t);
        n.ctatdebug("createBuggyMessage() tutorAdvice: " + y.tutorAdvice + ";\n  msg " + y.msg);
        n.updateSkills(CTATExampleTracerSkill.INCORRECT, A ? A.getSkillNames() : [], w);
        n.messageTank.addToMessageTank(CTATMsgType.ASSOCIATED_RULES, t.createAssociatedRulesMessageForAction(l.getResult(), m && m.getSelection() ? m : f, q(c), f, n.getSkillBarVector(!0, c), w, p, y.tutorAdvice), l, null);
        y.msg && n.messageTank.addToMessageTank(y.msgType, y.msg, l);
        D = f;
        d && CTATExampleTracerLink.FIREABLE_BUGGY_ACTION == l.getResult() ? (m = h(x ? x.getNextNode() : null, u.findCurrentState(!1, !1), n.lastMessage ? n.lastMessage.getSAI() : null, l)) && (l = m) : l.isDoneStepFailed() && n.messageTank.flushDelayedFeedback();
      }
    }
    n.lastResult = l;
    m = n.getProblemSummary(l.getReportableInterpretation());
    n.ctatdebug("finishNewExampleTrace() to flushMessageTank");
    n.messageTank.flushMessageTank(m, !0);
    n.ctatdebug("finishNewExampleTrace() sent result " + l.getResult() + ", studentSAI " + f);
    n.ctatdebug("doNewExampleTrace(" + a + ", " + b + ", " + c + ", " + d + ", " + e + ") returns " + l);
    return l;
  }
  function q(a) {
    return "undefined" != typeof a && a && 0 <= a.toString().toLowerCase().indexOf("tutor") ? "Tutor" : "Student";
  }
  function p() {
    F.transition(CTATMsgType.PROBLEM_RESTORE_END);
    var a = n.getSkillBarVector(), b = [], c = new CTATTutorMessageBuilder;
    b.push(c.createMessage(CTATMsgType.START_STATE_END, null));
    b.push(c.createMessage(CTATMsgType.PROBLEM_RESTORE_END, a ? {Skills:a} : null));
    n.sendBundle(b);
  }
  CTATBase.call(this, "CTATExampleTracer", "tracer");
  var n = this, x = null, u, w, z, t = new CTATXML;
  new XMLSerializer;
  var D = null, C, H = !0, E = !1, A = null, y = null, r = new ProblemStateSaver(n);
  r.setAuthenticityToken(CTATCommLibrary.getAuthenticityToken());
  var G = null, F = new CTATProblemStateStatus, B = [], I = [], K = 0, J = !1, N = "", P = null;
  n.ctatdebug("CTATExampleTracer constructor outputStatus=" + F);
  this.messageTank = this.lastSilentHintResult = this.lastResult = this.lastMessage = this.lastMessageAsXML = this.lastMessageAsString = null;
  var S = new CTATCommLibrary;
  this.receiveFromInterface = function(a) {
    n.ctatdebug("CTATExampleTracer.receiveFromInterface(" + a + ")");
    I.push(a);
    b();
  };
  this.setVariablesFromSAI = function(a, b) {
    var c = CTATMsgType.getSAIArraysFromElement(a, b);
    n.getTracer() && n.getTracer().addInterfaceVariables(c.selection, c.input);
  };
  this.traceLinks = function(a) {
    for (var b = [], c = n.getTracer().getBestInterpretation(), d = 0;d < a.length && null !== a[d];++d) {
      c.getTraversalCount(a[d]) < a[d].getMinTraversals() && (n.messageTank = new CTATMessageTank(n, null), b.push(m(a[d], a[d].getDefaultSAI(), a[d].getActor(), !1, null)), n.ctatdebug("traceLinks[" + d + "] result " + b[d]));
    }
    return b;
  };
  this.enqueueForRestore = function(a) {
    n.ctatdebug("enqueueForRestore: got " + a.length + " message elements");
    B = B.concat(a);
    a = (new CTATTutorMessageBuilder).createMessage(CTATMsgType.PROBLEM_RESTORE_END, null);
    B.push(a);
    n.startWorking(1);
  };
  this.startWorking = function(b) {
    a(b, !1);
  };
  this.stopWorking = function(b) {
    a(b, !0);
  };
  this.goToState = function(a) {
    u.resetTracer();
    return u.goToState(a, n);
  };
  this.processXML = function(a) {
    n.ctatdebug("processXML ()");
    if (null != a) {
      n.ctatdebug("No of children" + t.getElementChildren(a).length);
      var b = new CTATGraphParser, c = b.parseGraph(a, n);
      z = c.gr;
      u = c.tracer;
      a = c.ssm;
      c = c.sgMsg;
      n.ctatdebug("sendStartStateMessages() nMsgs " + a.length + ", outputStatus " + F);
      for (var d = [], e = new XMLSerializer, f = null, g = 0;g < a.length;g++) {
        if ("message" == t.getElementName(a[g])) {
          var l = e.serializeToString(a[g]), m = CTATMsgType.getMessageType(l);
          CTATMsgType.UNTUTORED_ACTION != m && CTATMsgType.INTERFACE_ACTION != m || n.setVariablesFromSAI(a[g], t);
          CTATMsgType.START_STATE_END == m ? (f = d, z.getFeedbackPolicy() != CTATMsgType.SHOW_ALL_FEEDBACK && (m = new CTATSAI("hint", "SetVisible", "false"), m = (new CTATTutoringServiceMessageBuilder).createInterfaceActionMessage("dummyTransactionID", m), f.push(m)), f = l, d.push((new CTATTutoringServiceMessageBuilder).createInterfaceConfigurationEnd())) : d.push(l);
        }
      }
      d.unshift(c);
      n.ctatdebug("sendStartStateMessages(): " + a.length + " elts, " + d.length + " strings, " + F);
      n.sendBundle(d);
      a = f;
      a: {
        c = [];
        d = z.getStartNode();
        e = z.getStudentStartsHereNode();
        if (null !== d && null !== e && d.getNodeID() != e.getNodeID()) {
          c = z.getBestSubpath(d, e);
          n.ctatdebug("advanceToStudentStartsHere() path " + c);
          if (!c) {
            break a;
          }
          c = c.getSortedLinks();
          c = n.traceLinks(c);
          n.ctatdebug("advanceToStudentStartsHere() results " + c);
        }
        e = d = null;
        0 < c.length && (e = c[c.length - 1], c = e.getReportableLink(), null !== c && (d = c.getNextNode()));
        n.ctatdebug("advanceToStudentStartsHere() to check for TPA " + d + ", " + e);
        h(d, u.findCurrentState(!1, !1), null, e);
      }
      c = [];
      a && (d = new CTATTutorMessageBuilder, c.push(d.createLockWidgetMsg(b.getLockWidget())), c.push(a));
      F.isIncomplete() || c.push((new CTATTutorMessageBuilder).createMessage(CTATMsgType.PROBLEM_RESTORE_END, null));
      0 < c.length && n.sendBundle(c);
      J = !0;
    }
    n.startWorking(0);
  };
  this.addGraphSkills = function(a) {
    n.ctatdebug("adding graph skills: " + a.length);
    0 < a.length && (a = new CTATSkills(a), a.setExternallyDefined(!1), n.getProblemSummary().setSkills(a));
  };
  this.sendBundle = function(a) {
    n.ctatdebug("sending bundle #msgs = " + a.length + ", outputStatus " + F);
    for (var b = 0, c = 0;c < a.length;c++) {
      n.ctatdebug("Sending message #" + c);
      var d = a[c];
      0 >= c && (d = '<?xml version="1.0" encoding="UTF-8"?>' + d);
      r.forwardToInterface(d, c >= a.length - 1, F) && ++b;
    }
    return 0 < b;
  };
  this.setHintPolicy = function(a) {
    C = CTATHintPolicyEnum.lookup(a);
  };
  this.isHighlightRightSelection = function() {
    return H;
  };
  this.setHighlightRightSelection = function(a) {
    H = a;
  };
  this.updateSkills = function(a, b, c) {
    var d = [];
    n.ctatdebug("in updateSkills(" + b + ") with step ID = " + c + ", transaction result = " + a);
    var e = n.getProblemSummary().getSkills();
    if (null === e || "undefined" === typeof e) {
      return d;
    }
    b.forEach(function(b) {
      b = e.updateSkill(a, b, c);
      null !== b && "undefined" !== typeof b && d.push(b);
    });
    return d;
  };
  this.getSessionID = function() {
    return N;
  };
  this.getProblemSummary = function(a) {
    n.ctatdebug("Entering getProblemSummary() problemSummary " + A);
    if (null === A || "undefined" === typeof A) {
      var b = n.getProblemName();
      A = null === b || "undefined" === typeof b || 1 > b.length ? new CTATProblemSummary("NoProblemDefined", null, n.isFeedbackSuppressed()) : new CTATProblemSummary(b, null, n.isFeedbackSuppressed());
    }
    a && A.setRequiredSteps(a.countStepsForScore(z));
    return A;
  };
  this.getProblemName = function() {
    return y;
  };
  this.isFeedbackSuppressed = function() {
    return E;
  };
  this.setFeedbackSuppressed = function(a) {
    E = "false" === a ? !1 : "true" === a ? !0 : a === CTATMsgType.SHOW_ALL_FEEDBACK ? !1 : a === CTATMsgType.HIDE_ALL_FEEDBACK ? !0 : a === CTATMsgType.HIDE_BUT_ENFORCE ? !0 : a === CTATMsgType.HIDE_BUT_COMPLETE ? !0 : !1;
    n.ctatdebug("setFeedbackSuppressed(" + a + "): " + E);
    A && A.setCountOnlyLastResults(E);
  };
  this.getSkillBarVector = function(a, b) {
    var c = n.getProblemSummary().getSkills();
    return null === c || "undefined" === typeof c ? null : "Student" != q(b) ? null : "undefined" != typeof a && a ? c.getSkillBarVector(!1, !1) : c.getSkillBarVector(!0, !0);
  };
  this.startSkillTransaction = function() {
    var a = n.getProblemSummary().getSkills();
    a && a.startTransaction();
  };
  this.getProblemStateSaver = function() {
    return r;
  };
  this.isSendingSavedMsgsForRestore = function() {
    return n.getOutputStatus().isSendingSavedMsgsForRestore();
  };
  this.getOutputStatus = function() {
    return F;
  };
  this.setOutputStatus = function(a) {
    var b = F.getStatus();
    n.ctatdebug("setOutputStatus() old " + b + ", new " + a);
    CTATProblemStateStatus[a] ? F.setStatus(CTATProblemStateStatus[a]) : (console.error("CTATExampleTracer.setOutputStatus() unexpected argument " + a), F.setStatus(CTATProblemStateStatus.empty));
  };
  this.getFeedbackPolicy = function() {
    return z ? z.getFeedbackPolicy() : CTATMsgType.SHOW_ALL_FEEDBACK;
  };
  this.getGraph = function() {
    return z;
  };
  this.getTracer = function() {
    return u;
  };
  this.getOutOfOrderMessage = function() {
    return w ? w : CTATMsgType.DEFAULT_OUT_OF_ORDER_MESSAGE;
  };
  this.setOutOfOrderMessage = function(a) {
    w = a;
  };
  this.getDelayedFeedback = function() {
    null == P && (P = {});
    return P;
  };
  this.clearDelayedFeedback = function() {
    P = null;
  };
  this.getQuestionFile = function(a) {
    if (!x || a) {
      return x;
    }
    a = x.split("/");
    return a[a.length - 1];
  };
};
CTATExampleTracer.prototype = Object.create(CTATBase.prototype);
CTATExampleTracer.prototype.constructor = CTATExampleTracer;
"undefined" !== typeof module && (module.exports = CTATExampleTracer);

